var search_data = {"index":{"searchIndex":["actioncontroller","assertions","domassertions","modelassertions","responseassertions","routingassertions","selectorassertions","tagassertions","base","benchmarking","classmethods","cgihandler","properstream","caching","actions","actioncachepath","classmethods","fragments","pages","classmethods","sweeping","cgiext","stdinput","cookies","dispatcher","failsafe","filters","classmethods","flash","flashhash","helpers","classmethods","http","headers","httpauthentication","basic","controllermethods","digest","controllermethods","integration","runner","session","multipartneededexception","integrationtest","layout","classmethods","middlewarestack","middleware","mimeresponds","instancemethods","paramsparser","performancetest","polymorphicroutes","recordidentifier","reloader","bodywrapper","request","requestforgeryprotection","classmethods","rescue","classmethods","resources","response","routing","helpers","optimisation","optimiser","positionalarguments","positionalargumentswithadditionalparams","optionalformatsegment","routeset","mapper","session","abstractstore","optionshash","sessionhash","sessionutils","cookiestore","cookieoverflow","memcachestore","sessionmanagement","classmethods","streaming","stringcoercion","uglybody","testcase","assertions","raiseactionexceptions","testprocess","testresponse","testuploadedfile","translation","uploadedfile","uploadedstringio","uploadedtempfile","urlwriter","verification","classmethods","actionmailer","base","actionview","base","proxymodule","helpers","activerecordhelper","assettaghelper","atomfeedhelper","atombuilder","atomfeedbuilder","benchmarkhelper","cachehelper","capturehelper","classmethods","csrfhelper","datehelper","debughelper","formbuilder","formhelper","formoptionshelper","formtaghelper","javascripthelper","numberhelper","prototypehelper","javascriptgenerator","generatormethods","rawoutputhelper","recordidentificationhelper","recordtaghelper","sanitizehelper","scriptaculoushelper","taghelper","texthelper","translationhelper","urlhelper","partials","reloadabletemplate","reloadablepath","templatedeleted","unfreezable","renderable","template","eagerpath","path","templatehandler","templatehandlers","builder","compilable","classmethods","erb","rjs","testcase","testcontroller","activerecord","activerecorderror","adapternotfound","adapternotspecified","aggregations","classmethods","associationpreload","classmethods","associationtypemismatch","associations","classmethods","innerjoindependency","innerjoinassociation","hasonethroughassociation","attributeassignmenterror","attributemethods","classmethods","autosaveassociation","classmethods","base","batches","classmethods","calculations","classmethods","callbacks","configurationerror","connectionadapters","abstractadapter","column","format","connectionhandler","connectionmanagement","connectionpool","databaselimits","databasestatements","mysqladapter","postgresqladapter","querycache","quoting","sqliteadapter","version","schemastatements","table","tabledefinition","connectionnotestablished","connectiontimeouterror","dangerousattributeerror","dirty","classmethods","dynamicfindermatch","dynamicscopematch","error","errors","locking","optimistic","classmethods","pessimistic","migration","migrationproxy","missingattributeerror","multiparameterassignmenterrors","namedscope","classmethods","scope","nestedattributes","classmethods","toomanyrecords","observer","observing","classmethods","preparedstatementinvalid","querycache","classmethods","readonlyrecord","recordinvalid","recordnotfound","recordnotsaved","reflection","classmethods","macroreflection","rollback","schema","serialization","serializationtypemismatch","sessionstore","session","sqlbypass","staleobjecterror","statementinvalid","testfixtures","classmethods","timestamp","transactions","classmethods","unknownattributeerror","validations","classmethods","activeresource","badrequest","base","clienterror","connection","custommethods","classmethods","instancemethods","errors","forbiddenaccess","formats","jsonformat","xmlformat","httpmock","invalidrequesterror","request","resourceconflict","resourcegone","resourcenotfound","response","sslerror","servererror","timeouterror","unauthorizedaccess","validations","activesupport","backtracecleaner","base64","basicobject","bufferedlogger","severity","cache","compressedmemcachestore","filestore","memcachestore","memorystore","store","strategy","localcache","synchronizedmemorystore","callbacks","callback","callbackchain","classmethods","coreextensions","array","access","conversions","extractoptions","grouping","randomaccess","wrapper","base64","encoding","bigdecimal","conversions","date","behavior","calculations","classmethods","conversions","datetime","calculations","classmethods","conversions","file","atomic","float","rounding","time","hash","conversions","classmethods","deepmerge","diff","except","keys","reversemerge","slice","integer","evenodd","inflections","time","module","numeric","bytes","conversions","time","pathname","cleanwithin","range","blocklessstep","conversions","includerange","overlaps","string","access","behavior","conversions","filters","inflections","iterators","multibyte","startsendswith","time","behavior","calculations","classmethods","conversions","zones","classmethods","deprecation","deprecatedobjectproxy","duration","gzip","stream","inflector","inflections","json","backends","jsongem","okjson","parseerror","yajl","yaml","encoding","circularreferenceerror","variable","memoizable","instancemethods","messageencryptor","invalidmessage","messageverifier","invalidsignature","modelname","multibyte","chars","codepoint","encodingerror","unicodedatabase","okjson","error","utf8error","rescuable","classmethods","safebuffer","securerandom","stringinquirer","testcase","testing","assertions","declarative","performance","benchmarker","metrics","base","cputime","gcruns","gctime","memory","objects","processtime","time","walltime","performer","profiler","setupandteardown","forclassictestunit","forminitest","timewithzone","timezone","xmlmini","xmlmini_libxmlsax","hashbuilder","xmlmini_nokogiri","conversions","document","node","xmlmini_nokogirisax","hashbuilder","benchmark","blankslate","builder","blankslate","css","illegalblockerror","xmlbase","xmlevents","xmlmarkup","cgi","cookie","queryextension","class","commands","discover","info","install","list","plugin","remove","source","sources","unsource","update","continuum","entry","date","datetime","dir","dispatchservlet","erb","util","enumerable","falseclass","fixnum","fixtures","gem","gettext","poparser","html","fullsanitizer","linksanitizer","sanitizer","selector","tag","whitelistsanitizer","hash","hashwithindifferentaccess","i18n","argumenterror","backend","activerecord","implementation","missing","storeprocs","translation","base","cache","cascade","chain","cldr","fallbacks","flatten","gettext","podata","interpolationcompiler","compiler","keyvalue","implementation","memoize","metadata","pluralization","simple","implementation","transliterator","hashtransliterator","proctransliterator","config","gettext","helpers","invalidlocale","invalidpluralizationdata","locale","fallbacks","tag","parents","rfc4646","parser","simple","missinginterpolationargument","missingtranslationdata","reservedinterpolationkey","unknownfiletype","kernel","keyerror","libxml","conversions","document","node","logger","formatter","simpleformatter","memcache","memcacheerror","server","mime","type","module","nilclass","object","pgresult","plugin","process","rexml","document","entity","racklintpatch","allowstringsubclass","rails","backtracecleaner","configuration","gembuilder","gemdependency","gemplugin","generator","abstractgemsource","base","commands","base","create","destroy","list","rewindbase","update","gemgeneratorsource","gempathsource","generatedattribute","generatorerror","lookup","classmethods","manifest","namedbase","options","classmethods","pathsource","scripts","base","source","spec","usageerror","initializer","plugin","rack","secretkeygenerator","vendorgemsourceindex","railsenvironment","railsfcgihandler","recursivehttpfetcher","repositories","repository","sourceannotationextractor","annotation","string","symbol","tzinfo","ambiguoustime","definitions","africa","algiers","cairo","casablanca","harare","johannesburg","monrovia","nairobi","america","argentina","buenos_aires","san_juan","bogota","caracas","chicago","chihuahua","denver","godthab","guatemala","halifax","indiana","indianapolis","juneau","la_paz","lima","los_angeles","mazatlan","mexico_city","monterrey","new_york","phoenix","regina","santiago","sao_paulo","st_johns","tijuana","asia","almaty","baghdad","baku","bangkok","chongqing","colombo","dhaka","hong_kong","irkutsk","jakarta","jerusalem","kabul","kamchatka","karachi","katmandu","kolkata","krasnoyarsk","kuala_lumpur","kuwait","magadan","muscat","novosibirsk","rangoon","riyadh","seoul","shanghai","singapore","taipei","tashkent","tbilisi","tehran","tokyo","ulaanbaatar","urumqi","vladivostok","yakutsk","yekaterinburg","yerevan","atlantic","azores","cape_verde","south_georgia","australia","adelaide","brisbane","darwin","hobart","melbourne","perth","sydney","etc","utc","europe","amsterdam","athens","belgrade","berlin","bratislava","brussels","bucharest","budapest","copenhagen","dublin","helsinki","istanbul","kiev","lisbon","ljubljana","london","madrid","minsk","moscow","paris","prague","riga","rome","sarajevo","skopje","sofia","stockholm","tallinn","vienna","vilnius","warsaw","zagreb","pacific","auckland","fiji","guam","honolulu","majuro","midway","noumea","pago_pago","port_moresby","tongatapu","invalidtimezoneidentifier","nooffsetsdefined","periodnotfound","timezone","timezoneperiod","unknowntimezone","test","unit","time","trueclass","%()","+()","+()","+()","+()","+()","-()","-()","<<()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","===()","===()","===()","===()","=~()","=~()","=~()",">()",">>()","get()","post()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","_()","_()","_call()","_dump()","_dump()","_end_tag()","_load()","_load()","_original_load()","_reduce_none()","_start_tag()","abbrev()","abbreviation()","about()","abstract_class?()","accepts()","accepts_nested_attributes_for()","accessible_paths()","active()","active?()","active?()","active?()","active?()","active?()","acts_like?()","acts_like_date?()","acts_like_string?()","acts_like_string?()","acts_like_time?()","acts_like_time?()","adapter_name()","adapter_name()","add()","add()","add()","add()","add()","add_column()","add_column()","add_column()","add_column_position!()","add_filter()","add_frozen_gem_path()","add_gem_load_paths()","add_general_options!()","add_index()","add_limit!()","add_limit_offset!()","add_load_paths()","add_lock!()","add_observer!()","add_on_blank()","add_on_empty()","add_options!()","add_order_by_for_association_limiting!()","add_plugin_load_paths()","add_silencer()","add_spec()","add_support_load_paths()","add_timestamps()","add_to_base()","add_to_base()","advance()","advance()","advance()","advance()","after_create()","after_destroy()","after_filter()","after_generate()","after_initialize()","after_initialize()","after_initialize_blocks()","after_save()","after_update()","after_validation()","after_validation_on_create()","after_validation_on_update()","aggregate_mapping()","ago()","ago()","ago()","ago()","ago()","ago()","alert()","alias_attribute()","alias_attribute_with_dirty()","alias_method_chain()","alive?()","all()","all()","all()","all()","all_country_zone_identifiers()","all_country_zones()","all_data_zone_identifiers()","all_data_zones()","all_identifiers()","all_linked_zone_identifiers()","all_linked_zones()","allow_concurrency()","allow_concurrency=()","announce()","any?()","app()","append()","append_after_filter()","append_around_filter()","append_before_filter()","append_features()","append_features()","append_features()","append_sources()","append_view_path()","append_view_path()","applicable?()","applicable?()","around_filter()","array_or_string_for_javascript()","arrenc()","arrparse()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_load_path()","as_str()","assert_blank()","assert_difference()","assert_dom_equal()","assert_dom_not_equal()","assert_generates()","assert_no_difference()","assert_no_tag()","assert_present()","assert_recognizes()","assert_redirected_to()","assert_response()","assert_routing()","assert_select()","assert_select_email()","assert_select_encoded()","assert_select_rjs()","assert_tag()","assert_template()","assert_valid()","assert_valid_keys()","assign()","assign_default_content_type_and_charset!()","assigns()","assume_migrated_upto_version()","at()","at()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_month()","at_beginning_of_month()","at_beginning_of_quarter()","at_beginning_of_quarter()","at_beginning_of_week()","at_beginning_of_week()","at_beginning_of_year()","at_beginning_of_year()","at_end_of_month()","at_end_of_month()","at_end_of_quarter()","at_end_of_quarter()","at_end_of_week()","at_end_of_week()","at_end_of_year()","at_end_of_year()","at_midnight()","at_midnight()","at_midnight()","atom_feed()","atomic_write()","attr_accessible()","attr_accessor_with_default()","attr_internal()","attr_internal_accessor()","attr_internal_reader()","attr_internal_writer()","attr_protected()","attr_readonly()","attribute_for_inspect()","attribute_match()","attribute_method_suffix()","attribute_names()","attribute_present?()","attributes()","attributes()","attributes=()","attributes_before_type_cast()","authenticate()","authenticate()","authenticate_or_request_with_http_basic()","authenticate_or_request_with_http_digest()","authenticate_with_http_basic()","authenticate_with_http_digest()","authentication_header()","authentication_request()","authentication_request()","authorization()","authorization()","auto_discovery_link_tag()","auto_flush()","auto_flushing=()","auto_link()","available_locales()","available_locales()","available_locales()","available_locales()","available_locales()","available_locales()","available_locales()","available_locales()","available_locales=()","average()","backend()","backend()","backend=()","backend=()","backend=()","backtrace_cleaner()","bang?()","banner()","banner()","banner()","banner()","base64()","base_class()","becomes()","before_create()","before_destroy()","before_filter()","before_save()","before_update()","before_validation()","before_validation_on_create()","before_validation_on_update()","begin_db_transaction()","begin_db_transaction()","beginning_of_day()","beginning_of_day()","beginning_of_day()","beginning_of_month()","beginning_of_month()","beginning_of_quarter()","beginning_of_quarter()","beginning_of_week()","beginning_of_week()","beginning_of_year()","beginning_of_year()","belongs_to()","belongs_to()","belongs_to()","belongs_to?()","benchmark()","benchmark()","benchmark()","benchmark()","best_install_method()","between?()","binary_search()","binary_to_string()","blank?()","blank_slate_method_added()","blank_slate_method_added()","blankslate_original_append_features()","body()","breakpoint()","breakpoint_server()","breakpoint_server=()","browser_generated?()","buffer()","build()","build()","build()","build()","build_callbacks()","build_mem_cache()","build_observer()","build_request_uri()","built?()","builtin_directories()","button_to()","button_to_function()","button_to_remote()","byte()","bytes()","cache()","cache()","cache()","cache()","cache()","cache_asset_timestamps()","cache_asset_timestamps=()","cache_attribute?()","cache_attributes()","cache_configured?()","cache_decr()","cache_fixtures()","cache_for_connection()","cache_format()","cache_get()","cache_get_multi()","cache_incr()","cache_key()","cache_key()","cache_namespace()","cache_namespace=()","cache_page()","cache_page()","cache_store()","cache_store=()","cache_store=()","cached_attributes()","cached_fixtures()","caches_action()","caches_page()","calculate()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","camelcase()","camelize()","camelize()","capitalize()","capture()","cas()","case_sensitive_equality_operator()","case_sensitive_equality_operator()","catch_schema_changes()","cattr_accessor()","cattr_reader()","cattr_writer()","cdata!()","cdata_block()","cdata_section()","center()","change()","change()","change()","change()","change_column()","change_column()","change_column_default()","change_column_default()","change_column_null()","change_column_null()","change_column_null()","change_default()","change_table()","changed()","changed?()","changed_for_autosave?()","changes()","characters()","chars()","charset()","charset()","charset=()","check_box()","check_box_tag()","check_for_name_collision()","check_for_unbuilt_gems()","check_gem_dependencies()","check_multithread_status!()","check_ruby_version()","checkin()","checkout()","class!()","class_attribute()","class_collisions()","class_collisions()","class_collisions()","class_eval()","class_eval()","class_file()","class_name()","class_name()","class_of_active_record_descendant()","classify()","classify()","clean()","clean_backtrace()","clean_within()","cleanup_application()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear_active_connections!()","clear_all_connections!()","clear_buffer()","clear_query_cache()","clear_reloadable_connections!()","clear_reloadable_connections!()","clear_stale_cached_connections!()","client_min_messages()","client_min_messages=()","clone()","clone()","close()","close()","close()","close()","close_connection()","collation()","collection_path()","collection_path()","collection_select()","collection_select()","colorize_logging()","column()","column()","column_for_attribute()","column_name_length()","column_names()","columns()","columns()","columns()","columns_hash()","columns_per_multicolumn_index()","columns_per_table()","columns_with_query_cache()","comment!()","comment!()","commit_db_transaction()","commit_db_transaction()","comparable_time()","compare_with_coercion()","compare_with_coercion()","compile()","compile()","compile()","compile()","compile_all_strings_in()","compile_if_an_interpolation()","compile_interpolation_token()","compiled_interpolation_body()","complex_template()","complex_template()","complex_template()","complex_template()","compose()","compose_codepoints()","composed_of()","compress()","compute()","compute_type()","concat()","config()","config=()","configuration()","configuration=()","configurations()","connect()","connect_to()","connected?()","connected?()","connected?()","connection()","connection()","connection()","connection()","connection()","connection()","connection()","connection_handler()","connection_pool()","connection_pools()","constantize()","constantize()","construct_count_options_from_args()","consumes?()","contains_bad_protocols?()","content_columns()","content_for()","content_length()","content_tag()","content_tag_for()","content_type()","content_type()","content_type()","content_type=()","controller_class()","controller_class=()","controller_class_name()","controller_class_name()","controller_name()","controller_name()","controller_name()","controller_path()","controller_path()","controller_path()","controller_path()","controller_path()","controller_relative_to()","convert_key()","convert_value()","cookies()","cookies()","count()","count()","count()","count_by_sql()","create()","create()","create()","create()","create!()","create_continuum_for()","create_database()","create_database()","create_fixtures()","create_fixtures()","create_reflection()","create_savepoint()","create_savepoint()","create_savepoint()","create_table()","create_table!()","create_table!()","csrf_meta_tag()","css_select()","current()","current()","current()","current_cycle()","current_database()","current_database()","current_hash()","current_hash()","current_migration_number()","current_page?()","current_period()","current_period_and_time()","current_savepoint_name()","current_time_and_period()","custom_method_collection_url()","cycle()","daemon()","daemonize()","dasherize()","dasherize()","data()","data()","data()","data_column()","data_column_name()","data_column_size_limit()","database_configuration()","date_select()","date_select()","datetime_format()","datetime_format=()","datetime_select()","datetime_select()","day()","days()","days_in_month()","debug()","debug_rjs()","debugger()","declare!()","decode()","decode()","decode()","decode()","decode()","decode()","decode()","decode64()","decode_credentials()","decode_credentials()","decode_credentials_header()","decompose()","decompose_codepoints()","decompress()","decr()","decrement()","decrement()","decrement()","decrement()","decrement!()","decrement_counter()","decrement_open_transactions()","decrypt()","decrypt_and_verify()","deep_merge()","deep_merge!()","deep_merge!()","deep_munge()","deep_symbolize_keys()","default()","default()","default()","default()","default=()","default_error_messages()","default_locale()","default_locale=()","default_options()","default_options()","default_options()","default_primary_key_type()","default_scope()","default_separator()","default_separator=()","default_sequence_name()","default_timezone()","default_url_options()","defaults()","defaults=()","define()","define_around_helper()","define_attribute_methods()","define_callbacks()","define_dispatcher_callbacks()","define_read_methods()","delay()","delegate()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete?()","delete_all()","delete_existing_fixtures()","delete_matched()","delete_matched()","delete_matched()","delete_matched()","delete_sql()","delete_via_redirect()","deliver()","deliver!()","demodulize()","demodulize()","dependencies()","dependency()","dependency()","descends_from_active_record?()","destination_path()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy_all()","destroyed?()","detect_type()","determine_default_controller_class()","determine_default_helper_class()","determine_install_method()","diff()","direct_key()","directory()","directory()","directory()","directory()","dirname()","dirties_query_cache()","disable_dependency_loading()","disable_referential_integrity()","discard()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","dispatch()","dispatch()","dispatch()","dispatch_cgi()","dispatch_cgi()","dispatcher_error()","dispatcher_log()","display()","distance_of_time_in_words()","distance_of_time_in_words_to_now()","distinct()","div_for()","dom_class()","dom_class()","dom_id()","dom_id()","domain()","downcase()","download()","draggable()","draggable_element()","drop_receiving()","drop_receiving_element()","drop_table()","drop_table()","drop_table!()","drop_table!()","dst?()","dst?()","dup()","dup()","dup()","duplicable?()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each_char()","each_error()","each_full()","each_full()","each_with_hack()","each_with_object()","eat()","element_path()","element_path()","empty?()","empty?()","empty_insert_statement()","empty_insert_statement()","emulate_booleans()","enable_warnings()","encode()","encode()","encode()","encode()","encode64()","encode64s()","encode_credentials()","encode_credentials()","encoding()","encrypt()","encrypt_and_sign()","end_document()","end_element()","end_of_day()","end_of_day()","end_of_day()","end_of_month()","end_of_month()","end_of_quarter()","end_of_quarter()","end_of_week()","end_of_week()","end_of_year()","end_of_year()","ends_with?()","engine?()","entity_expansion_limit=()","entry()","entry_count_for()","enumerate()","env()","environment()","environment()","environment=()","environment_path()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","erase()","erb_trim_mode()","error()","error_message_on()","error_messages_for()","errors()","errors()","escape_bytea()","escape_javascript()","escape_key_sym()","escape_once()","escape_plain_str()","establish_connection()","establish_connection()","etag()","etag=()","etag?()","etag_matches?()","evaluate_remote_response()","even?()","exabyte()","exabytes()","except()","except()","except!()","exception_handler()","exception_handler=()","excerpt()","exclude?()","execute()","execute()","exempt_from_layout()","exempt_from_layout?()","exist()","exist?()","exist?()","exist?()","exist?()","exist?()","existing_migrations()","exists?()","exists?()","exists?()","exists?()","exit_handler()","exit_now_handler()","expand_cache_key()","expand_hash_conditions_for_aggregates()","expand_keys()","expected_response()","expire_action()","expire_fragment()","expire_page()","expire_page()","expires_in()","expires_now()","extended()","extended()","extended()","extension()","extension()","externals()","externals=()","extract_annotations_from()","extract_default()","extract_options!()","extract_repository_uri()","extract_scope()","extract_string_default!()","extract_value()","fallback_string_to_date()","fallback_string_to_time()","fallbacks()","fallbacks=()","falsetok()","fast_string_to_date()","fast_string_to_time()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch_dir()","field_set_tag()","field_type()","fields_for()","fifth()","file()","file()","file()","file()","file_field()","file_field_tag()","filename()","filename()","filter_chain()","filter_parameter_logging()","find()","find()","find()","find()","find()","find()","find_all_tag()","find_by_session_id()","find_by_session_id()","find_by_sql()","find_cmd()","find_each()","find_first_string_default()","find_hidden_method()","find_hidden_method()","find_hidden_method()","find_home()","find_in()","find_in_batches()","find_name()","find_plugin()","find_tag()","find_tzinfo()","finder?()","first()","first()","first()","fixture_file_upload()","fixture_is_cached?()","fixtures()","flash()","flatten_keys()","flatten_translations()","flush()","flush_all()","flush_cache()","flush_logger()","follow_redirect!()","for_class()","for_id()","foreign_key()","foreign_key()","form()","form_authenticity_param()","form_authenticity_token()","form_data?()","form_for()","form_remote_for()","form_remote_tag()","form_tag()","format()","format()","format()","format()","format()","format()","format()","format=()","format=()","format_and_extension()","format_currency()","format_date()","format_datetime()","format_decimal()","format_integer()","format_log_entry()","format_percent()","format_time()","formatted_offset()","formatted_offset()","formatted_offset()","formatted_offset()","formatted_polymorphic_path()","formatted_polymorphic_url()","formatter()","formatter()","fortnight()","fortnights()","forty_two()","fourth()","fragment_cache_key()","fragment_exist?()","framework_gem?()","framework_paths()","freeze()","freeze()","freeze()","freeze_with_memoizable()","fresh?()","fresh_when()","friendly_identifier()","from()","from()","from_array()","from_directory_name()","from_json()","from_json()","from_now()","from_now()","from_trusted_xml()","from_xml()","from_xml()","from_xml()","frozen?()","frozen?()","full_message()","full_messages()","full_messages()","full_options()","full_options()","full_test_name()","future?()","future?()","future?()","future?()","g_length()","g_pack()","g_unpack()","gc_countdown()","gem()","generate()","generate_code()","generate_full_message()","generate_message()","generate_message()","generate_optimisation_block()","generate_secret()","generated_methods?()","generation_code()","generation_code()","generation_code()","get()","get()","get()","get()","get()","get()","get()","get()","get?()","get_multi()","get_proxy()","get_server_for_key()","get_via_redirect()","getgm()","getlocal()","gets()","gettext()","getutc()","getutc()","gigabyte()","gigabytes()","git_url?()","gmt?()","gmt_offset()","gmtime()","gmtoff()","group!()","group_by()","grouped_collection_select()","grouped_collection_select()","grouped_options_for_select()","gsub_file()","guard_conditions()","guard_conditions()","guard_conditions()","h()","ha1()","handle_error()","handle_interpolation_token()","handle_unverified_request()","handler_for_rescue()","has_and_belongs_to_many()","has_attribute?()","has_default?()","has_key?()","has_key?()","has_many()","has_one()","hash()","hash()","hash()","hash()","hash()","hash()","hash_for()","head()","head()","head()","head()","head?()","headers()","headers()","helper()","helper()","helper_attr()","helper_class()","helper_method()","helper_method()","helpers()","hex()","hexdec4()","hidden_actions()","hidden_field()","hidden_field_tag()","hide()","hide()","hide()","hide_action()","highlight()","host()","host!()","host_with_port()","hour()","hours()","html?()","html_document()","html_escape()","html_safe()","html_safe()","html_safe?()","html_safe?()","html_safe?()","html_safe?()","http_only=()","httpdate()","https!()","https?()","human()","human_attribute_name()","human_name()","human_name()","humanize()","humanize()","id()","id()","id()","id!()","id=()","id=()","id_from_response()","identical?()","identifier()","identify()","if_modified_since()","if_none_match()","image_path()","image_submit_tag()","image_tag()","implementation()","implementation=()","in()","in()","in()","in_char_class?()","in_clause_length()","in_groups()","in_groups_of()","in_time_zone()","in_time_zone()","include()","include?()","include?()","include_with_range?()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included_in_classes()","incr()","increment()","increment()","increment()","increment()","increment!()","increment_counter()","increment_open_transactions()","index()","index()","index_by()","index_exists?()","index_name_length()","index_name_length()","indexes()","indexes_per_table()","inflections()","inflections_with_route_reloading()","info()","inheritance_column()","inheritance_column=()","inherited()","inherited_with_options()","init_path()","init_translations()","initialize_cache()","initialize_database()","initialize_database_middleware()","initialize_dependency_mechanism()","initialize_encoding()","initialize_framework_caches()","initialize_framework_logging()","initialize_framework_settings()","initialize_framework_views()","initialize_i18n()","initialize_logger()","initialize_metal()","initialize_query()","initialize_routing()","initialize_schema_migrations_table()","initialize_time_zone()","initialize_whiny_nils()","initialize_with_stdinput()","initialize_without_template_tracking()","initialized=()","initialized?()","initialized?()","input()","insert()","insert()","insert()","insert()","insert_after()","insert_before()","insert_fixture()","insert_fixtures()","insert_html()","insert_sql()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","install()","install()","install()","install_gem_spec_stubs()","install_signal_handler()","install_signal_handlers()","installed?()","installed?()","instance()","instance()","instance()","instance()","instance_exec()","instance_method_already_implemented?()","instance_variable_defined?()","instance_variable_names()","instantiate_all_loaded_fixtures()","instantiate_fixtures()","instantiate_observers()","instantiator?()","instruct!()","interpolate()","interpolate()","interpolate()","interpolate_key()","interpolate_lambda?()","interpolate_or_raise_missing()","interpolate_without_ruby_19_syntax()","interpolated_str?()","interpolates?()","interpolation_chunk()","invalid?()","invalid?()","invalid?()","invoke!()","invoke!()","irregular()","is_a?()","is_utf8?()","isdst()","iso8601()","j()","javascript_include_tag()","javascript_path()","javascript_tag()","joins_per_query()","json_escape()","keep()","key?()","key?()","keyenc()","kilobyte()","kilobytes()","kind_of?()","klass()","klass()","klass()","klass()","l()","l()","l()","label()","label_tag()","last()","last()","last()","last_modified()","last_modified=()","last_modified?()","layout()","length()","length()","length()","lex()","limited_update_conditions()","limited_update_conditions()","link_to()","link_to_function()","link_to_if()","link_to_remote()","link_to_unless()","link_to_unless_current()","links()","links()","literal()","ljust()","load()","load()","load()","load()","load!()","load!()","load!()","load!()","load!()","load_application_classes()","load_application_initializers()","load_attributes_from_response()","load_environment()","load_file()","load_gems()","load_observers()","load_once_paths()","load_once_paths=()","load_path()","load_path=()","load_paths()","load_paths()","load_paths=()","load_paths_added?()","load_plugins()","load_po()","load_rb()","load_specification()","load_translations()","load_view_paths()","load_yml()","loaded?()","loaded?()","loaded?()","loaded?()","loaded?()","local()","local_after_start?()","local_before_end?()","local_constant_names()","local_constants()","local_end()","local_offset()","local_request?()","local_start()","local_time()","local_to_utc()","local_to_utc()","locale()","locale=()","locale_files()","locale_path()","localize()","localize()","localize()","localize()","localize()","localize()","localized?()","localtime()","location()","location=()","lock!()","locking_column()","locking_enabled?()","log()","log_error()","log_info()","logger()","logger()","logger()","lookup()","lookup()","lookup()","lookup()","lookup()","lookup()","lookup()","lookup()","lookup_by_extension()","lookup_currency()","lookup_format()","lookup_format_data()","lookup_missing_generator()","lookup_store()","ls()","lstrip()","macro()","mail_to()","mailer_name()","mailer_name()","mailer_name=()","make_cache_key()","mandatory_options()","mandatory_options()","manifest()","many?()","map()","mark_dead()","mark_features!()","mark_for_destruction()","markdown()","marked_for_destruction?()","marshal()","marshal()","marshal_dump()","marshal_load()","match()","match()","match()","match()","match_attribute_method?()","match_extraction()","mattr_accessor()","mattr_reader()","mattr_writer()","maximum()","mb_chars()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure_mode()","media_type()","megabyte()","megabytes()","member?()","memoize()","memoize_all()","memoized_ivar_for()","memoized_lookup()","merge()","merge!()","merge_conditions()","metaclass()","metal_path()","method()","method_added()","method_added()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_option_to_s()","method_segment()","microseconds()","middleware()","middleware()","midnight()","midnight()","midnight()","migrate()","migration_directory()","migration_exists?()","migration_template()","migration_template()","migration_template()","migrations_path()","mime_type()","mime_type()","mime_type()","minimum()","minus_with_coercion()","minute()","minutes()","missing_key()","model_name()","monday()","monday()","month()","month()","months()","months()","months_ago()","months_ago()","months_since()","months_since()","months_without_deprecation()","ms()","mtime()","multipart?()","multiple_of?()","mute()","n_()","name()","name()","name()","named_scope()","names()","namespace()","namespace_lookup?()","native_database_types()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new?()","new_and_loaded()","new_date()","new_record?()","new_record?()","new_record?()","new_request!()","new_session()","new_time()","next_element()","next_migration_number()","next_migration_string()","next_month()","next_month()","next_selector()","next_week()","next_week()","next_year()","next_year()","ngettext()","nibble()","nil?()","nil?()","nil_key()","nonce()","none?()","noreply()","normalize()","normalize()","normalize_flat_keys()","normalize_flat_keys()","normalize_keys()","normalize_paths()","normalize_pluralization()","normalize_translation_keys()","not_modified?()","now()","now()","now()","np_()","npgettext()","ns_()","nsgettext()","nth_child()","nulltok()","number?()","number_to_currency()","number_to_human_size()","number_to_percentage()","number_to_phone()","number_with_delimiter()","number_with_precision()","numenc()","numtok()","objenc()","objparse()","observe()","observe_field()","observe_form()","observed_class()","observed_classes()","observed_subclasses()","observers()","observers=()","odd?()","old_datetime_format()","old_datetime_format=()","old_formatter()","on()","on()","on_base()","on_base()","on_cdata_block()","on_characters()","on_end_document()","on_end_element()","on_start_document()","on_start_element()","only_child()","opaque()","open_session()","open_transactions()","option_groups_from_collection_for_select()","options()","options()","options()","options()","options()","options()","options()","options()","options()","options()","options()","options()","options_for_ajax()","options_for_javascript()","options_for_select()","options_from_collection_for_select()","options_include_default?()","ord()","ord()","ordinalize()","ordinalize()","orig_delete()","original_filename()","original_xs()","output_filename()","output_filename()","output_filename()","outside_transaction?()","outside_transaction?()","overlaps?()","p_()","pairparse()","parameterize()","parameterize()","parameters()","params()","parent()","parent()","parent_name()","parents()","parents()","parse()","parse()","parse()","parse()","parse()","parse()","parse!()","parse!()","parse!()","parse!()","parse!()","parse!()","parse!()","parse!()","parse!()","parse!()","parse!()","parse!()","parse_query()","parser()","parser=()","partial_path()","partial_path()","password()","password=()","password=()","password_field()","password_field_tag()","past?()","past?()","past?()","past?()","path()","path()","path_for()","path_parameters()","path_to_image()","path_to_javascript()","path_to_stylesheet()","path_without_extension()","path_without_format_and_extension()","perform_caching?()","period()","period_for_local()","period_for_local()","period_for_utc()","period_for_utc()","periodically_call_remote()","periods_for_local()","petabyte()","petabytes()","pgettext()","plugin_loader()","plugins=()","plural()","plural_class_name()","plural_keys()","pluralize()","pluralize()","pluralize()","pluralize()","pluralize()","pluralize()","pluralize_table_names()","pluralizer()","pluralizers()","polymorphic_path()","polymorphic_url()","pop_d()","port()","port_string()","possible_controllers()","post()","post()","post()","post()","post()","post?()","post_via_redirect()","postgresql_version()","prefetch_primary_key?()","prefix()","prefix=()","prefix_source()","preload_associations()","preload_frameworks()","prepare!()","prepare_controller_class()","prepare_dispatcher()","prepend()","prepend_after_filter()","prepend_around_filter()","prepend_before_filter()","prepend_sources()","prepend_view_path()","prepend_view_path()","presence()","present?()","preserve_encoding()","prev_month()","prev_month()","prev_year()","prev_year()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key=()","primary_key_prefix_type()","prime_cache()","process()","process()","process!()","process!()","process_attributes_for()","process_each_request()","process_node()","process_node()","process_node()","process_node()","process_request()","profile()","protect_against_forgery?()","protect_against_forgery?()","protect_from_forgery()","protocol()","proxy()","proxy=()","proxy=()","proxy_class()","proxy_class=()","proxy_found()","public_path()","public_path=()","push_d()","put()","put()","put()","put()","put()","put?()","put_via_redirect()","query_parameters()","query_string()","quote()","quote()","quote_column_name()","quote_string()","quote_table_name()","quote_table_name()","quote_table_name()","quoted_columns_for_index()","quoted_columns_for_index()","quoted_date()","quoted_false()","quoted_false()","quoted_locking_column()","quoted_true()","quoted_true()","radio_button()","radio_button_tag()","raise()","raise_on_error_response!()","raise_unspecified_currency!()","raise_unspecified_format_type!()","random_bytes()","random_number()","raw()","raw_connection()","raw_host_with_port()","raw_post()","read()","read()","read()","read()","read()","read()","read()","read_fragment()","read_multi()","read_multi()","readable_inspect()","readable_inspect()","readme()","readme()","readme()","readonly!()","readonly?()","readonly?()","readonly_attributes()","realtime()","receive()","recognize_path()","reconnect!()","reconnect!()","reconnect!()","record()","record()","record()","record_entity_expansion!()","recycle!()","redirect()","redirect?()","redirect_to()","redirect_to()","redirect_to_full_url()","redirect_to_url()","reference?()","references()","references()","reflect_on_aggregation()","reflect_on_all_aggregations()","reflect_on_all_associations()","reflect_on_all_autosave_associations()","reflect_on_association()","reflections()","refresh()","refresh!()","regexp_chunk()","register()","register_alias()","register_javascript_expansion()","register_javascript_include_default()","register_stylesheet_expansion()","regular_update()","regular_writer()","relative_path()","release_connection()","release_savepoint()","release_savepoint()","release_savepoint()","reload()","reload()","reload()","reload()","reload!()","reload!()","reload!()","reload!()","reload!()","reload!()","reload!()","reload_application()","reload_handler()","reload_plugins?()","reload_with_autosave_associations()","remote_form_for()","remote_function()","remote_ip()","remove()","remove()","remove()","remove_belongs_to()","remove_column()","remove_columns()","remove_connection()","remove_connection()","remove_index()","remove_index()","remove_possible_method()","remove_references()","remove_silencers!()","remove_spec()","remove_timestamps()","remove_timestamps()","rename()","rename_column()","rename_column()","rename_index()","rename_key()","rename_table()","rename_table()","rename_table()","rename_table()","render()","render()","render()","render()","render_optional_error_file()","render_template()","render_to_string()","render_without_template_tracking()","reorder_characters()","replace()","replace()","replace_html()","replace_or_append!()","replay()","report()","report()","request_http_basic_authentication()","request_http_digest_authentication()","request_method()","request_parameters()","request_setup()","request_uri()","request_via_redirect()","requests()","requests()","require_fixture_classes()","require_frameworks()","require_library_or_gem()","requires_reloading?()","requires_reloading?()","rescue_action()","rescue_action_in_public()","rescue_action_in_public!()","rescue_action_locally()","rescue_action_without_handler()","rescue_action_without_handler()","rescue_from()","rescue_with_handler()","reserved_key()","reset()","reset!()","reset!()","reset!()","reset!()","reset!()","reset_cache()","reset_cache_if_stale!()","reset_column_information()","reset_counters()","reset_cycle()","reset_locking_column()","reset_memoizations!()","reset_sequence!()","reset_session()","reset_session()","reset_sources()","resolve()","resolve_link()","resource()","resources()","respond_to()","respond_to()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to_without_attributes?()","response_from_page_or_rjs()","responses()","restart!()","restart_handler()","restore!()","retrieve_connection()","retrieve_connection_pool()","returning()","reveal()","reveal()","reverse()","reverse_merge()","reverse_merge()","reverse_merge!()","reverse_update()","rewind()","rfc2822()","rfc822()","rindex()","rjust()","rollback_active_record_state!()","rollback_db_transaction()","rollback_db_transaction()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_to_savepoint()","root()","root()","round_with_precision()","route_resources()","route_resources()","route_resources()","routed?()","routing_file()","rstrip()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run_callbacks()","run_gc!()","run_in_transaction?()","run_prepare_callbacks()","run_profile()","run_test()","run_warmup()","s_()","sample()","sanitize()","sanitize()","sanitize()","sanitize_conditions()","sanitize_css()","sanitize_css()","sanitize_limit()","sanitize_sql()","sanitize_sql_array()","sanitize_sql_for_assignment()","sanitize_sql_for_conditions()","sanitize_sql_hash()","sanitize_sql_hash_for_assignment()","sanitize_sql_hash_for_conditions()","sanitizeable?()","sanitizeable?()","save()","save()","save()","save()","save!()","save_with_validation()","save_with_validation()","save_with_validation!()","say()","say()","say_with_time()","schema_format()","schema_search_path()","schema_search_path=()","scope?()","scoped()","scopes()","scrape()","search()","second()","second()","seconds()","seconds_since_midnight()","seconds_since_midnight()","secret_key()","secure=()","segment_tree()","select()","select()","select()","select()","select()","select()","select_all()","select_all_with_query_cache()","select_date()","select_datetime()","select_day()","select_first()","select_hour()","select_minute()","select_month()","select_one()","select_rows()","select_rows()","select_rows()","select_rows()","select_second()","select_tag()","select_time()","select_value()","select_values()","select_year()","selector()","self_and_parents()","send_data()","send_file()","send_response()","sending_file?()","sequence_name=()","serialize()","serialized_attributes()","server_port()","server_software()","servers=()","session()","session()","session()","session=()","session_enabled?()","session_id()","session_id_column()","session_options()","session_options()","session_options=()","session_store()","session_store=()","set()","set_autoload_paths()","set_comment()","set_cookie()","set_default_backend()","set_fixture_class()","set_inheritance_column()","set_load_path()","set_locking_column()","set_prefix()","set_primary_key()","set_root_path!()","set_sequence_name()","set_standard_conforming_strings()","set_table_name()","setup_controller_request_and_response()","setup_fixture_accessors()","setup_fixtures()","setup_with_controller()","sgettext()","show()","show_variable()","silence()","silence()","silence()","silence()","silence!()","silence_spec_warnings()","silence_spec_warnings=()","silence_stream()","silence_warnings()","silencer()","silencer()","simple_format()","simple_selector()","since()","since()","since()","since()","since()","since()","singleton_class()","singleton_class()","singular()","singular_class_name()","singularize()","singularize()","site()","site=()","site=()","size()","size()","size()","size()","size()","skip_after_filter()","skip_before_filter()","skip_filter()","slice()","slice()","slice()","slice!()","slice!()","socket()","sortable()","sortable_element()","source()","source_code()","source_index=()","source_path()","sources()","specification()","specification=()","split()","split()","split_args()","sql_query_length()","sqlite_version()","squish()","squish!()","ssl?()","ssl_options()","ssl_options=()","ssl_options=()","stale?()","stale?()","standard_port()","start_document()","start_element()","starts_with?()","stats()","stats()","std_offset()","step_with_blockless()","sti_name()","store()","store!()","store_default_translation()","store_default_translations()","store_link()","store_translations()","store_translations()","store_translations()","store_translations()","store_translations()","store_translations()","store_translations()","strenc()","strftime()","strftime()","string_to_binary()","string_to_date()","string_to_dummy_time()","string_to_time()","stringify_keys()","stringify_keys!()","stringify_keys!()","strip()","strip_links()","strip_tags()","strip_whitespace!()","strtok()","structure_dump()","stylesheet_link_tag()","stylesheet_path()","subdomains()","submit_tag()","submit_to_remote()","subst()","subtags()","success?()","sum()","sum()","superclass_delegating_accessor()","superclass_delegating_reader()","superclass_delegating_writer()","supports_add_column?()","supports_count_distinct?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_insert_with_returning?()","supports_migrations?()","supports_migrations?()","supports_primary_key?()","supports_savepoints?()","supports_savepoints?()","suppress()","suppress_messages()","surrogate?()","svn_url?()","swap()","symbolize_keys()","symbolize_keys!()","symbolize_keys!()","symbolized_path_parameters()","synchronize()","t()","t()","t()","t!()","table_alias_for()","table_alias_length()","table_alias_length()","table_exists?()","table_exists?()","table_name()","table_name()","table_name=()","table_name_length()","table_name_prefix()","table_name_suffix()","table_structure()","tableize()","tableize()","tables()","tag()","tag()","tag()","tag()","tag!()","tap()","target!()","target!()","teardown_fixtures()","template()","template()","template()","template()","template_format()","template_root()","template_root=()","terabyte()","terabytes()","test()","tests()","tests()","text!()","text!()","text?()","text_area()","text_area_tag()","text_field()","text_field_tag()","textilize()","textilize_without_paragraph()","textparse()","third()","threadsafe!()","tidy_bytes()","tidy_bytes()","time()","time_ago_in_words()","time_select()","time_select()","time_with_datetime_fallback()","time_zone_options_for_select()","time_zone_select()","time_zone_select()","timeout()","timeout=()","timeout=()","timestamped_migrations()","timestamps()","timestamps()","titlecase()","titleize()","titleize()","to()","to()","to_a()","to_a()","to_a()","to_date()","to_date()","to_date()","to_date()","to_datetime()","to_datetime()","to_datetime()","to_datetime()","to_datetime()","to_f()","to_f()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_i()","to_i()","to_json()","to_json()","to_json()","to_local()","to_options()","to_options!()","to_options!()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_plain_segments()","to_prepare()","to_prepare()","to_proc()","to_query()","to_query()","to_query()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_sentence()","to_sql()","to_str()","to_str()","to_sym()","to_sym()","to_sym()","to_time()","to_time()","to_time()","to_time()","to_time()","to_utc()","to_utc_offset_s()","to_xml()","to_xml()","to_xml()","to_xml()","to_xml()","to_xs()","to_yaml()","to_yaml()","to_yaml()","today()","today?()","today?()","today?()","toggle()","toggle()","toggle!()","tok()","tokenize()","tokenize()","tokenize()","tomorrow()","tomorrow()","tomorrow()","touch()","transaction()","transaction()","transaction()","transaction_joinable=()","translate()","translate()","translate()","translate()","translate()","translate()","translate()","translate()","translate()","translate!()","translation_metadata()","translation_metadata=()","translations()","transliterate()","transliterate()","transliterate()","transliterate()","transliterate()","truetok()","truncate()","try()","try()","try_to_load_dependency()","tv_sec()","type_cast()","type_cast_code()","type_to_sql()","type_to_sql()","u_unpack()","ucharcopy()","ucharenc()","uncached()","uncached()","uncountable()","undef_my_compiled_methods!()","underscore()","underscore()","unescape()","unescape_bytea()","unescape_rjs()","uninstall()","unmarshal()","unmarshal()","unmemoize_all()","unnormalized()","unpack()","unpacked_path()","unquote()","until()","until()","unverifiable_types()","upcase()","update()","update()","update()","update()","update()","update_all()","update_attribute()","update_attributes()","update_attributes!()","update_counters()","update_counters_with_lock()","update_page()","update_page_tag()","update_sql()","update_sql()","updated()","url()","url_for()","url_for()","url_for()","url_for()","us_zone_identifiers()","us_zones()","us_zones()","usage()","usage_message()","usage_message()","usage_message()","use()","use_application_sources!()","use_checkout?()","use_component_sources!()","use_controllers!()","use_externals?()","use_svn?()","use_zone()","usec()","user()","user=()","user=()","user_home()","user_name_and_password()","uses_transaction()","uses_transaction?()","utc()","utc()","utc?()","utc?()","utc_after_start?()","utc_before_end?()","utc_end()","utc_offset()","utc_offset()","utc_offset()","utc_offset()","utc_start()","utc_time()","utc_to_local()","utc_to_local()","utc_total_offset()","utc_total_offset_rational()","valenc()","valid?()","valid?()","valid?()","valid_alter_table_options()","valid_for_local?()","valid_for_utc?()","validate()","validate_digest_response()","validate_nonce()","validate_on_create()","validate_on_update()","validates_acceptance_of()","validates_associated()","validates_confirmation_of()","validates_each()","validates_exclusion_of()","validates_format_of()","validates_inclusion_of()","validates_length_of()","validates_numericality_of()","validates_presence_of()","validates_size_of()","validates_uniqueness_of()","valparse()","value()","value()","value=()","value_to_boolean()","value_to_decimal()","values_at()","vendor_gem?()","vendor_rails?()","verifiable_request_format?()","verification_timeout()","verification_timeout=()","verified_request?()","verify()","verify()","verify!()","verify_authenticity_token()","verify_request?()","version()","version_for_dir()","view_path()","view_paths()","view_paths()","view_paths=()","view_paths=()","visual_effect()","visual_effect()","wants?()","week()","weeks()","with_backend()","with_backend()","with_connection()","with_controllers()","with_exclusive_scope()","with_gc_stats()","with_local_cache()","with_locale()","with_metadata()","with_options()","with_output_file()","with_routing()","with_scope()","with_server()","with_signal_handler()","with_socket_management()","with_transaction_returning_status()","word_wrap()","wrap()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write_fragment()","write_specification()","xchr()","xhr()","xhr()","xhr?()","xml()","xml_column_fallback()","xml_http_request()","xml_http_request()","xml_http_request?()","xmlschema()","xmlschema()","xmlschema()","year()","year()","years()","years()","years_ago()","years_ago()","years_since()","years_since()","years_without_deprecation()","yesterday()","yesterday()","yesterday()","zone()","zone()","zone=()","zone_identifier()","zones_map()","|()","readme","changelog","readme","changelog","readme","changelog","readme","changelog","readme","changelog","readme","changelog","mit-license","readme"],"longSearchIndex":["actioncontroller","actioncontroller::assertions","actioncontroller::assertions::domassertions","actioncontroller::assertions::modelassertions","actioncontroller::assertions::responseassertions","actioncontroller::assertions::routingassertions","actioncontroller::assertions::selectorassertions","actioncontroller::assertions::tagassertions","actioncontroller::base","actioncontroller::benchmarking","actioncontroller::benchmarking::classmethods","actioncontroller::cgihandler","actioncontroller::cgihandler::properstream","actioncontroller::caching","actioncontroller::caching::actions","actioncontroller::caching::actions::actioncachepath","actioncontroller::caching::actions::classmethods","actioncontroller::caching::fragments","actioncontroller::caching::pages","actioncontroller::caching::pages::classmethods","actioncontroller::caching::sweeping","actioncontroller::cgiext","actioncontroller::cgiext::stdinput","actioncontroller::cookies","actioncontroller::dispatcher","actioncontroller::failsafe","actioncontroller::filters","actioncontroller::filters::classmethods","actioncontroller::flash","actioncontroller::flash::flashhash","actioncontroller::helpers","actioncontroller::helpers::classmethods","actioncontroller::http","actioncontroller::http::headers","actioncontroller::httpauthentication","actioncontroller::httpauthentication::basic","actioncontroller::httpauthentication::basic::controllermethods","actioncontroller::httpauthentication::digest","actioncontroller::httpauthentication::digest::controllermethods","actioncontroller::integration","actioncontroller::integration::runner","actioncontroller::integration::session","actioncontroller::integration::session::multipartneededexception","actioncontroller::integrationtest","actioncontroller::layout","actioncontroller::layout::classmethods","actioncontroller::middlewarestack","actioncontroller::middlewarestack::middleware","actioncontroller::mimeresponds","actioncontroller::mimeresponds::instancemethods","actioncontroller::paramsparser","actioncontroller::performancetest","actioncontroller::polymorphicroutes","actioncontroller::recordidentifier","actioncontroller::reloader","actioncontroller::reloader::bodywrapper","actioncontroller::request","actioncontroller::requestforgeryprotection","actioncontroller::requestforgeryprotection::classmethods","actioncontroller::rescue","actioncontroller::rescue::classmethods","actioncontroller::resources","actioncontroller::response","actioncontroller::routing","actioncontroller::routing::helpers","actioncontroller::routing::optimisation","actioncontroller::routing::optimisation::optimiser","actioncontroller::routing::optimisation::positionalarguments","actioncontroller::routing::optimisation::positionalargumentswithadditionalparams","actioncontroller::routing::optionalformatsegment","actioncontroller::routing::routeset","actioncontroller::routing::routeset::mapper","actioncontroller::session","actioncontroller::session::abstractstore","actioncontroller::session::abstractstore::optionshash","actioncontroller::session::abstractstore::sessionhash","actioncontroller::session::abstractstore::sessionutils","actioncontroller::session::cookiestore","actioncontroller::session::cookiestore::cookieoverflow","actioncontroller::session::memcachestore","actioncontroller::sessionmanagement","actioncontroller::sessionmanagement::classmethods","actioncontroller::streaming","actioncontroller::stringcoercion","actioncontroller::stringcoercion::uglybody","actioncontroller::testcase","actioncontroller::testcase::assertions","actioncontroller::testcase::raiseactionexceptions","actioncontroller::testprocess","actioncontroller::testresponse","actioncontroller::testuploadedfile","actioncontroller::translation","actioncontroller::uploadedfile","actioncontroller::uploadedstringio","actioncontroller::uploadedtempfile","actioncontroller::urlwriter","actioncontroller::verification","actioncontroller::verification::classmethods","actionmailer","actionmailer::base","actionview","actionview::base","actionview::base::proxymodule","actionview::helpers","actionview::helpers::activerecordhelper","actionview::helpers::assettaghelper","actionview::helpers::atomfeedhelper","actionview::helpers::atomfeedhelper::atombuilder","actionview::helpers::atomfeedhelper::atomfeedbuilder","actionview::helpers::benchmarkhelper","actionview::helpers::cachehelper","actionview::helpers::capturehelper","actionview::helpers::classmethods","actionview::helpers::csrfhelper","actionview::helpers::datehelper","actionview::helpers::debughelper","actionview::helpers::formbuilder","actionview::helpers::formhelper","actionview::helpers::formoptionshelper","actionview::helpers::formtaghelper","actionview::helpers::javascripthelper","actionview::helpers::numberhelper","actionview::helpers::prototypehelper","actionview::helpers::prototypehelper::javascriptgenerator","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods","actionview::helpers::rawoutputhelper","actionview::helpers::recordidentificationhelper","actionview::helpers::recordtaghelper","actionview::helpers::sanitizehelper","actionview::helpers::scriptaculoushelper","actionview::helpers::taghelper","actionview::helpers::texthelper","actionview::helpers::translationhelper","actionview::helpers::urlhelper","actionview::partials","actionview::reloadabletemplate","actionview::reloadabletemplate::reloadablepath","actionview::reloadabletemplate::templatedeleted","actionview::reloadabletemplate::unfreezable","actionview::renderable","actionview::template","actionview::template::eagerpath","actionview::template::path","actionview::templatehandler","actionview::templatehandlers","actionview::templatehandlers::builder","actionview::templatehandlers::compilable","actionview::templatehandlers::compilable::classmethods","actionview::templatehandlers::erb","actionview::templatehandlers::rjs","actionview::testcase","actionview::testcase::testcontroller","activerecord","activerecord::activerecorderror","activerecord::adapternotfound","activerecord::adapternotspecified","activerecord::aggregations","activerecord::aggregations::classmethods","activerecord::associationpreload","activerecord::associationpreload::classmethods","activerecord::associationtypemismatch","activerecord::associations","activerecord::associations::classmethods","activerecord::associations::classmethods::innerjoindependency","activerecord::associations::classmethods::innerjoindependency::innerjoinassociation","activerecord::associations::hasonethroughassociation","activerecord::attributeassignmenterror","activerecord::attributemethods","activerecord::attributemethods::classmethods","activerecord::autosaveassociation","activerecord::autosaveassociation::classmethods","activerecord::base","activerecord::batches","activerecord::batches::classmethods","activerecord::calculations","activerecord::calculations::classmethods","activerecord::callbacks","activerecord::configurationerror","activerecord::connectionadapters","activerecord::connectionadapters::abstractadapter","activerecord::connectionadapters::column","activerecord::connectionadapters::column::format","activerecord::connectionadapters::connectionhandler","activerecord::connectionadapters::connectionmanagement","activerecord::connectionadapters::connectionpool","activerecord::connectionadapters::databaselimits","activerecord::connectionadapters::databasestatements","activerecord::connectionadapters::mysqladapter","activerecord::connectionadapters::postgresqladapter","activerecord::connectionadapters::querycache","activerecord::connectionadapters::quoting","activerecord::connectionadapters::sqliteadapter","activerecord::connectionadapters::sqliteadapter::version","activerecord::connectionadapters::schemastatements","activerecord::connectionadapters::table","activerecord::connectionadapters::tabledefinition","activerecord::connectionnotestablished","activerecord::connectiontimeouterror","activerecord::dangerousattributeerror","activerecord::dirty","activerecord::dirty::classmethods","activerecord::dynamicfindermatch","activerecord::dynamicscopematch","activerecord::error","activerecord::errors","activerecord::locking","activerecord::locking::optimistic","activerecord::locking::optimistic::classmethods","activerecord::locking::pessimistic","activerecord::migration","activerecord::migrationproxy","activerecord::missingattributeerror","activerecord::multiparameterassignmenterrors","activerecord::namedscope","activerecord::namedscope::classmethods","activerecord::namedscope::scope","activerecord::nestedattributes","activerecord::nestedattributes::classmethods","activerecord::nestedattributes::toomanyrecords","activerecord::observer","activerecord::observing","activerecord::observing::classmethods","activerecord::preparedstatementinvalid","activerecord::querycache","activerecord::querycache::classmethods","activerecord::readonlyrecord","activerecord::recordinvalid","activerecord::recordnotfound","activerecord::recordnotsaved","activerecord::reflection","activerecord::reflection::classmethods","activerecord::reflection::macroreflection","activerecord::rollback","activerecord::schema","activerecord::serialization","activerecord::serializationtypemismatch","activerecord::sessionstore","activerecord::sessionstore::session","activerecord::sessionstore::sqlbypass","activerecord::staleobjecterror","activerecord::statementinvalid","activerecord::testfixtures","activerecord::testfixtures::classmethods","activerecord::timestamp","activerecord::transactions","activerecord::transactions::classmethods","activerecord::unknownattributeerror","activerecord::validations","activerecord::validations::classmethods","activeresource","activeresource::badrequest","activeresource::base","activeresource::clienterror","activeresource::connection","activeresource::custommethods","activeresource::custommethods::classmethods","activeresource::custommethods::instancemethods","activeresource::errors","activeresource::forbiddenaccess","activeresource::formats","activeresource::formats::jsonformat","activeresource::formats::xmlformat","activeresource::httpmock","activeresource::invalidrequesterror","activeresource::request","activeresource::resourceconflict","activeresource::resourcegone","activeresource::resourcenotfound","activeresource::response","activeresource::sslerror","activeresource::servererror","activeresource::timeouterror","activeresource::unauthorizedaccess","activeresource::validations","activesupport","activesupport::backtracecleaner","activesupport::base64","activesupport::basicobject","activesupport::bufferedlogger","activesupport::bufferedlogger::severity","activesupport::cache","activesupport::cache::compressedmemcachestore","activesupport::cache::filestore","activesupport::cache::memcachestore","activesupport::cache::memorystore","activesupport::cache::store","activesupport::cache::strategy","activesupport::cache::strategy::localcache","activesupport::cache::synchronizedmemorystore","activesupport::callbacks","activesupport::callbacks::callback","activesupport::callbacks::callbackchain","activesupport::callbacks::classmethods","activesupport::coreextensions","activesupport::coreextensions::array","activesupport::coreextensions::array::access","activesupport::coreextensions::array::conversions","activesupport::coreextensions::array::extractoptions","activesupport::coreextensions::array::grouping","activesupport::coreextensions::array::randomaccess","activesupport::coreextensions::array::wrapper","activesupport::coreextensions::base64","activesupport::coreextensions::base64::encoding","activesupport::coreextensions::bigdecimal","activesupport::coreextensions::bigdecimal::conversions","activesupport::coreextensions::date","activesupport::coreextensions::date::behavior","activesupport::coreextensions::date::calculations","activesupport::coreextensions::date::calculations::classmethods","activesupport::coreextensions::date::conversions","activesupport::coreextensions::datetime","activesupport::coreextensions::datetime::calculations","activesupport::coreextensions::datetime::calculations::classmethods","activesupport::coreextensions::datetime::conversions","activesupport::coreextensions::file","activesupport::coreextensions::file::atomic","activesupport::coreextensions::float","activesupport::coreextensions::float::rounding","activesupport::coreextensions::float::time","activesupport::coreextensions::hash","activesupport::coreextensions::hash::conversions","activesupport::coreextensions::hash::conversions::classmethods","activesupport::coreextensions::hash::deepmerge","activesupport::coreextensions::hash::diff","activesupport::coreextensions::hash::except","activesupport::coreextensions::hash::keys","activesupport::coreextensions::hash::reversemerge","activesupport::coreextensions::hash::slice","activesupport::coreextensions::integer","activesupport::coreextensions::integer::evenodd","activesupport::coreextensions::integer::inflections","activesupport::coreextensions::integer::time","activesupport::coreextensions::module","activesupport::coreextensions::numeric","activesupport::coreextensions::numeric::bytes","activesupport::coreextensions::numeric::conversions","activesupport::coreextensions::numeric::time","activesupport::coreextensions::pathname","activesupport::coreextensions::pathname::cleanwithin","activesupport::coreextensions::range","activesupport::coreextensions::range::blocklessstep","activesupport::coreextensions::range::conversions","activesupport::coreextensions::range::includerange","activesupport::coreextensions::range::overlaps","activesupport::coreextensions::string","activesupport::coreextensions::string::access","activesupport::coreextensions::string::behavior","activesupport::coreextensions::string::conversions","activesupport::coreextensions::string::filters","activesupport::coreextensions::string::inflections","activesupport::coreextensions::string::iterators","activesupport::coreextensions::string::multibyte","activesupport::coreextensions::string::startsendswith","activesupport::coreextensions::time","activesupport::coreextensions::time::behavior","activesupport::coreextensions::time::calculations","activesupport::coreextensions::time::calculations::classmethods","activesupport::coreextensions::time::conversions","activesupport::coreextensions::time::zones","activesupport::coreextensions::time::zones::classmethods","activesupport::deprecation","activesupport::deprecation::deprecatedobjectproxy","activesupport::duration","activesupport::gzip","activesupport::gzip::stream","activesupport::inflector","activesupport::inflector::inflections","activesupport::json","activesupport::json::backends","activesupport::json::backends::jsongem","activesupport::json::backends::okjson","activesupport::json::backends::okjson::parseerror","activesupport::json::backends::yajl","activesupport::json::backends::yaml","activesupport::json::encoding","activesupport::json::encoding::circularreferenceerror","activesupport::json::variable","activesupport::memoizable","activesupport::memoizable::instancemethods","activesupport::messageencryptor","activesupport::messageencryptor::invalidmessage","activesupport::messageverifier","activesupport::messageverifier::invalidsignature","activesupport::modelname","activesupport::multibyte","activesupport::multibyte::chars","activesupport::multibyte::codepoint","activesupport::multibyte::encodingerror","activesupport::multibyte::unicodedatabase","activesupport::okjson","activesupport::okjson::error","activesupport::okjson::utf8error","activesupport::rescuable","activesupport::rescuable::classmethods","activesupport::safebuffer","activesupport::securerandom","activesupport::stringinquirer","activesupport::testcase","activesupport::testing","activesupport::testing::assertions","activesupport::testing::declarative","activesupport::testing::performance","activesupport::testing::performance::benchmarker","activesupport::testing::performance::metrics","activesupport::testing::performance::metrics::base","activesupport::testing::performance::metrics::cputime","activesupport::testing::performance::metrics::gcruns","activesupport::testing::performance::metrics::gctime","activesupport::testing::performance::metrics::memory","activesupport::testing::performance::metrics::objects","activesupport::testing::performance::metrics::processtime","activesupport::testing::performance::metrics::time","activesupport::testing::performance::metrics::walltime","activesupport::testing::performance::performer","activesupport::testing::performance::profiler","activesupport::testing::setupandteardown","activesupport::testing::setupandteardown::forclassictestunit","activesupport::testing::setupandteardown::forminitest","activesupport::timewithzone","activesupport::timezone","activesupport::xmlmini","activesupport::xmlmini_libxmlsax","activesupport::xmlmini_libxmlsax::hashbuilder","activesupport::xmlmini_nokogiri","activesupport::xmlmini_nokogiri::conversions","activesupport::xmlmini_nokogiri::conversions::document","activesupport::xmlmini_nokogiri::conversions::node","activesupport::xmlmini_nokogirisax","activesupport::xmlmini_nokogirisax::hashbuilder","benchmark","blankslate","builder","builder::blankslate","builder::css","builder::illegalblockerror","builder::xmlbase","builder::xmlevents","builder::xmlmarkup","cgi","cgi::cookie","cgi::queryextension","class","commands","commands::discover","commands::info","commands::install","commands::list","commands::plugin","commands::remove","commands::source","commands::sources","commands::unsource","commands::update","continuum","continuum::entry","date","datetime","dir","dispatchservlet","erb","erb::util","enumerable","falseclass","fixnum","fixtures","gem","gettext","gettext::poparser","html","html::fullsanitizer","html::linksanitizer","html::sanitizer","html::selector","html::tag","html::whitelistsanitizer","hash","hashwithindifferentaccess","i18n","i18n::argumenterror","i18n::backend","i18n::backend::activerecord","i18n::backend::activerecord::implementation","i18n::backend::activerecord::missing","i18n::backend::activerecord::storeprocs","i18n::backend::activerecord::translation","i18n::backend::base","i18n::backend::cache","i18n::backend::cascade","i18n::backend::chain","i18n::backend::cldr","i18n::backend::fallbacks","i18n::backend::flatten","i18n::backend::gettext","i18n::backend::gettext::podata","i18n::backend::interpolationcompiler","i18n::backend::interpolationcompiler::compiler","i18n::backend::keyvalue","i18n::backend::keyvalue::implementation","i18n::backend::memoize","i18n::backend::metadata","i18n::backend::pluralization","i18n::backend::simple","i18n::backend::simple::implementation","i18n::backend::transliterator","i18n::backend::transliterator::hashtransliterator","i18n::backend::transliterator::proctransliterator","i18n::config","i18n::gettext","i18n::gettext::helpers","i18n::invalidlocale","i18n::invalidpluralizationdata","i18n::locale","i18n::locale::fallbacks","i18n::locale::tag","i18n::locale::tag::parents","i18n::locale::tag::rfc4646","i18n::locale::tag::rfc4646::parser","i18n::locale::tag::simple","i18n::missinginterpolationargument","i18n::missingtranslationdata","i18n::reservedinterpolationkey","i18n::unknownfiletype","kernel","keyerror","libxml","libxml::conversions","libxml::conversions::document","libxml::conversions::node","logger","logger::formatter","logger::simpleformatter","memcache","memcache::memcacheerror","memcache::server","mime","mime::type","module","nilclass","object","pgresult","plugin","process","rexml","rexml::document","rexml::entity","racklintpatch","racklintpatch::allowstringsubclass","rails","rails::backtracecleaner","rails::configuration","rails::gembuilder","rails::gemdependency","rails::gemplugin","rails::generator","rails::generator::abstractgemsource","rails::generator::base","rails::generator::commands","rails::generator::commands::base","rails::generator::commands::create","rails::generator::commands::destroy","rails::generator::commands::list","rails::generator::commands::rewindbase","rails::generator::commands::update","rails::generator::gemgeneratorsource","rails::generator::gempathsource","rails::generator::generatedattribute","rails::generator::generatorerror","rails::generator::lookup","rails::generator::lookup::classmethods","rails::generator::manifest","rails::generator::namedbase","rails::generator::options","rails::generator::options::classmethods","rails::generator::pathsource","rails::generator::scripts","rails::generator::scripts::base","rails::generator::source","rails::generator::spec","rails::generator::usageerror","rails::initializer","rails::plugin","rails::rack","rails::secretkeygenerator","rails::vendorgemsourceindex","railsenvironment","railsfcgihandler","recursivehttpfetcher","repositories","repository","sourceannotationextractor","sourceannotationextractor::annotation","string","symbol","tzinfo","tzinfo::ambiguoustime","tzinfo::definitions","tzinfo::definitions::africa","tzinfo::definitions::africa::algiers","tzinfo::definitions::africa::cairo","tzinfo::definitions::africa::casablanca","tzinfo::definitions::africa::harare","tzinfo::definitions::africa::johannesburg","tzinfo::definitions::africa::monrovia","tzinfo::definitions::africa::nairobi","tzinfo::definitions::america","tzinfo::definitions::america::argentina","tzinfo::definitions::america::argentina::buenos_aires","tzinfo::definitions::america::argentina::san_juan","tzinfo::definitions::america::bogota","tzinfo::definitions::america::caracas","tzinfo::definitions::america::chicago","tzinfo::definitions::america::chihuahua","tzinfo::definitions::america::denver","tzinfo::definitions::america::godthab","tzinfo::definitions::america::guatemala","tzinfo::definitions::america::halifax","tzinfo::definitions::america::indiana","tzinfo::definitions::america::indiana::indianapolis","tzinfo::definitions::america::juneau","tzinfo::definitions::america::la_paz","tzinfo::definitions::america::lima","tzinfo::definitions::america::los_angeles","tzinfo::definitions::america::mazatlan","tzinfo::definitions::america::mexico_city","tzinfo::definitions::america::monterrey","tzinfo::definitions::america::new_york","tzinfo::definitions::america::phoenix","tzinfo::definitions::america::regina","tzinfo::definitions::america::santiago","tzinfo::definitions::america::sao_paulo","tzinfo::definitions::america::st_johns","tzinfo::definitions::america::tijuana","tzinfo::definitions::asia","tzinfo::definitions::asia::almaty","tzinfo::definitions::asia::baghdad","tzinfo::definitions::asia::baku","tzinfo::definitions::asia::bangkok","tzinfo::definitions::asia::chongqing","tzinfo::definitions::asia::colombo","tzinfo::definitions::asia::dhaka","tzinfo::definitions::asia::hong_kong","tzinfo::definitions::asia::irkutsk","tzinfo::definitions::asia::jakarta","tzinfo::definitions::asia::jerusalem","tzinfo::definitions::asia::kabul","tzinfo::definitions::asia::kamchatka","tzinfo::definitions::asia::karachi","tzinfo::definitions::asia::katmandu","tzinfo::definitions::asia::kolkata","tzinfo::definitions::asia::krasnoyarsk","tzinfo::definitions::asia::kuala_lumpur","tzinfo::definitions::asia::kuwait","tzinfo::definitions::asia::magadan","tzinfo::definitions::asia::muscat","tzinfo::definitions::asia::novosibirsk","tzinfo::definitions::asia::rangoon","tzinfo::definitions::asia::riyadh","tzinfo::definitions::asia::seoul","tzinfo::definitions::asia::shanghai","tzinfo::definitions::asia::singapore","tzinfo::definitions::asia::taipei","tzinfo::definitions::asia::tashkent","tzinfo::definitions::asia::tbilisi","tzinfo::definitions::asia::tehran","tzinfo::definitions::asia::tokyo","tzinfo::definitions::asia::ulaanbaatar","tzinfo::definitions::asia::urumqi","tzinfo::definitions::asia::vladivostok","tzinfo::definitions::asia::yakutsk","tzinfo::definitions::asia::yekaterinburg","tzinfo::definitions::asia::yerevan","tzinfo::definitions::atlantic","tzinfo::definitions::atlantic::azores","tzinfo::definitions::atlantic::cape_verde","tzinfo::definitions::atlantic::south_georgia","tzinfo::definitions::australia","tzinfo::definitions::australia::adelaide","tzinfo::definitions::australia::brisbane","tzinfo::definitions::australia::darwin","tzinfo::definitions::australia::hobart","tzinfo::definitions::australia::melbourne","tzinfo::definitions::australia::perth","tzinfo::definitions::australia::sydney","tzinfo::definitions::etc","tzinfo::definitions::etc::utc","tzinfo::definitions::europe","tzinfo::definitions::europe::amsterdam","tzinfo::definitions::europe::athens","tzinfo::definitions::europe::belgrade","tzinfo::definitions::europe::berlin","tzinfo::definitions::europe::bratislava","tzinfo::definitions::europe::brussels","tzinfo::definitions::europe::bucharest","tzinfo::definitions::europe::budapest","tzinfo::definitions::europe::copenhagen","tzinfo::definitions::europe::dublin","tzinfo::definitions::europe::helsinki","tzinfo::definitions::europe::istanbul","tzinfo::definitions::europe::kiev","tzinfo::definitions::europe::lisbon","tzinfo::definitions::europe::ljubljana","tzinfo::definitions::europe::london","tzinfo::definitions::europe::madrid","tzinfo::definitions::europe::minsk","tzinfo::definitions::europe::moscow","tzinfo::definitions::europe::paris","tzinfo::definitions::europe::prague","tzinfo::definitions::europe::riga","tzinfo::definitions::europe::rome","tzinfo::definitions::europe::sarajevo","tzinfo::definitions::europe::skopje","tzinfo::definitions::europe::sofia","tzinfo::definitions::europe::stockholm","tzinfo::definitions::europe::tallinn","tzinfo::definitions::europe::vienna","tzinfo::definitions::europe::vilnius","tzinfo::definitions::europe::warsaw","tzinfo::definitions::europe::zagreb","tzinfo::definitions::pacific","tzinfo::definitions::pacific::auckland","tzinfo::definitions::pacific::fiji","tzinfo::definitions::pacific::guam","tzinfo::definitions::pacific::honolulu","tzinfo::definitions::pacific::majuro","tzinfo::definitions::pacific::midway","tzinfo::definitions::pacific::noumea","tzinfo::definitions::pacific::pago_pago","tzinfo::definitions::pacific::port_moresby","tzinfo::definitions::pacific::tongatapu","tzinfo::invalidtimezoneidentifier","tzinfo::nooffsetsdefined","tzinfo::periodnotfound","tzinfo::timezone","tzinfo::timezoneperiod","tzinfo::unknowntimezone","test","test::unit","time","trueclass","string#%()","activesupport::duration#+()","activesupport::multibyte::chars#+()","activesupport::safebuffer#+()","activesupport::timewithzone#+()","builder::css#+()","activesupport::duration#-()","activesupport::timewithzone#-()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#<<()","builder::xmlbase#<<()","activerecord::connectionadapters::sqliteadapter::version#<=>()","activesupport::multibyte::chars#<=>()","activesupport::timewithzone#<=>()","activesupport::timezone#<=>()","rails::plugin#<=>()","tzinfo::timezone#<=>()","actioncontroller::middlewarestack::middleware#==()","actionview::template::path#==()","activerecord::base#==()","activerecord::reflection::macroreflection#==()","activeresource::base#==()","activeresource::request#==()","activeresource::response#==()","activesupport::callbacks::callback#==()","activesupport::duration#==()","mime::type#==()","rails::gemdependency#==()","tzinfo::timezoneperiod#==()","activerecord::base::===()","activesupport::coreextensions::time::calculations::classmethods#===()","activesupport::multibyte::unicodedatabase#===()","mime::type#===()","activesupport::multibyte::chars#=~()","activesupport::timezone#=~()","mime::type#=~()","builder::css#>()","builder::css#>>()","actioncontroller::request#get()","actioncontroller::request#post()","actioncontroller::http::headers#[]()","actioncontroller::session::abstractstore::optionshash#[]()","actioncontroller::session::abstractstore::sessionhash#[]()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#[]()","actionview::reloadabletemplate::reloadablepath#[]()","actionview::template::eagerpath#[]()","actionview::template::path#[]()","activerecord::base#[]()","activerecord::connectionadapters::tabledefinition#[]()","activerecord::errors#[]()","activeresource::errors#[]()","activeresource::formats::[]()","activeresource::response#[]()","activesupport::multibyte::chars#[]()","activesupport::testing::performance::metrics::[]()","activesupport::timezone::[]()","i18n::locale::fallbacks#[]()","memcache#[]()","actioncontroller::session::abstractstore::sessionhash#[]=()","activerecord::base#[]=()","activeresource::response#[]=()","activesupport::multibyte::chars#[]=()","hashwithindifferentaccess#[]=()","memcache#[]=()","gettext::poparser#_()","i18n::gettext::helpers#_()","actioncontroller::dispatcher#_call()","tzinfo::timezone#_dump()","time#_dump()","builder::xmlevents#_end_tag()","tzinfo::timezone::_load()","time::_load()","time::_original_load()","gettext::poparser#_reduce_none()","builder::xmlevents#_start_tag()","activesupport::okjson#abbrev()","tzinfo::timezoneperiod#abbreviation()","rails::plugin#about()","activerecord::base::abstract_class?()","actioncontroller::request#accepts()","activerecord::nestedattributes::classmethods#accepts_nested_attributes_for()","actionview::template#accessible_paths()","actioncontroller::middlewarestack#active()","actioncontroller::middlewarestack::middleware#active?()","activerecord::connectionadapters::abstractadapter#active?()","activerecord::connectionadapters::mysqladapter#active?()","activerecord::connectionadapters::postgresqladapter#active?()","memcache#active?()","object#acts_like?()","activesupport::coreextensions::date::behavior#acts_like_date?()","activesupport::coreextensions::string::behavior#acts_like_string?()","activesupport::multibyte::chars#acts_like_string?()","activesupport::coreextensions::time::behavior#acts_like_time?()","activesupport::timewithzone#acts_like_time?()","activerecord::connectionadapters::abstractadapter#adapter_name()","activerecord::connectionadapters::postgresqladapter#adapter_name()","activerecord::errors#add()","activeresource::errors#add()","activesupport::bufferedlogger#add()","memcache#add()","repositories#add()","activerecord::connectionadapters::mysqladapter#add_column()","activerecord::connectionadapters::postgresqladapter#add_column()","activerecord::connectionadapters::schemastatements#add_column()","activerecord::connectionadapters::mysqladapter#add_column_position!()","activesupport::backtracecleaner#add_filter()","rails::gemdependency::add_frozen_gem_path()","rails::initializer#add_gem_load_paths()","rails::generator::options#add_general_options!()","activerecord::connectionadapters::schemastatements#add_index()","activerecord::connectionadapters::databasestatements#add_limit!()","activerecord::connectionadapters::databasestatements#add_limit_offset!()","rails::gemdependency#add_load_paths()","activerecord::connectionadapters::databasestatements#add_lock!()","activerecord::observer#add_observer!()","activerecord::errors#add_on_blank()","activerecord::errors#add_on_empty()","rails::generator::options#add_options!()","activerecord::connectionadapters::schemastatements#add_order_by_for_association_limiting!()","rails::initializer#add_plugin_load_paths()","activesupport::backtracecleaner#add_silencer()","rails::vendorgemsourceindex#add_spec()","rails::initializer#add_support_load_paths()","activerecord::connectionadapters::schemastatements#add_timestamps()","activerecord::errors#add_to_base()","activeresource::errors#add_to_base()","activesupport::coreextensions::date::calculations#advance()","activesupport::coreextensions::datetime::calculations#advance()","activesupport::coreextensions::time::calculations#advance()","activesupport::timewithzone#advance()","activerecord::callbacks#after_create()","activerecord::callbacks#after_destroy()","actioncontroller::filters::classmethods#after_filter()","rails::generator::base#after_generate()","rails::configuration#after_initialize()","rails::initializer#after_initialize()","rails::configuration#after_initialize_blocks()","activerecord::callbacks#after_save()","activerecord::callbacks#after_update()","activerecord::callbacks#after_validation()","activerecord::callbacks#after_validation_on_create()","activerecord::callbacks#after_validation_on_update()","activerecord::base::aggregate_mapping()","activesupport::coreextensions::date::calculations#ago()","activesupport::coreextensions::datetime::calculations#ago()","activesupport::coreextensions::numeric::time#ago()","activesupport::coreextensions::time::calculations#ago()","activesupport::duration#ago()","activesupport::timewithzone#ago()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#alert()","activesupport::coreextensions::module#alias_attribute()","activerecord::dirty::classmethods#alias_attribute_with_dirty()","activesupport::coreextensions::module#alias_method_chain()","memcache::server#alive?()","activerecord::base::all()","activesupport::timezone::all()","repositories#all()","tzinfo::timezone::all()","tzinfo::timezone::all_country_zone_identifiers()","tzinfo::timezone::all_country_zones()","tzinfo::timezone::all_data_zone_identifiers()","tzinfo::timezone::all_data_zones()","tzinfo::timezone::all_identifiers()","tzinfo::timezone::all_linked_zone_identifiers()","tzinfo::timezone::all_linked_zones()","activerecord::base::allow_concurrency()","activerecord::base::allow_concurrency=()","activerecord::migration::announce()","activerecord::namedscope::scope#any?()","object#app()","memcache#append()","actioncontroller::filters::classmethods#append_after_filter()","actioncontroller::filters::classmethods#append_around_filter()","actioncontroller::filters::classmethods#append_before_filter()","activesupport::coreextensions::string::iterators::append_features()","activesupport::coreextensions::string::startsendswith::append_features()","module#append_features()","rails::generator::lookup::classmethods#append_sources()","actioncontroller::base#append_view_path()","actioncontroller::base::append_view_path()","actioncontroller::routing::optimisation::optimiser#applicable?()","actioncontroller::routing::optimisation::positionalargumentswithadditionalparams#applicable?()","actioncontroller::filters::classmethods#around_filter()","actionview::helpers::javascripthelper#array_or_string_for_javascript()","activesupport::okjson#arrenc()","activesupport::okjson#arrparse()","activeresource::base#as_json()","activesupport::timewithzone#as_json()","date#as_json()","datetime#as_json()","object#as_json()","time#as_json()","module#as_load_path()","string#as_str()","activesupport::testing::assertions#assert_blank()","activesupport::testing::assertions#assert_difference()","actioncontroller::assertions::domassertions#assert_dom_equal()","actioncontroller::assertions::domassertions#assert_dom_not_equal()","actioncontroller::assertions::routingassertions#assert_generates()","activesupport::testing::assertions#assert_no_difference()","actioncontroller::assertions::tagassertions#assert_no_tag()","activesupport::testing::assertions#assert_present()","actioncontroller::assertions::routingassertions#assert_recognizes()","actioncontroller::assertions::responseassertions#assert_redirected_to()","actioncontroller::assertions::responseassertions#assert_response()","actioncontroller::assertions::routingassertions#assert_routing()","actioncontroller::assertions::selectorassertions#assert_select()","actioncontroller::assertions::selectorassertions#assert_select_email()","actioncontroller::assertions::selectorassertions#assert_select_encoded()","actioncontroller::assertions::selectorassertions#assert_select_rjs()","actioncontroller::assertions::tagassertions#assert_tag()","actioncontroller::assertions::responseassertions#assert_template()","actioncontroller::assertions::modelassertions#assert_valid()","activesupport::coreextensions::hash::keys#assert_valid_keys()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#assign()","actioncontroller::response#assign_default_content_type_and_charset!()","actioncontroller::testprocess#assigns()","activerecord::connectionadapters::schemastatements#assume_migrated_upto_version()","activesupport::coreextensions::string::access#at()","activesupport::timezone#at()","activesupport::coreextensions::date::calculations#at_beginning_of_day()","activesupport::coreextensions::datetime::calculations#at_beginning_of_day()","activesupport::coreextensions::time::calculations#at_beginning_of_day()","activesupport::coreextensions::date::calculations#at_beginning_of_month()","activesupport::coreextensions::time::calculations#at_beginning_of_month()","activesupport::coreextensions::date::calculations#at_beginning_of_quarter()","activesupport::coreextensions::time::calculations#at_beginning_of_quarter()","activesupport::coreextensions::date::calculations#at_beginning_of_week()","activesupport::coreextensions::time::calculations#at_beginning_of_week()","activesupport::coreextensions::date::calculations#at_beginning_of_year()","activesupport::coreextensions::time::calculations#at_beginning_of_year()","activesupport::coreextensions::date::calculations#at_end_of_month()","activesupport::coreextensions::time::calculations#at_end_of_month()","activesupport::coreextensions::date::calculations#at_end_of_quarter()","activesupport::coreextensions::time::calculations#at_end_of_quarter()","activesupport::coreextensions::date::calculations#at_end_of_week()","activesupport::coreextensions::time::calculations#at_end_of_week()","activesupport::coreextensions::date::calculations#at_end_of_year()","activesupport::coreextensions::time::calculations#at_end_of_year()","activesupport::coreextensions::date::calculations#at_midnight()","activesupport::coreextensions::datetime::calculations#at_midnight()","activesupport::coreextensions::time::calculations#at_midnight()","actionview::helpers::atomfeedhelper#atom_feed()","activesupport::coreextensions::file::atomic#atomic_write()","activerecord::base::attr_accessible()","module#attr_accessor_with_default()","module#attr_internal()","module#attr_internal_accessor()","module#attr_internal_reader()","module#attr_internal_writer()","activerecord::base::attr_protected()","activerecord::base::attr_readonly()","activerecord::base#attribute_for_inspect()","html::selector#attribute_match()","activerecord::attributemethods::classmethods#attribute_method_suffix()","activerecord::base#attribute_names()","activerecord::base#attribute_present?()","activerecord::base#attributes()","rails::generator::namedbase#attributes()","activerecord::base#attributes=()","activerecord::base#attributes_before_type_cast()","actioncontroller::httpauthentication::basic#authenticate()","actioncontroller::httpauthentication::digest#authenticate()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_or_request_with_http_basic()","actioncontroller::httpauthentication::digest::controllermethods#authenticate_or_request_with_http_digest()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_with_http_basic()","actioncontroller::httpauthentication::digest::controllermethods#authenticate_with_http_digest()","actioncontroller::httpauthentication::digest#authentication_header()","actioncontroller::httpauthentication::basic#authentication_request()","actioncontroller::httpauthentication::digest#authentication_request()","actioncontroller::httpauthentication::basic#authorization()","actioncontroller::httpauthentication::digest#authorization()","actionview::helpers::assettaghelper#auto_discovery_link_tag()","activesupport::bufferedlogger#auto_flush()","activesupport::bufferedlogger#auto_flushing=()","actionview::helpers::texthelper#auto_link()","i18n::backend::activerecord::implementation#available_locales()","i18n::backend::activerecord::translation::available_locales()","i18n::backend::base#available_locales()","i18n::backend::chain#available_locales()","i18n::backend::keyvalue::implementation#available_locales()","i18n::backend::memoize#available_locales()","i18n::backend::simple::implementation#available_locales()","i18n::config#available_locales()","i18n::config#available_locales=()","activerecord::calculations::classmethods#average()","activesupport::json::backend()","i18n::config#backend()","activesupport::json::backend=()","activesupport::xmlmini#backend=()","i18n::config#backend=()","rails::backtrace_cleaner()","activerecord::dynamicfindermatch#bang?()","rails::generator::base#banner()","rails::generator::namedbase#banner()","rails::generator::options#banner()","rails::generator::scripts::base#banner()","activesupport::securerandom::base64()","activerecord::base::base_class()","activerecord::base#becomes()","activerecord::callbacks#before_create()","activerecord::callbacks#before_destroy()","actioncontroller::filters::classmethods#before_filter()","activerecord::callbacks#before_save()","activerecord::callbacks#before_update()","activerecord::callbacks#before_validation()","activerecord::callbacks#before_validation_on_create()","activerecord::callbacks#before_validation_on_update()","activerecord::connectionadapters::databasestatements#begin_db_transaction()","activerecord::connectionadapters::postgresqladapter#begin_db_transaction()","activesupport::coreextensions::date::calculations#beginning_of_day()","activesupport::coreextensions::datetime::calculations#beginning_of_day()","activesupport::coreextensions::time::calculations#beginning_of_day()","activesupport::coreextensions::date::calculations#beginning_of_month()","activesupport::coreextensions::time::calculations#beginning_of_month()","activesupport::coreextensions::date::calculations#beginning_of_quarter()","activesupport::coreextensions::time::calculations#beginning_of_quarter()","activesupport::coreextensions::date::calculations#beginning_of_week()","activesupport::coreextensions::time::calculations#beginning_of_week()","activesupport::coreextensions::date::calculations#beginning_of_year()","activesupport::coreextensions::time::calculations#beginning_of_year()","activerecord::associations::classmethods#belongs_to()","activerecord::connectionadapters::table#belongs_to()","activerecord::connectionadapters::tabledefinition#belongs_to()","activerecord::reflection::macroreflection#belongs_to?()","actioncontroller::benchmarking::classmethods#benchmark()","actionview::helpers::benchmarkhelper#benchmark()","activerecord::base::benchmark()","activesupport::testing::performance::metrics::base#benchmark()","railsenvironment#best_install_method()","activesupport::timewithzone#between?()","continuum::binary_search()","activerecord::connectionadapters::column::binary_to_string()","object#blank?()","kernel::blank_slate_method_added()","object::blank_slate_method_added()","module#blankslate_original_append_features()","actioncontroller::request#body()","kernel#breakpoint()","rails::configuration#breakpoint_server()","rails::configuration#breakpoint_server=()","mime::type#browser_generated?()","activesupport::bufferedlogger#buffer()","actioncontroller::middlewarestack#build()","actioncontroller::middlewarestack::middleware#build()","activesupport::callbacks::callbackchain::build()","rails::gemdependency#build()","actionview::helpers::prototypehelper#build_callbacks()","activesupport::cache::memcachestore::build_mem_cache()","actionview::helpers::prototypehelper#build_observer()","actioncontroller::testprocess#build_request_uri()","rails::gemdependency#built?()","rails::configuration#builtin_directories()","actionview::helpers::urlhelper#button_to()","actionview::helpers::javascripthelper#button_to_function()","actionview::helpers::prototypehelper#button_to_remote()","activesupport::coreextensions::numeric::bytes#byte()","activesupport::coreextensions::numeric::bytes#bytes()","actioncontroller::caching#cache()","actionview::helpers::cachehelper#cache()","activerecord::connectionadapters::querycache#cache()","activerecord::querycache::classmethods#cache()","rails::cache()","actionview::helpers::assettaghelper::cache_asset_timestamps()","actionview::helpers::assettaghelper::cache_asset_timestamps=()","activerecord::attributemethods::classmethods#cache_attribute?()","activerecord::attributemethods::classmethods#cache_attributes()","actioncontroller::caching::cache_configured?()","memcache#cache_decr()","fixtures::cache_fixtures()","fixtures::cache_for_connection()","actioncontroller::request#cache_format()","memcache#cache_get()","memcache#cache_get_multi()","memcache#cache_incr()","activerecord::base#cache_key()","i18n::backend::cache#cache_key()","i18n::cache_namespace()","i18n::cache_namespace=()","actioncontroller::caching::pages#cache_page()","actioncontroller::caching::pages::classmethods#cache_page()","i18n::cache_store()","actioncontroller::caching::cache_store=()","i18n::cache_store=()","activerecord::attributemethods::classmethods#cached_attributes()","fixtures::cached_fixtures()","actioncontroller::caching::actions::classmethods#caches_action()","actioncontroller::caching::pages::classmethods#caches_page()","activerecord::calculations::classmethods#calculate()","actioncontroller::base::call()","actioncontroller::dispatcher#call()","actioncontroller::failsafe#call()","actioncontroller::paramsparser#call()","actioncontroller::session::abstractstore#call()","actioncontroller::session::cookiestore#call()","actioncontroller::stringcoercion#call()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#call()","actionview::templatehandler::call()","actionview::templatehandlers::compilable::classmethods#call()","activerecord::connectionadapters::connectionmanagement#call()","activerecord::querycache#call()","activesupport::callbacks::callback#call()","logger::formatter#call()","logger::simpleformatter#call()","activesupport::coreextensions::string::inflections#camelcase()","activesupport::coreextensions::string::inflections#camelize()","activesupport::inflector#camelize()","activesupport::multibyte::chars#capitalize()","actionview::helpers::capturehelper#capture()","memcache#cas()","activerecord::connectionadapters::databasestatements#case_sensitive_equality_operator()","activerecord::connectionadapters::mysqladapter#case_sensitive_equality_operator()","activerecord::connectionadapters::sqliteadapter#catch_schema_changes()","class#cattr_accessor()","class#cattr_reader()","class#cattr_writer()","builder::xmlmarkup#cdata!()","activesupport::xmlmini_nokogirisax::hashbuilder#cdata_block()","actionview::helpers::taghelper#cdata_section()","activesupport::multibyte::chars#center()","activerecord::connectionadapters::table#change()","activesupport::coreextensions::date::calculations#change()","activesupport::coreextensions::datetime::calculations#change()","activesupport::coreextensions::time::calculations#change()","activerecord::connectionadapters::postgresqladapter#change_column()","activerecord::connectionadapters::schemastatements#change_column()","activerecord::connectionadapters::postgresqladapter#change_column_default()","activerecord::connectionadapters::schemastatements#change_column_default()","activerecord::connectionadapters::mysqladapter#change_column_null()","activerecord::connectionadapters::postgresqladapter#change_column_null()","activerecord::connectionadapters::sqliteadapter#change_column_null()","activerecord::connectionadapters::table#change_default()","activerecord::connectionadapters::schemastatements#change_table()","activerecord::dirty#changed()","activerecord::dirty#changed?()","activerecord::autosaveassociation#changed_for_autosave?()","activerecord::dirty#changes()","activesupport::xmlmini_nokogirisax::hashbuilder#characters()","activesupport::coreextensions::string::multibyte#chars()","actioncontroller::response#charset()","activerecord::connectionadapters::mysqladapter#charset()","actioncontroller::response#charset=()","actionview::helpers::formhelper#check_box()","actionview::helpers::formtaghelper#check_box_tag()","builder::check_for_name_collision()","rails::initializer#check_for_unbuilt_gems()","rails::initializer#check_gem_dependencies()","memcache#check_multithread_status!()","rails::initializer#check_ruby_version()","activerecord::connectionadapters::connectionpool#checkin()","activerecord::connectionadapters::connectionpool#checkout()","builder::css#class!()","class#class_attribute()","rails::generator::commands::base#class_collisions()","rails::generator::commands::create#class_collisions()","rails::generator::commands::list#class_collisions()","kernel#class_eval()","object#class_eval()","rails::generator::spec#class_file()","activerecord::reflection::macroreflection#class_name()","rails::generator::spec#class_name()","activerecord::base::class_of_active_record_descendant()","activesupport::coreextensions::string::inflections#classify()","activesupport::inflector#classify()","activesupport::backtracecleaner#clean()","actioncontroller::testcase::assertions#clean_backtrace()","activesupport::coreextensions::pathname::cleanwithin#clean_within()","actioncontroller::dispatcher::cleanup_application()","actioncontroller::session::abstractstore::sessionhash#clear()","activerecord::errors#clear()","activeresource::errors#clear()","activesupport::cache::memcachestore#clear()","activesupport::cache::memorystore#clear()","activesupport::cache::strategy::localcache#clear()","activesupport::cache::synchronizedmemorystore#clear()","activesupport::inflector::inflections#clear()","activerecord::connectionadapters::connectionhandler#clear_active_connections!()","activerecord::connectionadapters::connectionhandler#clear_all_connections!()","activesupport::bufferedlogger#clear_buffer()","activerecord::connectionadapters::querycache#clear_query_cache()","activerecord::connectionadapters::connectionhandler#clear_reloadable_connections!()","activerecord::connectionadapters::connectionpool#clear_reloadable_connections!()","activerecord::connectionadapters::connectionpool#clear_stale_cached_connections!()","activerecord::connectionadapters::postgresqladapter#client_min_messages()","activerecord::connectionadapters::postgresqladapter#client_min_messages=()","activerecord::base#clone()","activeresource::base#clone()","actioncontroller::reloader::bodywrapper#close()","activesupport::bufferedlogger#close()","activesupport::gzip::stream#close()","memcache::server#close()","railsfcgihandler#close_connection()","activerecord::connectionadapters::mysqladapter#collation()","activeresource::base#collection_path()","activeresource::base::collection_path()","actionview::helpers::formbuilder#collection_select()","actionview::helpers::formoptionshelper#collection_select()","activerecord::base::colorize_logging()","activerecord::connectionadapters::table#column()","activerecord::connectionadapters::tabledefinition#column()","activerecord::base#column_for_attribute()","activerecord::connectionadapters::databaselimits#column_name_length()","activerecord::base::column_names()","activerecord::base::columns()","activerecord::connectionadapters::postgresqladapter#columns()","activerecord::connectionadapters::schemastatements#columns()","activerecord::base::columns_hash()","activerecord::connectionadapters::databaselimits#columns_per_multicolumn_index()","activerecord::connectionadapters::databaselimits#columns_per_table()","activerecord::connectionadapters::querycache#columns_with_query_cache()","builder::css#comment!()","builder::xmlmarkup#comment!()","activerecord::connectionadapters::databasestatements#commit_db_transaction()","activerecord::connectionadapters::postgresqladapter#commit_db_transaction()","activesupport::timewithzone#comparable_time()","activesupport::coreextensions::datetime::calculations#compare_with_coercion()","activesupport::coreextensions::time::calculations#compare_with_coercion()","actionview::templatehandlers::builder#compile()","actionview::templatehandlers::compilable#compile()","actionview::templatehandlers::erb#compile()","actionview::templatehandlers::rjs#compile()","i18n::backend::interpolationcompiler#compile_all_strings_in()","i18n::backend::interpolationcompiler::compiler#compile_if_an_interpolation()","i18n::backend::interpolationcompiler::compiler#compile_interpolation_token()","i18n::backend::interpolationcompiler::compiler#compiled_interpolation_body()","rails::generator::commands::create#complex_template()","rails::generator::commands::destroy#complex_template()","rails::generator::commands::list#complex_template()","rails::generator::commands::update#complex_template()","activesupport::multibyte::chars#compose()","activesupport::multibyte::chars::compose_codepoints()","activerecord::aggregations::classmethods#composed_of()","activesupport::gzip::compress()","i18n::locale::fallbacks#compute()","activerecord::base::compute_type()","actionview::helpers::texthelper#concat()","i18n::config()","i18n::config=()","rails::configuration()","rails::configuration=()","activerecord::base::configurations()","actioncontroller::routing::routeset::mapper#connect()","memcache::server#connect_to()","activerecord::base::connected?()","activerecord::connectionadapters::connectionhandler#connected?()","activerecord::connectionadapters::connectionpool#connected?()","activerecord::base#connection()","activerecord::base::connection()","activerecord::connectionadapters::connectionpool#connection()","activerecord::migration::connection()","activerecord::sessionstore::sqlbypass::connection()","activeresource::base::connection()","activeresource::base#connection()","activerecord::base::connection_handler()","activerecord::base::connection_pool()","activerecord::connectionadapters::connectionhandler#connection_pools()","activesupport::coreextensions::string::inflections#constantize()","activesupport::inflector#constantize()","activerecord::calculations::classmethods#construct_count_options_from_args()","activesupport::multibyte::chars::consumes?()","html::whitelistsanitizer#contains_bad_protocols?()","activerecord::base::content_columns()","actionview::helpers::capturehelper#content_for()","actioncontroller::request#content_length()","actionview::helpers::taghelper#content_tag()","actionview::helpers::recordtaghelper#content_tag_for()","actioncontroller::request#content_type()","actioncontroller::response#content_type()","actionview::template#content_type()","actioncontroller::response#content_type=()","actioncontroller::testcase::controller_class()","actioncontroller::testcase::controller_class=()","actioncontroller::base::controller_class_name()","actioncontroller::base#controller_class_name()","actioncontroller::base::controller_name()","actioncontroller::base#controller_name()","actionmailer::base::controller_name()","actioncontroller::base::controller_path()","actioncontroller::base#controller_path()","actionmailer::base::controller_path()","actionview::testcase::testcontroller::controller_path()","rails::plugin#controller_path()","actioncontroller::routing::controller_relative_to()","hashwithindifferentaccess#convert_key()","hashwithindifferentaccess#convert_value()","actioncontroller::cookies#cookies()","actioncontroller::testprocess#cookies()","activerecord::calculations::classmethods#count()","activerecord::errors#count()","activeresource::errors#count()","activerecord::base::count_by_sql()","activerecord::base::create()","activeresource::base::create()","activeresource::base#create()","activesupport::timezone::create()","activerecord::validations::classmethods#create!()","memcache#create_continuum_for()","activerecord::connectionadapters::mysqladapter#create_database()","activerecord::connectionadapters::postgresqladapter#create_database()","fixtures::create_fixtures()","object#create_fixtures()","activerecord::reflection::classmethods#create_reflection()","activerecord::connectionadapters::abstractadapter#create_savepoint()","activerecord::connectionadapters::mysqladapter#create_savepoint()","activerecord::connectionadapters::postgresqladapter#create_savepoint()","activerecord::connectionadapters::schemastatements#create_table()","activerecord::sessionstore::session::create_table!()","activerecord::sessionstore::sqlbypass::create_table!()","actionview::helpers::csrfhelper#csrf_meta_tag()","actioncontroller::assertions::selectorassertions#css_select()","activesupport::coreextensions::date::calculations::classmethods#current()","activesupport::coreextensions::datetime::calculations::classmethods#current()","activesupport::coreextensions::time::zones::classmethods#current()","actionview::helpers::texthelper#current_cycle()","activerecord::connectionadapters::mysqladapter#current_database()","activerecord::connectionadapters::postgresqladapter#current_database()","activesupport::xmlmini_libxmlsax::hashbuilder#current_hash()","activesupport::xmlmini_nokogirisax::hashbuilder#current_hash()","rails::generator::commands::base#current_migration_number()","actionview::helpers::urlhelper#current_page?()","tzinfo::timezone#current_period()","tzinfo::timezone#current_period_and_time()","activerecord::connectionadapters::abstractadapter#current_savepoint_name()","tzinfo::timezone#current_time_and_period()","activeresource::custommethods::classmethods#custom_method_collection_url()","actionview::helpers::texthelper#cycle()","process::daemon()","kernel#daemonize()","activesupport::coreextensions::string::inflections#dasherize()","activesupport::inflector#dasherize()","actioncontroller::session::abstractstore::sessionhash#data()","activerecord::sessionstore::session#data()","activerecord::sessionstore::sqlbypass#data()","activerecord::sessionstore::sqlbypass::data_column()","activerecord::sessionstore::session::data_column_name()","activerecord::sessionstore::session::data_column_size_limit()","rails::configuration#database_configuration()","actionview::helpers::datehelper#date_select()","actionview::helpers::formbuilder#date_select()","logger#datetime_format()","logger#datetime_format=()","actionview::helpers::datehelper#datetime_select()","actionview::helpers::formbuilder#datetime_select()","activesupport::coreextensions::numeric::time#day()","activesupport::coreextensions::numeric::time#days()","activesupport::coreextensions::time::calculations::classmethods#days_in_month()","actionview::helpers::debughelper#debug()","actionview::base::debug_rjs()","kernel#debugger()","builder::xmlmarkup#declare!()","activeresource::formats::jsonformat#decode()","activeresource::formats::xmlformat#decode()","activesupport::json::backends::jsongem#decode()","activesupport::json::backends::okjson#decode()","activesupport::json::backends::yajl#decode()","activesupport::json::backends::yaml#decode()","activesupport::okjson#decode()","activesupport::base64::decode64()","actioncontroller::httpauthentication::basic#decode_credentials()","actioncontroller::httpauthentication::digest#decode_credentials()","actioncontroller::httpauthentication::digest#decode_credentials_header()","activesupport::multibyte::chars#decompose()","activesupport::multibyte::chars::decompose_codepoints()","activesupport::gzip::decompress()","memcache#decr()","activerecord::base#decrement()","activesupport::cache::store#decrement()","activesupport::cache::strategy::localcache#decrement()","activesupport::cache::synchronizedmemorystore#decrement()","activerecord::base#decrement!()","activerecord::base::decrement_counter()","activerecord::connectionadapters::abstractadapter#decrement_open_transactions()","activesupport::messageencryptor#decrypt()","activesupport::messageencryptor#decrypt_and_verify()","activesupport::coreextensions::hash::deepmerge#deep_merge()","activesupport::coreextensions::hash::deepmerge#deep_merge!()","hash#deep_merge!()","actioncontroller::request#deep_munge()","hash#deep_symbolize_keys()","hashwithindifferentaccess#default()","i18n::backend::base#default()","rails::generator::generatedattribute#default()","railsenvironment::default()","railsenvironment::default=()","activerecord::errors::default_error_messages()","i18n::config#default_locale()","i18n::config#default_locale=()","activerecord::error#default_options()","rails::generator::options#default_options()","rails::generator::options::classmethods#default_options()","activerecord::connectionadapters::sqliteadapter#default_primary_key_type()","activerecord::base::default_scope()","i18n::config#default_separator()","i18n::config#default_separator=()","activerecord::connectionadapters::databasestatements#default_sequence_name()","activerecord::base::default_timezone()","actioncontroller::base#default_url_options()","repositories#defaults()","i18n::locale::fallbacks#defaults=()","activerecord::schema::define()","logger::define_around_helper()","activerecord::attributemethods::classmethods#define_attribute_methods()","activesupport::callbacks::classmethods#define_callbacks()","actioncontroller::dispatcher::define_dispatcher_callbacks()","activerecord::attributemethods::classmethods#define_read_methods()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#delay()","module#delegate()","actioncontroller::integration::session#delete()","actioncontroller::session::abstractstore::sessionhash#delete()","actioncontroller::testprocess#delete()","activerecord::base#delete()","activerecord::base::delete()","activerecord::connectionadapters::databasestatements#delete()","activeresource::base::delete()","activeresource::connection#delete()","activeresource::custommethods::delete()","activeresource::custommethods::instancemethods#delete()","activesupport::cache::filestore#delete()","activesupport::cache::memorystore#delete()","activesupport::cache::store#delete()","activesupport::cache::strategy::localcache#delete()","activesupport::cache::synchronizedmemorystore#delete()","activesupport::callbacks::callbackchain#delete()","hashwithindifferentaccess#delete()","memcache#delete()","actioncontroller::request#delete?()","activerecord::base::delete_all()","fixtures#delete_existing_fixtures()","activesupport::cache::filestore#delete_matched()","activesupport::cache::memorystore#delete_matched()","activesupport::cache::store#delete_matched()","activesupport::cache::synchronizedmemorystore#delete_matched()","activerecord::connectionadapters::databasestatements#delete_sql()","actioncontroller::integration::session#delete_via_redirect()","actionmailer::base::deliver()","actionmailer::base#deliver!()","activesupport::coreextensions::string::inflections#demodulize()","activesupport::inflector#demodulize()","rails::gemdependency#dependencies()","rails::generator::commands::base#dependency()","rails::generator::commands::list#dependency()","activerecord::base::descends_from_active_record?()","rails::generator::base#destination_path()","actioncontroller::session::abstractstore::sessionhash#destroy()","activerecord::base#destroy()","activerecord::base::destroy()","activerecord::sessionstore::sqlbypass#destroy()","activeresource::base#destroy()","activerecord::base::destroy_all()","activerecord::base#destroyed?()","i18n::backend::cldr#detect_type()","actioncontroller::testcase::determine_default_controller_class()","actionview::testcase::determine_default_helper_class()","commands::install#determine_install_method()","activesupport::coreextensions::hash::diff#diff()","i18n::backend::interpolationcompiler::compiler#direct_key()","rails::generator::commands::create#directory()","rails::generator::commands::destroy#directory()","rails::generator::commands::list#directory()","rails::generator::commands::update#directory()","activesupport::multibyte::unicodedatabase::dirname()","activerecord::connectionadapters::querycache::dirties_query_cache()","rails::initializer#disable_dependency_loading()","activerecord::connectionadapters::abstractadapter#disable_referential_integrity()","actioncontroller::flash::flashhash#discard()","activerecord::connectionadapters::abstractadapter#disconnect!()","activerecord::connectionadapters::connectionpool#disconnect!()","activerecord::connectionadapters::mysqladapter#disconnect!()","activerecord::connectionadapters::postgresqladapter#disconnect!()","activerecord::connectionadapters::sqliteadapter#disconnect!()","actioncontroller::dispatcher::dispatch()","actioncontroller::dispatcher#dispatch()","dispatchservlet::dispatch()","actioncontroller::cgihandler::dispatch_cgi()","actioncontroller::dispatcher#dispatch_cgi()","railsfcgihandler#dispatcher_error()","railsfcgihandler#dispatcher_log()","sourceannotationextractor#display()","actionview::helpers::datehelper#distance_of_time_in_words()","actionview::helpers::datehelper#distance_of_time_in_words_to_now()","activerecord::connectionadapters::schemastatements#distinct()","actionview::helpers::recordtaghelper#div_for()","actioncontroller::recordidentifier#dom_class()","actionview::helpers::recordidentificationhelper#dom_class()","actioncontroller::recordidentifier#dom_id()","actionview::helpers::recordidentificationhelper#dom_id()","actioncontroller::request#domain()","activesupport::multibyte::chars#downcase()","recursivehttpfetcher#download()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#draggable()","actionview::helpers::scriptaculoushelper#draggable_element()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#drop_receiving()","actionview::helpers::scriptaculoushelper#drop_receiving_element()","activerecord::connectionadapters::mysqladapter#drop_table()","activerecord::connectionadapters::schemastatements#drop_table()","activerecord::sessionstore::session::drop_table!()","activerecord::sessionstore::sqlbypass::drop_table!()","activesupport::timewithzone#dst?()","tzinfo::timezoneperiod#dst?()","activeresource::base#dup()","activesupport::callbacks::callback#dup()","hashwithindifferentaccess#dup()","object#duplicable?()","actioncontroller::cgihandler::properstream#each()","actioncontroller::response#each()","actioncontroller::stringcoercion::uglybody#each()","activerecord::errors#each()","activeresource::errors#each()","rails::generator::gemgeneratorsource#each()","rails::generator::gempathsource#each()","rails::generator::pathsource#each()","rails::generator::source#each()","rails::vendorgemsourceindex#each()","repositories::each()","repositories#each()","repository#each()","activesupport::coreextensions::string::iterators#each_char()","activerecord::errors#each_error()","activerecord::errors#each_full()","activeresource::errors#each_full()","racklintpatch::allowstringsubclass#each_with_hack()","enumerable#each_with_object()","activesupport::okjson#eat()","activeresource::base#element_path()","activeresource::base::element_path()","activerecord::errors#empty?()","activerecord::namedscope::scope#empty?()","activerecord::connectionadapters::databasestatements#empty_insert_statement()","activerecord::connectionadapters::sqliteadapter#empty_insert_statement()","activerecord::connectionadapters::mysqladapter::emulate_booleans()","kernel#enable_warnings()","activeresource::base#encode()","activeresource::formats::jsonformat#encode()","activeresource::formats::xmlformat#encode()","activesupport::okjson#encode()","activesupport::base64::encode64()","activesupport::coreextensions::base64::encoding#encode64s()","actioncontroller::httpauthentication::basic#encode_credentials()","actioncontroller::httpauthentication::digest#encode_credentials()","activerecord::connectionadapters::postgresqladapter#encoding()","activesupport::messageencryptor#encrypt()","activesupport::messageencryptor#encrypt_and_sign()","activesupport::xmlmini_nokogirisax::hashbuilder#end_document()","activesupport::xmlmini_nokogirisax::hashbuilder#end_element()","activesupport::coreextensions::date::calculations#end_of_day()","activesupport::coreextensions::datetime::calculations#end_of_day()","activesupport::coreextensions::time::calculations#end_of_day()","activesupport::coreextensions::date::calculations#end_of_month()","activesupport::coreextensions::time::calculations#end_of_month()","activesupport::coreextensions::date::calculations#end_of_quarter()","activesupport::coreextensions::time::calculations#end_of_quarter()","activesupport::coreextensions::date::calculations#end_of_week()","activesupport::coreextensions::time::calculations#end_of_week()","activesupport::coreextensions::date::calculations#end_of_year()","activesupport::coreextensions::time::calculations#end_of_year()","activesupport::coreextensions::string::startsendswith#ends_with?()","rails::plugin#engine?()","rexml::document::entity_expansion_limit=()","actionview::helpers::atomfeedhelper::atomfeedbuilder#entry()","memcache#entry_count_for()","sourceannotationextractor::enumerate()","rails::env()","activesupport::testing::performance::benchmarker#environment()","rails::configuration#environment()","commands::plugin#environment=()","rails::configuration#environment_path()","actionview::template::path#eql?()","activerecord::base#eql?()","activeresource::base#eql?()","activesupport::callbacks::callback#eql?()","activesupport::timewithzone#eql?()","tzinfo::timezone#eql?()","tzinfo::timezoneperiod#eql?()","rails::generator::manifest#erase()","actionview::templatehandlers::erb::erb_trim_mode()","activesupport::xmlmini_nokogirisax::hashbuilder#error()","actionview::helpers::activerecordhelper#error_message_on()","actionview::helpers::activerecordhelper#error_messages_for()","activerecord::validations#errors()","activeresource::validations#errors()","activerecord::connectionadapters::postgresqladapter#escape_bytea()","actionview::helpers::javascripthelper#escape_javascript()","i18n::backend::interpolationcompiler::compiler#escape_key_sym()","actionview::helpers::taghelper#escape_once()","i18n::backend::interpolationcompiler::compiler#escape_plain_str()","activerecord::base::establish_connection()","activerecord::connectionadapters::connectionhandler#establish_connection()","actioncontroller::response#etag()","actioncontroller::response#etag=()","actioncontroller::response#etag?()","actioncontroller::request#etag_matches?()","actionview::helpers::prototypehelper#evaluate_remote_response()","activesupport::coreextensions::integer::evenodd#even?()","activesupport::coreextensions::numeric::bytes#exabyte()","activesupport::coreextensions::numeric::bytes#exabytes()","activesupport::coreextensions::hash::except#except()","hash#except()","activesupport::coreextensions::hash::except#except!()","i18n::config#exception_handler()","i18n::config#exception_handler=()","actionview::helpers::texthelper#excerpt()","enumerable#exclude?()","activerecord::connectionadapters::databasestatements#execute()","activerecord::connectionadapters::postgresqladapter#execute()","actionview::template::exempt_from_layout()","actionview::template#exempt_from_layout?()","activesupport::cache::strategy::localcache#exist()","activesupport::cache::filestore#exist?()","activesupport::cache::memorystore#exist?()","activesupport::cache::store#exist?()","activesupport::cache::synchronizedmemorystore#exist?()","repositories#exist?()","rails::generator::commands::base#existing_migrations()","actioncontroller::session::abstractstore::sessionhash#exists?()","activerecord::base::exists?()","activeresource::base#exists?()","activeresource::base::exists?()","railsfcgihandler#exit_handler()","railsfcgihandler#exit_now_handler()","activesupport::cache::expand_cache_key()","activerecord::base::expand_hash_conditions_for_aggregates()","i18n::backend::activerecord::implementation#expand_keys()","actioncontroller::httpauthentication::digest#expected_response()","actioncontroller::caching::actions#expire_action()","actioncontroller::caching::fragments#expire_fragment()","actioncontroller::caching::pages#expire_page()","actioncontroller::caching::pages::classmethods#expire_page()","actioncontroller::base#expires_in()","actioncontroller::base#expires_now()","actioncontroller::uploadedfile::extended()","activerecord::dirty::classmethods::extended()","activerecord::locking::optimistic::classmethods::extended()","activeresource::formats::jsonformat#extension()","activeresource::formats::xmlformat#extension()","railsenvironment#externals()","railsenvironment#externals=()","sourceannotationextractor#extract_annotations_from()","activerecord::connectionadapters::column#extract_default()","activesupport::coreextensions::array::extractoptions#extract_options!()","commands::discover#extract_repository_uri()","i18n::gettext::extract_scope()","i18n::backend::fallbacks#extract_string_default!()","actioncontroller::routing::optionalformatsegment#extract_value()","activerecord::connectionadapters::column::fallback_string_to_date()","activerecord::connectionadapters::column::fallback_string_to_time()","i18n::fallbacks()","i18n::fallbacks=()","activesupport::okjson#falsetok()","activerecord::connectionadapters::column::fast_string_to_date()","activerecord::connectionadapters::column::fast_string_to_time()","activesupport::cache::store#fetch()","activesupport::cache::synchronizedmemorystore#fetch()","hashwithindifferentaccess#fetch()","i18n::backend::cache#fetch()","memcache#fetch()","recursivehttpfetcher#fetch()","recursivehttpfetcher#fetch_dir()","actionview::helpers::formtaghelper#field_set_tag()","rails::generator::generatedattribute#field_type()","actionview::helpers::formhelper#fields_for()","activesupport::coreextensions::array::access#fifth()","rails::generator::commands::create#file()","rails::generator::commands::destroy#file()","rails::generator::commands::list#file()","rails::generator::commands::update#file()","actionview::helpers::formhelper#file_field()","actionview::helpers::formtaghelper#file_field_tag()","actionview::template#filename()","activesupport::multibyte::unicodedatabase::filename()","actioncontroller::filters::classmethods#filter_chain()","actioncontroller::base::filter_parameter_logging()","activerecord::base::find()","activeresource::base::find()","activesupport::callbacks::callbackchain#find()","plugin::find()","railsenvironment::find()","sourceannotationextractor#find()","actioncontroller::testprocess#find_all_tag()","activerecord::sessionstore::session::find_by_session_id()","activerecord::sessionstore::sqlbypass::find_by_session_id()","activerecord::base::find_by_sql()","object#find_cmd()","activerecord::batches::classmethods#find_each()","i18n::backend::fallbacks#find_first_string_default()","blankslate::find_hidden_method()","blankslate::find_hidden_method()","object::find_hidden_method()","repositories#find_home()","sourceannotationextractor#find_in()","activerecord::batches::classmethods#find_in_batches()","rails::vendorgemsourceindex#find_name()","repositories#find_plugin()","actioncontroller::testprocess#find_tag()","activesupport::timezone::find_tzinfo()","activerecord::dynamicfindermatch#finder?()","activerecord::base::first()","activerecord::namedscope::scope#first()","activesupport::coreextensions::string::access#first()","actioncontroller::testprocess#fixture_file_upload()","fixtures::fixture_is_cached?()","activerecord::testfixtures::classmethods#fixtures()","actioncontroller::testprocess#flash()","i18n::backend::flatten#flatten_keys()","i18n::backend::flatten#flatten_translations()","activesupport::bufferedlogger#flush()","memcache#flush_all()","activesupport::memoizable::instancemethods#flush_cache()","actioncontroller::dispatcher#flush_logger()","actioncontroller::integration::session#follow_redirect!()","html::selector::for_class()","html::selector::for_id()","activesupport::coreextensions::string::inflections#foreign_key()","activesupport::inflector#foreign_key()","actionview::helpers::activerecordhelper#form()","actioncontroller::requestforgeryprotection#form_authenticity_param()","actioncontroller::requestforgeryprotection#form_authenticity_token()","actioncontroller::request#form_data?()","actionview::helpers::formhelper#form_for()","actionview::helpers::prototypehelper#form_remote_for()","actionview::helpers::prototypehelper#form_remote_tag()","actionview::helpers::formtaghelper#form_tag()","actioncontroller::request#format()","activeresource::base::format()","activesupport::testing::performance::metrics::gcruns#format()","activesupport::testing::performance::metrics::gctime#format()","activesupport::testing::performance::metrics::memory#format()","activesupport::testing::performance::metrics::objects#format()","activesupport::testing::performance::metrics::time#format()","actioncontroller::request#format=()","activeresource::base::format=()","actionview::template#format_and_extension()","i18n::backend::cldr#format_currency()","i18n::backend::cldr#format_date()","i18n::backend::cldr#format_datetime()","i18n::backend::cldr#format_decimal()","i18n::backend::cldr#format_integer()","activerecord::connectionadapters::abstractadapter#format_log_entry()","i18n::backend::cldr#format_percent()","i18n::backend::cldr#format_time()","activesupport::coreextensions::datetime::conversions#formatted_offset()","activesupport::coreextensions::time::conversions#formatted_offset()","activesupport::timewithzone#formatted_offset()","activesupport::timezone#formatted_offset()","actioncontroller::polymorphicroutes#formatted_polymorphic_path()","actioncontroller::polymorphicroutes#formatted_polymorphic_url()","i18n::backend::cldr#formatter()","logger#formatter()","activesupport::coreextensions::numeric::time#fortnight()","activesupport::coreextensions::numeric::time#fortnights()","activesupport::coreextensions::array::access#forty_two()","activesupport::coreextensions::array::access#fourth()","actioncontroller::caching::fragments#fragment_cache_key()","actioncontroller::caching::fragments#fragment_exist?()","rails::gemdependency#framework_gem?()","rails::configuration#framework_paths()","actionview::reloadabletemplate::unfreezable#freeze()","activerecord::base#freeze()","activesupport::timewithzone#freeze()","activesupport::memoizable::instancemethods#freeze_with_memoizable()","actioncontroller::request#fresh?()","actioncontroller::base#fresh_when()","tzinfo::timezone#friendly_identifier()","activesupport::coreextensions::array::access#from()","activesupport::coreextensions::string::access#from()","activeresource::errors#from_array()","rails::gemdependency::from_directory_name()","activerecord::serialization#from_json()","activeresource::errors#from_json()","activesupport::coreextensions::numeric::time#from_now()","activesupport::duration#from_now()","activesupport::coreextensions::hash::conversions::classmethods#from_trusted_xml()","activerecord::serialization#from_xml()","activeresource::errors#from_xml()","activesupport::coreextensions::hash::conversions::classmethods#from_xml()","activerecord::base#frozen?()","rails::gemdependency#frozen?()","activerecord::error#full_message()","activerecord::errors#full_messages()","activeresource::errors#full_messages()","rails::generator::options#full_options()","rails::generator::options::classmethods#full_options()","activesupport::testing::performance#full_test_name()","activesupport::coreextensions::date::calculations#future?()","activesupport::coreextensions::datetime::calculations#future?()","activesupport::coreextensions::time::calculations#future?()","activesupport::timewithzone#future?()","activesupport::multibyte::chars#g_length()","activesupport::multibyte::chars::g_pack()","activesupport::multibyte::chars::g_unpack()","railsfcgihandler#gc_countdown()","rails::configuration#gem()","activesupport::messageverifier#generate()","actioncontroller::routing::routeset#generate_code()","activerecord::error#generate_full_message()","activerecord::error#generate_message()","activerecord::errors#generate_message()","actioncontroller::routing::optimisation#generate_optimisation_block()","rails::secretkeygenerator#generate_secret()","activerecord::attributemethods::classmethods#generated_methods?()","actioncontroller::routing::optimisation::optimiser#generation_code()","actioncontroller::routing::optimisation::positionalarguments#generation_code()","actioncontroller::routing::optimisation::positionalargumentswithadditionalparams#generation_code()","actioncontroller::integration::session#get()","actioncontroller::testprocess#get()","activeresource::connection#get()","activeresource::custommethods::get()","activeresource::custommethods::instancemethods#get()","i18n::backend::transliterator::get()","memcache#get()","tzinfo::timezone::get()","actioncontroller::request#get?()","memcache#get_multi()","tzinfo::timezone::get_proxy()","memcache#get_server_for_key()","actioncontroller::integration::session#get_via_redirect()","activesupport::timewithzone#getgm()","activesupport::timewithzone#getlocal()","memcache#gets()","i18n::gettext::helpers#gettext()","activesupport::coreextensions::datetime::calculations#getutc()","activesupport::timewithzone#getutc()","activesupport::coreextensions::numeric::bytes#gigabyte()","activesupport::coreextensions::numeric::bytes#gigabytes()","plugin#git_url?()","activesupport::timewithzone#gmt?()","activesupport::timewithzone#gmt_offset()","activesupport::timewithzone#gmtime()","activesupport::timewithzone#gmtoff()","builder::css#group!()","enumerable#group_by()","actionview::helpers::formbuilder#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_options_for_select()","rails::generator::commands::base#gsub_file()","actioncontroller::routing::optimisation::optimiser#guard_conditions()","actioncontroller::routing::optimisation::positionalarguments#guard_conditions()","actioncontroller::routing::optimisation::positionalargumentswithadditionalparams#guard_conditions()","erb::util::h()","actioncontroller::httpauthentication::digest#ha1()","memcache#handle_error()","i18n::backend::interpolationcompiler::compiler#handle_interpolation_token()","actioncontroller::requestforgeryprotection#handle_unverified_request()","activesupport::rescuable#handler_for_rescue()","activerecord::associations::classmethods#has_and_belongs_to_many()","activerecord::base#has_attribute?()","activerecord::connectionadapters::column#has_default?()","actioncontroller::session::abstractstore::sessionhash#has_key?()","hashwithindifferentaccess#has_key?()","activerecord::associations::classmethods#has_many()","activerecord::associations::classmethods#has_one()","activerecord::base#hash()","activeresource::base#hash()","activesupport::callbacks::callback#hash()","activesupport::timewithzone#hash()","tzinfo::timezone#hash()","tzinfo::timezoneperiod#hash()","memcache#hash_for()","actioncontroller::base#head()","actioncontroller::integration::session#head()","actioncontroller::testprocess#head()","activeresource::connection#head()","actioncontroller::request#head?()","actioncontroller::request#headers()","activeresource::base::headers()","actioncontroller::helpers::classmethods#helper()","object#helper()","actioncontroller::helpers::classmethods#helper_attr()","actionview::testcase::helper_class()","actioncontroller::helpers::classmethods#helper_method()","actionview::testcase::helper_method()","actioncontroller::helpers::classmethods#helpers()","activesupport::securerandom::hex()","activesupport::okjson#hexdec4()","actioncontroller::base::hidden_actions()","actionview::helpers::formhelper#hidden_field()","actionview::helpers::formtaghelper#hidden_field_tag()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#hide()","blankslate::hide()","blankslate::hide()","actioncontroller::base::hide_action()","actionview::helpers::texthelper#highlight()","actioncontroller::request#host()","actioncontroller::integration::session#host!()","actioncontroller::request#host_with_port()","activesupport::coreextensions::numeric::time#hour()","activesupport::coreextensions::numeric::time#hours()","mime::type#html?()","actioncontroller::testprocess#html_document()","erb::util::html_escape()","activesupport::safebuffer#html_safe()","string#html_safe()","activesupport::safebuffer#html_safe?()","fixnum#html_safe?()","object#html_safe?()","string#html_safe?()","cgi::cookie#http_only=()","activesupport::timewithzone#httpdate()","actioncontroller::integration::session#https!()","actioncontroller::integration::session#https?()","activesupport::inflector::inflections#human()","activerecord::base::human_attribute_name()","activerecord::base::human_name()","activerecord::connectionadapters::column#human_name()","activesupport::coreextensions::string::inflections#humanize()","activesupport::inflector#humanize()","activerecord::base#id()","activeresource::base#id()","nilclass#id()","builder::css#id!()","activerecord::base#id=()","activeresource::base#id=()","activeresource::base#id_from_response()","rails::generator::commands::create#identical?()","tzinfo::timezone#identifier()","fixtures::identify()","actioncontroller::request#if_modified_since()","actioncontroller::request#if_none_match()","actionview::helpers::assettaghelper#image_path()","actionview::helpers::formtaghelper#image_submit_tag()","actionview::helpers::assettaghelper#image_tag()","i18n::locale::tag::implementation()","i18n::locale::tag::implementation=()","activesupport::coreextensions::date::calculations#in()","activesupport::coreextensions::datetime::calculations#in()","activesupport::coreextensions::time::calculations#in()","activesupport::multibyte::chars::in_char_class?()","activerecord::connectionadapters::databaselimits#in_clause_length()","activesupport::coreextensions::array::grouping#in_groups()","activesupport::coreextensions::array::grouping#in_groups_of()","activesupport::coreextensions::time::zones#in_time_zone()","activesupport::timewithzone#in_time_zone()","actionview::base::proxymodule#include()","activesupport::multibyte::chars#include?()","hashwithindifferentaccess#include?()","activesupport::coreextensions::range::includerange#include_with_range?()","actioncontroller::cgiext::stdinput::included()","actioncontroller::cookies::included()","actioncontroller::flash::included()","actioncontroller::requestforgeryprotection::included()","actioncontroller::testcase::raiseactionexceptions::included()","actioncontroller::testprocess::included()","actioncontroller::uploadedfile::included()","actionview::templatehandlers::compilable::included()","activerecord::autosaveassociation::included()","activerecord::connectionadapters::querycache::included()","activerecord::dirty::included()","activerecord::namedscope::included()","activerecord::serialization::included()","activerecord::testfixtures::included()","activerecord::transactions::included()","activeresource::custommethods::included()","activesupport::callbacks::included()","activesupport::coreextensions::hash::conversions::included()","activesupport::memoizable::instancemethods::included()","activesupport::testing::performance::included()","activesupport::testing::setupandteardown::included()","i18n::backend::metadata::included()","racklintpatch::allowstringsubclass::included()","rails::generator::commands::included()","rails::generator::lookup::included()","rails::generator::options::included()","module#included_in_classes()","memcache#incr()","activerecord::base#increment()","activesupport::cache::store#increment()","activesupport::cache::strategy::localcache#increment()","activesupport::cache::synchronizedmemorystore#increment()","activerecord::base#increment!()","activerecord::base::increment_counter()","activerecord::connectionadapters::abstractadapter#increment_open_transactions()","activerecord::connectionadapters::table#index()","activesupport::multibyte::chars#index()","enumerable#index_by()","activerecord::connectionadapters::schemastatements#index_exists?()","activerecord::connectionadapters::databaselimits#index_name_length()","activerecord::connectionadapters::postgresqladapter#index_name_length()","activerecord::connectionadapters::postgresqladapter#indexes()","activerecord::connectionadapters::databaselimits#indexes_per_table()","activesupport::inflector#inflections()","actioncontroller::routing#inflections_with_route_reloading()","plugin#info()","activerecord::base::inheritance_column()","activerecord::base::inheritance_column=()","activerecord::observing::classmethods#inherited()","rails::generator::options::classmethods#inherited_with_options()","rails::gemplugin#init_path()","i18n::backend::simple::implementation#init_translations()","rails::initializer#initialize_cache()","rails::initializer#initialize_database()","rails::initializer#initialize_database_middleware()","rails::initializer#initialize_dependency_mechanism()","rails::initializer#initialize_encoding()","rails::initializer#initialize_framework_caches()","rails::initializer#initialize_framework_logging()","rails::initializer#initialize_framework_settings()","rails::initializer#initialize_framework_views()","rails::initializer#initialize_i18n()","rails::initializer#initialize_logger()","rails::initializer#initialize_metal()","cgi::queryextension#initialize_query()","rails::initializer#initialize_routing()","activerecord::connectionadapters::schemastatements#initialize_schema_migrations_table()","rails::initializer#initialize_time_zone()","rails::initializer#initialize_whiny_nils()","actioncontroller::cgiext::stdinput#initialize_with_stdinput()","actionview::base#initialize_without_template_tracking()","rails::initialized=()","i18n::backend::simple::implementation#initialized?()","rails::initialized?()","actionview::helpers::activerecordhelper#input()","actioncontroller::middlewarestack#insert()","activerecord::connectionadapters::databasestatements#insert()","activerecord::connectionadapters::postgresqladapter#insert()","activesupport::multibyte::chars#insert()","actioncontroller::middlewarestack#insert_after()","actioncontroller::middlewarestack#insert_before()","activerecord::connectionadapters::databasestatements#insert_fixture()","fixtures#insert_fixtures()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#insert_html()","activerecord::connectionadapters::databasestatements#insert_sql()","actioncontroller::middlewarestack::middleware#inspect()","actioncontroller::session::abstractstore::sessionhash#inspect()","activerecord::base::inspect()","activerecord::base#inspect()","activesupport::timewithzone#inspect()","continuum::entry#inspect()","memcache#inspect()","memcache::server#inspect()","tzinfo::timezone#inspect()","tzinfo::timezoneperiod#inspect()","plugin#install()","rails::gemdependency#install()","railsenvironment#install()","rails::initializer#install_gem_spec_stubs()","railsfcgihandler#install_signal_handler()","railsfcgihandler#install_signal_handlers()","plugin#installed?()","rails::gemdependency#installed?()","rails::generator::commands::instance()","rails::generator::lookup#instance()","rails::generator::lookup::classmethods#instance()","repositories::instance()","object#instance_exec()","activerecord::attributemethods::classmethods#instance_method_already_implemented?()","object#instance_variable_defined?()","object#instance_variable_names()","fixtures::instantiate_all_loaded_fixtures()","fixtures::instantiate_fixtures()","activerecord::observing::classmethods#instantiate_observers()","activerecord::dynamicfindermatch#instantiator?()","builder::xmlmarkup#instruct!()","i18n::backend::base#interpolate()","i18n::backend::interpolationcompiler#interpolate()","i18n::backend::metadata#interpolate()","i18n::backend::interpolationcompiler::compiler#interpolate_key()","i18n::backend::base#interpolate_lambda?()","i18n::backend::interpolationcompiler::compiler#interpolate_or_raise_missing()","string#interpolate_without_ruby_19_syntax()","i18n::backend::interpolationcompiler::compiler#interpolated_str?()","i18n::backend::activerecord::translation#interpolates?()","actioncontroller::routing::optionalformatsegment#interpolation_chunk()","activerecord::errors#invalid?()","activerecord::validations#invalid?()","activeresource::errors#invalid?()","rails::generator::commands::base#invoke!()","rails::generator::commands::rewindbase#invoke!()","activesupport::inflector::inflections#irregular()","activesupport::timewithzone#is_a?()","activesupport::coreextensions::string::multibyte#is_utf8?()","activesupport::timewithzone#isdst()","activesupport::timewithzone#iso8601()","erb::util::j()","actionview::helpers::assettaghelper#javascript_include_tag()","actionview::helpers::assettaghelper#javascript_path()","actionview::helpers::javascripthelper#javascript_tag()","activerecord::connectionadapters::databaselimits#joins_per_query()","erb::util::json_escape()","actioncontroller::flash::flashhash#keep()","actioncontroller::request#key?()","hashwithindifferentaccess#key?()","activesupport::okjson#keyenc()","activesupport::coreextensions::numeric::bytes#kilobyte()","activesupport::coreextensions::numeric::bytes#kilobytes()","activesupport::timewithzone#kind_of?()","actioncontroller::middlewarestack::middleware#klass()","activerecord::connectionadapters::column#klass()","activerecord::reflection::macroreflection#klass()","rails::generator::spec#klass()","actioncontroller::translation#l()","actionview::helpers::translationhelper#l()","i18n::l()","actionview::helpers::formhelper#label()","actionview::helpers::formtaghelper#label_tag()","activerecord::base::last()","activerecord::namedscope::scope#last()","activesupport::coreextensions::string::access#last()","actioncontroller::response#last_modified()","actioncontroller::response#last_modified=()","actioncontroller::response#last_modified?()","actioncontroller::layout::classmethods#layout()","activerecord::errors#length()","activeresource::errors#length()","activesupport::multibyte::chars#length()","activesupport::okjson#lex()","activerecord::connectionadapters::databasestatements#limited_update_conditions()","activerecord::connectionadapters::mysqladapter#limited_update_conditions()","actionview::helpers::urlhelper#link_to()","actionview::helpers::javascripthelper#link_to_function()","actionview::helpers::urlhelper#link_to_if()","actionview::helpers::prototypehelper#link_to_remote()","actionview::helpers::urlhelper#link_to_unless()","actionview::helpers::urlhelper#link_to_unless_current()","i18n::backend::flatten#links()","recursivehttpfetcher#links()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#literal()","activesupport::multibyte::chars#ljust()","activeresource::base#load()","activesupport::multibyte::unicodedatabase#load()","rails::gemdependency#load()","rails::plugin#load()","actionview::reloadabletemplate::reloadablepath#load!()","actionview::template#load!()","actionview::template::eagerpath#load!()","actionview::template::path#load!()","repositories#load!()","rails::initializer#load_application_classes()","rails::initializer#load_application_initializers()","activeresource::base#load_attributes_from_response()","rails::initializer#load_environment()","i18n::backend::base#load_file()","rails::initializer#load_gems()","rails::initializer#load_observers()","rails::configuration#load_once_paths()","rails::configuration#load_once_paths=()","i18n::config#load_path()","i18n::config#load_path=()","rails::configuration#load_paths()","rails::plugin#load_paths()","rails::configuration#load_paths=()","rails::gemdependency#load_paths_added?()","rails::initializer#load_plugins()","i18n::backend::gettext#load_po()","i18n::backend::base#load_rb()","rails::vendorgemsourceindex#load_specification()","i18n::backend::base#load_translations()","rails::initializer#load_view_paths()","i18n::backend::base#load_yml()","actioncontroller::session::abstractstore::sessionhash#loaded?()","activerecord::sessionstore::session#loaded?()","activerecord::sessionstore::sqlbypass#loaded?()","rails::gemdependency#loaded?()","rails::plugin#loaded?()","activesupport::timezone#local()","tzinfo::timezoneperiod#local_after_start?()","tzinfo::timezoneperiod#local_before_end?()","activesupport::coreextensions::module#local_constant_names()","activesupport::coreextensions::module#local_constants()","tzinfo::timezoneperiod#local_end()","activesupport::coreextensions::datetime::calculations::classmethods#local_offset()","actioncontroller::rescue#local_request?()","tzinfo::timezoneperiod#local_start()","activesupport::coreextensions::time::calculations::classmethods#local_time()","activesupport::timezone#local_to_utc()","tzinfo::timezone#local_to_utc()","i18n::config#locale()","i18n::config#locale=()","rails::plugin#locale_files()","rails::plugin#locale_path()","actioncontroller::translation#localize()","actionview::helpers::translationhelper#localize()","i18n::localize()","i18n::backend::base#localize()","i18n::backend::chain#localize()","i18n::backend::cldr#localize()","rails::plugin#localized?()","activesupport::timewithzone#localtime()","actioncontroller::response#location()","actioncontroller::response#location=()","activerecord::locking::pessimistic#lock!()","activerecord::locking::optimistic::classmethods#locking_column()","activerecord::locking::optimistic::classmethods#locking_enabled?()","activerecord::connectionadapters::abstractadapter#log()","actioncontroller::rescue#log_error()","activerecord::connectionadapters::abstractadapter#log_info()","activeresource::base::logger()","rails::logger()","railsfcgihandler#logger()","i18n::backend::activerecord::implementation#lookup()","i18n::backend::base#lookup()","i18n::backend::cascade#lookup()","i18n::backend::keyvalue::implementation#lookup()","i18n::backend::memoize#lookup()","i18n::backend::simple::implementation#lookup()","mime::type::lookup()","rails::generator::lookup::classmethods#lookup()","mime::type::lookup_by_extension()","i18n::backend::cldr#lookup_currency()","i18n::backend::cldr#lookup_format()","i18n::backend::cldr#lookup_format_data()","object::lookup_missing_generator()","activesupport::cache::lookup_store()","recursivehttpfetcher#ls()","activesupport::multibyte::chars#lstrip()","activerecord::reflection::macroreflection#macro()","actionview::helpers::urlhelper#mail_to()","actionmailer::base::mailer_name()","actionmailer::base#mailer_name()","actionmailer::base#mailer_name=()","memcache#make_cache_key()","rails::generator::options#mandatory_options()","rails::generator::options::classmethods#mandatory_options()","rails::generator::base#manifest()","enumerable#many?()","i18n::locale::fallbacks#map()","memcache::server#mark_dead()","railsfcgihandler#mark_features!()","activerecord::autosaveassociation#mark_for_destruction()","actionview::helpers::texthelper#markdown()","activerecord::autosaveassociation#marked_for_destruction?()","activerecord::sessionstore::session::marshal()","activerecord::sessionstore::sqlbypass::marshal()","activesupport::timewithzone#marshal_dump()","activesupport::timewithzone#marshal_load()","activerecord::dynamicfindermatch::match()","activerecord::dynamicscopematch::match()","html::selector#match()","i18n::locale::tag::rfc4646::parser::match()","activerecord::attributemethods::classmethods#match_attribute_method?()","actioncontroller::routing::optionalformatsegment#match_extraction()","module#mattr_accessor()","module#mattr_reader()","module#mattr_writer()","activerecord::calculations::classmethods#maximum()","activesupport::coreextensions::string::multibyte#mb_chars()","activesupport::testing::performance::metrics::base#measure()","activesupport::testing::performance::metrics::cputime#measure()","activesupport::testing::performance::metrics::gcruns#measure()","activesupport::testing::performance::metrics::gctime#measure()","activesupport::testing::performance::metrics::memory#measure()","activesupport::testing::performance::metrics::objects#measure()","activesupport::testing::performance::metrics::processtime#measure()","activesupport::testing::performance::metrics::time#measure()","activesupport::testing::performance::metrics::walltime#measure()","activesupport::testing::performance::metrics::base#measure_mode()","actioncontroller::request#media_type()","activesupport::coreextensions::numeric::bytes#megabyte()","activesupport::coreextensions::numeric::bytes#megabytes()","hashwithindifferentaccess#member?()","activesupport::memoizable#memoize()","activesupport::memoizable::instancemethods#memoize_all()","activesupport::memoizable::memoized_ivar_for()","i18n::backend::memoize#memoized_lookup()","hashwithindifferentaccess#merge()","hashwithindifferentaccess#merge!()","activerecord::base::merge_conditions()","object#metaclass()","rails::plugin#metal_path()","actioncontroller::request#method()","kernel::method_added()","object::method_added()","actioncontroller::integration::runner#method_missing()","actioncontroller::reloader::bodywrapper#method_missing()","actioncontroller::testprocess#method_missing()","activerecord::connectionadapters::tabledefinition#method_missing()","activerecord::migration::method_missing()","activesupport::multibyte::chars#method_missing()","activesupport::stringinquirer#method_missing()","activesupport::timewithzone#method_missing()","builder::css#method_missing()","builder::xmlbase#method_missing()","rails::generator::manifest#method_missing()","actionview::helpers::prototypehelper#method_option_to_s()","actionview::template#method_segment()","activerecord::connectionadapters::column::microseconds()","activesupport::cache::strategy::localcache#middleware()","rails::configuration#middleware()","activesupport::coreextensions::date::calculations#midnight()","activesupport::coreextensions::datetime::calculations#midnight()","activesupport::coreextensions::time::calculations#midnight()","activerecord::migration::migrate()","rails::generator::commands::base#migration_directory()","rails::generator::commands::base#migration_exists?()","rails::generator::commands::create#migration_template()","rails::generator::commands::destroy#migration_template()","rails::generator::commands::list#migration_template()","activerecord::schema::migrations_path()","actionview::template#mime_type()","activeresource::formats::jsonformat#mime_type()","activeresource::formats::xmlformat#mime_type()","activerecord::calculations::classmethods#minimum()","activesupport::coreextensions::time::calculations#minus_with_coercion()","activesupport::coreextensions::numeric::time#minute()","activesupport::coreextensions::numeric::time#minutes()","i18n::backend::interpolationcompiler::compiler#missing_key()","activesupport::coreextensions::module#model_name()","activesupport::coreextensions::date::calculations#monday()","activesupport::coreextensions::time::calculations#monday()","activesupport::coreextensions::float::time#month()","activesupport::coreextensions::integer::time#month()","activesupport::coreextensions::float::time#months()","activesupport::coreextensions::integer::time#months()","activesupport::coreextensions::date::calculations#months_ago()","activesupport::coreextensions::time::calculations#months_ago()","activesupport::coreextensions::date::calculations#months_since()","activesupport::coreextensions::time::calculations#months_since()","activesupport::coreextensions::float::time#months_without_deprecation()","benchmark::ms()","actionview::reloadabletemplate#mtime()","actionview::template#multipart?()","activesupport::coreextensions::integer::evenodd#multiple_of?()","activesupport::cache::store#mute()","i18n::gettext::helpers#n_()","activerecord::reflection::macroreflection#name()","activesupport::testing::performance::metrics::base#name()","tzinfo::timezone#name()","activerecord::namedscope::classmethods#named_scope()","rails::generator::source#names()","actioncontroller::routing::routeset::mapper#namespace()","i18n::backend::chain#namespace_lookup?()","activerecord::connectionadapters::schemastatements#native_database_types()","actioncontroller::assertions::selectorassertions::new()","actioncontroller::caching::actions::actioncachepath::new()","actioncontroller::dispatcher::new()","actioncontroller::failsafe::new()","actioncontroller::http::headers::new()","actioncontroller::integration::runner::new()","actioncontroller::integration::session::new()","actioncontroller::middlewarestack::new()","actioncontroller::middlewarestack::middleware::new()","actioncontroller::middlewarestack::middleware::new()","actioncontroller::paramsparser::new()","actioncontroller::reloader::bodywrapper::new()","actioncontroller::response::new()","actioncontroller::routing::optimisation::optimiser::new()","actioncontroller::routing::optionalformatsegment::new()","actioncontroller::session::abstractstore::new()","actioncontroller::session::abstractstore::optionshash::new()","actioncontroller::session::abstractstore::sessionhash::new()","actioncontroller::session::cookiestore::new()","actioncontroller::session::memcachestore::new()","actioncontroller::stringcoercion::new()","actioncontroller::stringcoercion::uglybody::new()","actioncontroller::testcase::new()","actioncontroller::testuploadedfile::new()","actionview::base::new()","actionview::base::proxymodule::new()","actionview::helpers::atomfeedhelper::atombuilder::new()","actionview::helpers::atomfeedhelper::atomfeedbuilder::new()","actionview::reloadabletemplate::new()","actionview::reloadabletemplate::reloadablepath::new()","actionview::template::new()","actionview::template::eagerpath::new()","actionview::template::path::new()","actionview::templatehandler::new()","actionview::testcase::testcontroller::new()","activerecord::attributeassignmenterror::new()","activerecord::base::new()","activerecord::connectionadapters::column::new()","activerecord::connectionadapters::connectionhandler::new()","activerecord::connectionadapters::connectionmanagement::new()","activerecord::connectionadapters::connectionpool::new()","activerecord::connectionadapters::mysqladapter::new()","activerecord::connectionadapters::postgresqladapter::new()","activerecord::connectionadapters::sqliteadapter::new()","activerecord::connectionadapters::sqliteadapter::version::new()","activerecord::connectionadapters::table::new()","activerecord::connectionadapters::tabledefinition::new()","activerecord::dynamicfindermatch::new()","activerecord::dynamicscopematch::new()","activerecord::error::new()","activerecord::multiparameterassignmenterrors::new()","activerecord::namedscope::scope::new()","activerecord::observer::new()","activerecord::querycache::new()","activerecord::recordinvalid::new()","activerecord::reflection::macroreflection::new()","activerecord::sessionstore::sqlbypass::new()","activeresource::base::new()","activeresource::connection::new()","activeresource::request::new()","activeresource::response::new()","activeresource::sslerror::new()","activeresource::timeouterror::new()","activesupport::backtracecleaner::new()","activesupport::bufferedlogger::new()","activesupport::cache::filestore::new()","activesupport::cache::memcachestore::new()","activesupport::cache::memorystore::new()","activesupport::cache::synchronizedmemorystore::new()","activesupport::callbacks::callback::new()","activesupport::deprecation::deprecatedobjectproxy::new()","activesupport::inflector::inflections::new()","activesupport::messageencryptor::new()","activesupport::messageverifier::new()","activesupport::modelname::new()","activesupport::multibyte::chars::new()","activesupport::multibyte::unicodedatabase::new()","activesupport::testing::performance::metrics::base::new()","activesupport::testing::performance::metrics::cputime::new()","activesupport::testing::performance::performer::new()","activesupport::testing::performance::profiler::new()","activesupport::timewithzone::new()","activesupport::timezone::new()","activesupport::timezone::new()","builder::css::new()","builder::xmlbase::new()","builder::xmlmarkup::new()","cgi::cookie::new()","commands::discover::new()","commands::info::new()","commands::install::new()","commands::list::new()","commands::plugin::new()","commands::remove::new()","commands::source::new()","commands::sources::new()","commands::unsource::new()","commands::update::new()","continuum::entry::new()","fixtures::new()","html::selector::new()","hashwithindifferentaccess::new()","i18n::backend::chain::new()","i18n::backend::keyvalue::implementation::new()","i18n::backend::transliterator::hashtransliterator::new()","i18n::backend::transliterator::proctransliterator::new()","i18n::invalidlocale::new()","i18n::invalidpluralizationdata::new()","i18n::locale::fallbacks::new()","i18n::locale::tag::simple::new()","i18n::missinginterpolationargument::new()","i18n::missingtranslationdata::new()","i18n::reservedinterpolationkey::new()","i18n::unknownfiletype::new()","keyerror::new()","logger::formatter::new()","memcache::new()","memcache::server::new()","mime::type::new()","plugin::new()","rails::backtracecleaner::new()","rails::configuration::new()","rails::gembuilder::new()","rails::gemdependency::new()","rails::gemplugin::new()","rails::generator::abstractgemsource::new()","rails::generator::base::new()","rails::generator::generatedattribute::new()","rails::generator::manifest::new()","rails::generator::namedbase::new()","rails::generator::pathsource::new()","rails::generator::source::new()","rails::generator::spec::new()","rails::initializer::new()","rails::plugin::new()","rails::secretkeygenerator::new()","rails::vendorgemsourceindex::new()","railsenvironment::new()","railsfcgihandler::new()","recursivehttpfetcher::new()","repositories::new()","repository::new()","sourceannotationextractor::new()","tzinfo::timezone::new()","tzinfo::timezoneperiod::new()","activeresource::base#new?()","actionview::template::path::new_and_loaded()","activerecord::connectionadapters::column::new_date()","activerecord::base#new_record?()","activerecord::sessionstore::sqlbypass#new_record?()","activeresource::base#new_record?()","actionview::reloadabletemplate::reloadablepath#new_request!()","object#new_session()","activerecord::connectionadapters::column::new_time()","html::selector#next_element()","rails::generator::commands::base#next_migration_number()","rails::generator::commands::base#next_migration_string()","activesupport::coreextensions::date::calculations#next_month()","activesupport::coreextensions::time::calculations#next_month()","html::selector#next_selector()","activesupport::coreextensions::date::calculations#next_week()","activesupport::coreextensions::time::calculations#next_week()","activesupport::coreextensions::date::calculations#next_year()","activesupport::coreextensions::time::calculations#next_year()","i18n::gettext::helpers#ngettext()","activesupport::okjson#nibble()","builder::css#nil?()","builder::xmlbase#nil?()","i18n::backend::interpolationcompiler::compiler#nil_key()","actioncontroller::httpauthentication::digest#nonce()","enumerable#none?()","memcache#noreply()","activesupport::multibyte::chars#normalize()","i18n::backend::gettext#normalize()","i18n::backend::flatten::normalize_flat_keys()","i18n::backend::flatten#normalize_flat_keys()","i18n::normalize_keys()","actioncontroller::routing::normalize_paths()","i18n::backend::gettext#normalize_pluralization()","i18n::normalize_translation_keys()","actioncontroller::request#not_modified?()","actioncontroller::flash::flashhash#now()","activesupport::timezone#now()","tzinfo::timezone#now()","i18n::gettext::helpers#np_()","i18n::gettext::helpers#npgettext()","i18n::gettext::helpers#ns_()","i18n::gettext::helpers#nsgettext()","html::selector#nth_child()","activesupport::okjson#nulltok()","activerecord::connectionadapters::column#number?()","actionview::helpers::numberhelper#number_to_currency()","actionview::helpers::numberhelper#number_to_human_size()","actionview::helpers::numberhelper#number_to_percentage()","actionview::helpers::numberhelper#number_to_phone()","actionview::helpers::numberhelper#number_with_delimiter()","actionview::helpers::numberhelper#number_with_precision()","activesupport::okjson#numenc()","activesupport::okjson#numtok()","activesupport::okjson#objenc()","activesupport::okjson#objparse()","activerecord::observer::observe()","actionview::helpers::prototypehelper#observe_field()","actionview::helpers::prototypehelper#observe_form()","activerecord::observer::observed_class()","activerecord::observer#observed_classes()","activerecord::observer#observed_subclasses()","activerecord::observing::classmethods#observers()","activerecord::observing::classmethods#observers=()","activesupport::coreextensions::integer::evenodd#odd?()","logger#old_datetime_format()","logger#old_datetime_format=()","logger#old_formatter()","activerecord::errors#on()","activeresource::errors#on()","activerecord::errors#on_base()","activeresource::errors#on_base()","activesupport::xmlmini_libxmlsax::hashbuilder#on_cdata_block()","activesupport::xmlmini_libxmlsax::hashbuilder#on_characters()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_element()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_element()","html::selector#only_child()","actioncontroller::httpauthentication::digest#opaque()","actioncontroller::integration::runner#open_session()","activerecord::connectionadapters::abstractadapter#open_transactions()","actionview::helpers::formoptionshelper#option_groups_from_collection_for_select()","activerecord::reflection::macroreflection#options()","commands::discover#options()","commands::info#options()","commands::install#options()","commands::list#options()","commands::plugin#options()","commands::remove#options()","commands::source#options()","commands::sources#options()","commands::unsource#options()","commands::update#options()","rails::generator::options#options()","actionview::helpers::prototypehelper#options_for_ajax()","actionview::helpers::javascripthelper#options_for_javascript()","actionview::helpers::formoptionshelper#options_for_select()","actionview::helpers::formoptionshelper#options_from_collection_for_select()","activerecord::connectionadapters::schemastatements#options_include_default?()","activesupport::coreextensions::string::conversions#ord()","activesupport::multibyte::chars#ord()","activesupport::coreextensions::integer::inflections#ordinalize()","activesupport::inflector#ordinalize()","activeresource::custommethods::orig_delete()","actioncontroller::uploadedfile#original_filename()","string#original_xs()","activesupport::testing::performance::benchmarker#output_filename()","activesupport::testing::performance::performer#output_filename()","activesupport::testing::performance::profiler#output_filename()","activerecord::connectionadapters::databasestatements#outside_transaction?()","activerecord::connectionadapters::postgresqladapter#outside_transaction?()","activesupport::coreextensions::range::overlaps#overlaps?()","i18n::gettext::helpers#p_()","activesupport::okjson#pairparse()","activesupport::coreextensions::string::inflections#parameterize()","activesupport::inflector#parameterize()","actioncontroller::request#parameters()","actioncontroller::request#params()","activesupport::coreextensions::module#parent()","i18n::locale::tag::parents#parent()","activesupport::coreextensions::module#parent_name()","activesupport::coreextensions::module#parents()","i18n::locale::tag::parents#parents()","activesupport::timezone#parse()","activesupport::xmlmini_libxmlsax#parse()","activesupport::xmlmini_nokogirisax#parse()","cgi::cookie::parse()","i18n::backend::gettext#parse()","mime::type::parse()","commands::discover#parse!()","commands::info#parse!()","commands::install#parse!()","commands::list#parse!()","commands::plugin::parse!()","commands::plugin#parse!()","commands::remove#parse!()","commands::source#parse!()","commands::sources#parse!()","commands::unsource#parse!()","commands::update#parse!()","rails::generator::options#parse!()","actioncontroller::request#parse_query()","i18n::locale::tag::rfc4646::parser()","i18n::locale::tag::rfc4646::parser=()","actioncontroller::recordidentifier#partial_path()","actionview::helpers::recordidentificationhelper#partial_path()","activeresource::base::password()","activeresource::base::password=()","activeresource::connection#password=()","actionview::helpers::formhelper#password_field()","actionview::helpers::formtaghelper#password_field_tag()","activesupport::coreextensions::date::calculations#past?()","activesupport::coreextensions::datetime::calculations#past?()","activesupport::coreextensions::time::calculations#past?()","activesupport::timewithzone#past?()","actioncontroller::request#path()","actionview::template#path()","actioncontroller::caching::actions::actioncachepath::path_for()","actioncontroller::request#path_parameters()","actionview::helpers::assettaghelper#path_to_image()","actionview::helpers::assettaghelper#path_to_javascript()","actionview::helpers::assettaghelper#path_to_stylesheet()","actionview::template#path_without_extension()","actionview::template#path_without_format_and_extension()","i18n::perform_caching?()","activesupport::timewithzone#period()","activesupport::timezone#period_for_local()","tzinfo::timezone#period_for_local()","activesupport::timezone#period_for_utc()","tzinfo::timezone#period_for_utc()","actionview::helpers::prototypehelper#periodically_call_remote()","tzinfo::timezone#periods_for_local()","activesupport::coreextensions::numeric::bytes#petabyte()","activesupport::coreextensions::numeric::bytes#petabytes()","i18n::gettext::helpers#pgettext()","rails::initializer#plugin_loader()","rails::configuration#plugins=()","activesupport::inflector::inflections#plural()","actioncontroller::recordidentifier#plural_class_name()","i18n::gettext::plural_keys()","actionview::helpers::texthelper#pluralize()","activesupport::coreextensions::string::inflections#pluralize()","activesupport::inflector#pluralize()","i18n::backend::base#pluralize()","i18n::backend::metadata#pluralize()","i18n::backend::pluralization#pluralize()","activerecord::base::pluralize_table_names()","i18n::backend::pluralization#pluralizer()","i18n::backend::pluralization#pluralizers()","actioncontroller::polymorphicroutes#polymorphic_path()","actioncontroller::polymorphicroutes#polymorphic_url()","recursivehttpfetcher#pop_d()","actioncontroller::request#port()","actioncontroller::request#port_string()","actioncontroller::routing::possible_controllers()","actioncontroller::integration::session#post()","actioncontroller::testprocess#post()","activeresource::connection#post()","activeresource::custommethods::post()","activeresource::custommethods::instancemethods#post()","actioncontroller::request#post?()","actioncontroller::integration::session#post_via_redirect()","activerecord::connectionadapters::postgresqladapter#postgresql_version()","activerecord::connectionadapters::abstractadapter#prefetch_primary_key?()","activeresource::base::prefix()","activeresource::base::prefix=()","activeresource::base::prefix_source()","activerecord::associationpreload::classmethods#preload_associations()","rails::initializer#preload_frameworks()","actioncontroller::response#prepare!()","actioncontroller::testcase::prepare_controller_class()","rails::initializer#prepare_dispatcher()","memcache#prepend()","actioncontroller::filters::classmethods#prepend_after_filter()","actioncontroller::filters::classmethods#prepend_around_filter()","actioncontroller::filters::classmethods#prepend_before_filter()","rails::generator::lookup::classmethods#prepend_sources()","actioncontroller::base#prepend_view_path()","actioncontroller::base::prepend_view_path()","object#presence()","object#present?()","i18n::backend::base#preserve_encoding()","activesupport::coreextensions::date::calculations#prev_month()","activesupport::coreextensions::time::calculations#prev_month()","activesupport::coreextensions::date::calculations#prev_year()","activesupport::coreextensions::time::calculations#prev_year()","activerecord::base::primary_key()","activerecord::connectionadapters::mysqladapter#primary_key()","activerecord::connectionadapters::postgresqladapter#primary_key()","activerecord::connectionadapters::tabledefinition#primary_key()","activerecord::base::primary_key=()","activerecord::base::primary_key_prefix_type()","activesupport::memoizable::instancemethods#prime_cache()","actioncontroller::testprocess#process()","rails::initializer#process()","railsfcgihandler::process!()","railsfcgihandler#process!()","html::whitelistsanitizer#process_attributes_for()","railsfcgihandler#process_each_request()","html::fullsanitizer#process_node()","html::linksanitizer#process_node()","html::sanitizer#process_node()","html::whitelistsanitizer#process_node()","railsfcgihandler#process_request()","activesupport::testing::performance::metrics::base#profile()","actioncontroller::requestforgeryprotection#protect_against_forgery?()","actionview::testcase#protect_against_forgery?()","actioncontroller::requestforgeryprotection::classmethods#protect_from_forgery()","actioncontroller::request#protocol()","activeresource::base::proxy()","activeresource::base::proxy=()","activeresource::connection#proxy=()","activesupport::multibyte::proxy_class()","activesupport::multibyte::proxy_class=()","activerecord::namedscope::scope#proxy_found()","rails::public_path()","rails::public_path=()","recursivehttpfetcher#push_d()","actioncontroller::integration::session#put()","actioncontroller::testprocess#put()","activeresource::connection#put()","activeresource::custommethods::put()","activeresource::custommethods::instancemethods#put()","actioncontroller::request#put?()","actioncontroller::integration::session#put_via_redirect()","actioncontroller::request#query_parameters()","actioncontroller::request#query_string()","activerecord::connectionadapters::mysqladapter#quote()","activerecord::connectionadapters::quoting#quote()","activerecord::connectionadapters::quoting#quote_column_name()","activerecord::connectionadapters::quoting#quote_string()","activerecord::connectionadapters::abstractadapter#quote_table_name()","activerecord::connectionadapters::postgresqladapter#quote_table_name()","activerecord::connectionadapters::quoting#quote_table_name()","activerecord::connectionadapters::mysqladapter#quoted_columns_for_index()","activerecord::connectionadapters::schemastatements#quoted_columns_for_index()","activerecord::connectionadapters::quoting#quoted_date()","activerecord::connectionadapters::mysqladapter#quoted_false()","activerecord::connectionadapters::quoting#quoted_false()","activerecord::locking::optimistic::classmethods#quoted_locking_column()","activerecord::connectionadapters::mysqladapter#quoted_true()","activerecord::connectionadapters::quoting#quoted_true()","actionview::helpers::formhelper#radio_button()","actionview::helpers::formtaghelper#radio_button_tag()","activesupport::basicobject#raise()","memcache#raise_on_error_response!()","i18n::backend::cldr#raise_unspecified_currency!()","i18n::backend::cldr#raise_unspecified_format_type!()","activesupport::securerandom::random_bytes()","activesupport::securerandom::random_number()","actionview::helpers::rawoutputhelper#raw()","activerecord::connectionadapters::abstractadapter#raw_connection()","actioncontroller::request#raw_host_with_port()","actioncontroller::request#raw_post()","actioncontroller::cgihandler::properstream#read()","activesupport::cache::compressedmemcachestore#read()","activesupport::cache::filestore#read()","activesupport::cache::memorystore#read()","activesupport::cache::store#read()","activesupport::cache::strategy::localcache#read()","activesupport::cache::synchronizedmemorystore#read()","actioncontroller::caching::fragments#read_fragment()","activesupport::cache::memcachestore#read_multi()","activesupport::cache::memorystore#read_multi()","activesupport::coreextensions::date::conversions#readable_inspect()","activesupport::coreextensions::datetime::conversions#readable_inspect()","rails::generator::commands::base#readme()","rails::generator::commands::create#readme()","rails::generator::commands::list#readme()","activerecord::base#readonly!()","activerecord::base#readonly?()","memcache#readonly?()","activerecord::base::readonly_attributes()","benchmark::realtime()","actionmailer::base::receive()","actioncontroller::routing::routeset#recognize_path()","activerecord::connectionadapters::abstractadapter#reconnect!()","activerecord::connectionadapters::mysqladapter#reconnect!()","activerecord::connectionadapters::postgresqladapter#reconnect!()","activesupport::testing::performance::benchmarker#record()","activesupport::testing::performance::profiler#record()","rails::generator::base#record()","rexml::document#record_entity_expansion!()","actioncontroller::testresponse#recycle!()","actioncontroller::response#redirect()","actioncontroller::integration::session#redirect?()","actioncontroller::base#redirect_to()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#redirect_to()","actioncontroller::base#redirect_to_full_url()","actioncontroller::testprocess#redirect_to_url()","rails::generator::generatedattribute#reference?()","activerecord::connectionadapters::table#references()","activerecord::connectionadapters::tabledefinition#references()","activerecord::reflection::classmethods#reflect_on_aggregation()","activerecord::reflection::classmethods#reflect_on_all_aggregations()","activerecord::reflection::classmethods#reflect_on_all_associations()","activerecord::reflection::classmethods#reflect_on_all_autosave_associations()","activerecord::reflection::classmethods#reflect_on_association()","activerecord::reflection::classmethods#reflections()","rails::gemdependency#refresh()","rails::vendorgemsourceindex#refresh!()","actioncontroller::routing::optionalformatsegment#regexp_chunk()","mime::type::register()","mime::type::register_alias()","actionview::helpers::assettaghelper::register_javascript_expansion()","actionview::helpers::assettaghelper::register_javascript_include_default()","actionview::helpers::assettaghelper::register_stylesheet_expansion()","hashwithindifferentaccess#regular_update()","hashwithindifferentaccess#regular_writer()","actionview::template#relative_path()","activerecord::connectionadapters::connectionpool#release_connection()","activerecord::connectionadapters::abstractadapter#release_savepoint()","activerecord::connectionadapters::mysqladapter#release_savepoint()","activerecord::connectionadapters::postgresqladapter#release_savepoint()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#reload()","activerecord::base#reload()","activerecord::namedscope::scope#reload()","activeresource::base#reload()","i18n::reload!()","i18n::backend::base#reload!()","i18n::backend::chain#reload!()","i18n::backend::memoize#reload!()","i18n::backend::simple::implementation#reload!()","object#reload!()","railsfcgihandler#reload!()","actioncontroller::dispatcher::reload_application()","railsfcgihandler#reload_handler()","rails::configuration#reload_plugins?()","activerecord::autosaveassociation#reload_with_autosave_associations()","actionview::helpers::prototypehelper#remote_form_for()","actionview::helpers::prototypehelper#remote_function()","actioncontroller::request#remote_ip()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#remove()","activerecord::connectionadapters::table#remove()","repositories#remove()","activerecord::connectionadapters::table#remove_belongs_to()","activerecord::connectionadapters::schemastatements#remove_column()","activerecord::connectionadapters::schemastatements#remove_columns()","activerecord::base::remove_connection()","activerecord::connectionadapters::connectionhandler#remove_connection()","activerecord::connectionadapters::schemastatements#remove_index()","activerecord::connectionadapters::table#remove_index()","module#remove_possible_method()","activerecord::connectionadapters::table#remove_references()","activesupport::backtracecleaner#remove_silencers!()","rails::vendorgemsourceindex#remove_spec()","activerecord::connectionadapters::schemastatements#remove_timestamps()","activerecord::connectionadapters::table#remove_timestamps()","activerecord::connectionadapters::table#rename()","activerecord::connectionadapters::postgresqladapter#rename_column()","activerecord::connectionadapters::schemastatements#rename_column()","activerecord::connectionadapters::schemastatements#rename_index()","activesupport::coreextensions::hash::conversions#rename_key()","activerecord::connectionadapters::mysqladapter#rename_table()","activerecord::connectionadapters::postgresqladapter#rename_table()","activerecord::connectionadapters::sqliteadapter#rename_table()","activerecord::connectionadapters::schemastatements#rename_table()","actioncontroller::base#render()","actionview::renderable#render()","actionview::templatehandler#render()","actionview::testcase#render()","actioncontroller::rescue#render_optional_error_file()","actionview::template#render_template()","actioncontroller::base#render_to_string()","actionview::renderable#render_without_template_tracking()","activesupport::multibyte::chars::reorder_characters()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#replace()","memcache#replace()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#replace_html()","activesupport::callbacks::callbackchain#replace_or_append!()","rails::generator::manifest#replay()","activesupport::testing::performance::performer#report()","activesupport::testing::performance::profiler#report()","actioncontroller::httpauthentication::basic::controllermethods#request_http_basic_authentication()","actioncontroller::httpauthentication::digest::controllermethods#request_http_digest_authentication()","actioncontroller::request#request_method()","actioncontroller::request#request_parameters()","memcache#request_setup()","actioncontroller::request#request_uri()","actioncontroller::integration::session#request_via_redirect()","activeresource::connection::requests()","activeresource::httpmock::requests()","activerecord::testfixtures::classmethods#require_fixture_classes()","rails::initializer#require_frameworks()","kernel#require_library_or_gem()","activerecord::connectionadapters::abstractadapter#requires_reloading?()","activerecord::connectionadapters::sqliteadapter#requires_reloading?()","actioncontroller::rescue#rescue_action()","actioncontroller::rescue#rescue_action_in_public()","actioncontroller::testcase#rescue_action_in_public!()","actioncontroller::rescue#rescue_action_locally()","actioncontroller::rescue#rescue_action_without_handler()","actioncontroller::testcase::raiseactionexceptions#rescue_action_without_handler()","activesupport::rescuable::classmethods#rescue_from()","activesupport::rescuable#rescue_with_handler()","i18n::backend::interpolationcompiler::compiler#reserved_key()","memcache#reset()","actioncontroller::integration::runner#reset!()","actioncontroller::integration::session#reset!()","activerecord::connectionadapters::abstractadapter#reset!()","activerecord::connectionadapters::mysqladapter#reset!()","activeresource::httpmock::reset!()","fixtures::reset_cache()","actionview::reloadabletemplate#reset_cache_if_stale!()","activerecord::base::reset_column_information()","activerecord::base::reset_counters()","actionview::helpers::texthelper#reset_cycle()","activerecord::locking::optimistic::classmethods#reset_locking_column()","i18n::backend::memoize#reset_memoizations!()","activerecord::connectionadapters::databasestatements#reset_sequence!()","actioncontroller::base#reset_session()","actioncontroller::request#reset_session()","rails::generator::lookup::classmethods#reset_sources()","i18n::backend::base#resolve()","i18n::backend::flatten#resolve_link()","actioncontroller::resources#resource()","actioncontroller::resources#resources()","actioncontroller::mimeresponds::instancemethods#respond_to()","activeresource::httpmock::respond_to()","actioncontroller::reloader::bodywrapper#respond_to?()","activerecord::base::respond_to?()","activerecord::namedscope::scope#respond_to?()","activeresource::base#respond_to?()","activesupport::multibyte::chars#respond_to?()","activesupport::timewithzone#respond_to?()","cgi::cookie#respond_to?()","activeresource::base#respond_to_without_attributes?()","actioncontroller::assertions::selectorassertions#response_from_page_or_rjs()","activeresource::httpmock::responses()","railsfcgihandler#restart!()","railsfcgihandler#restart_handler()","railsfcgihandler#restore!()","activerecord::base::retrieve_connection()","activerecord::connectionadapters::connectionhandler#retrieve_connection_pool()","object#returning()","blankslate::reveal()","blankslate::reveal()","activesupport::multibyte::chars#reverse()","activesupport::coreextensions::hash::reversemerge#reverse_merge()","hashwithindifferentaccess#reverse_merge()","activesupport::coreextensions::hash::reversemerge#reverse_merge!()","activesupport::coreextensions::hash::reversemerge#reverse_update()","rails::generator::manifest#rewind()","activesupport::timewithzone#rfc2822()","activesupport::timewithzone#rfc822()","activesupport::multibyte::chars#rindex()","activesupport::multibyte::chars#rjust()","activerecord::transactions#rollback_active_record_state!()","activerecord::connectionadapters::databasestatements#rollback_db_transaction()","activerecord::connectionadapters::postgresqladapter#rollback_db_transaction()","activerecord::connectionadapters::abstractadapter#rollback_to_savepoint()","activerecord::connectionadapters::mysqladapter#rollback_to_savepoint()","activerecord::connectionadapters::postgresqladapter#rollback_to_savepoint()","actioncontroller::routing::routeset::mapper#root()","rails::root()","activesupport::coreextensions::float::rounding#round_with_precision()","rails::generator::commands::create#route_resources()","rails::generator::commands::destroy#route_resources()","rails::generator::commands::list#route_resources()","rails::plugin#routed?()","rails::plugin#routing_file()","activesupport::multibyte::chars#rstrip()","actioncontroller::reloader::run()","activesupport::callbacks::callbackchain#run()","activesupport::testing::performance#run()","activesupport::testing::performance::benchmarker#run()","activesupport::testing::performance::profiler#run()","activesupport::testing::setupandteardown::forclassictestunit#run()","activesupport::testing::setupandteardown::forminitest#run()","rails::generator::scripts::base#run()","rails::initializer::run()","activesupport::callbacks#run_callbacks()","railsfcgihandler#run_gc!()","activerecord::testfixtures#run_in_transaction?()","actioncontroller::dispatcher::run_prepare_callbacks()","activesupport::testing::performance#run_profile()","activesupport::testing::performance#run_test()","activesupport::testing::performance#run_warmup()","i18n::gettext::helpers#s_()","activesupport::coreextensions::array::randomaccess#sample()","actionview::helpers::sanitizehelper#sanitize()","html::fullsanitizer#sanitize()","html::sanitizer#sanitize()","activerecord::base::sanitize_conditions()","actionview::helpers::sanitizehelper#sanitize_css()","html::whitelistsanitizer#sanitize_css()","activerecord::connectionadapters::databasestatements#sanitize_limit()","activerecord::base::sanitize_sql()","activerecord::base::sanitize_sql_array()","activerecord::base::sanitize_sql_for_assignment()","activerecord::base::sanitize_sql_for_conditions()","activerecord::base::sanitize_sql_hash()","activerecord::base::sanitize_sql_hash_for_assignment()","activerecord::base::sanitize_sql_hash_for_conditions()","html::linksanitizer#sanitizeable?()","html::sanitizer#sanitizeable?()","activerecord::base#save()","activerecord::sessionstore::sqlbypass#save()","activeresource::base#save()","repositories#save()","activerecord::base#save!()","activerecord::validations#save_with_validation()","activeresource::validations#save_with_validation()","activerecord::validations#save_with_validation!()","activerecord::migration::say()","rails::gembuilder#say()","activerecord::migration::say_with_time()","activerecord::base::schema_format()","activerecord::connectionadapters::postgresqladapter#schema_search_path()","activerecord::connectionadapters::postgresqladapter#schema_search_path=()","activerecord::dynamicscopematch#scope?()","activerecord::namedscope::classmethods#scoped()","activerecord::namedscope::classmethods#scopes()","commands::discover#scrape()","rails::vendorgemsourceindex#search()","activesupport::coreextensions::array::access#second()","activesupport::coreextensions::numeric::time#second()","activesupport::coreextensions::numeric::time#seconds()","activesupport::coreextensions::datetime::calculations#seconds_since_midnight()","activesupport::coreextensions::time::calculations#seconds_since_midnight()","actioncontroller::httpauthentication::digest#secret_key()","cgi::cookie#secure=()","actioncontroller::routing::routeset#segment_tree()","actionview::helpers::formbuilder#select()","actionview::helpers::formoptionshelper#select()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#select()","activerecord::connectionadapters::databasestatements#select()","html::selector#select()","html::tag#select()","activerecord::connectionadapters::databasestatements#select_all()","activerecord::connectionadapters::querycache#select_all_with_query_cache()","actionview::helpers::datehelper#select_date()","actionview::helpers::datehelper#select_datetime()","actionview::helpers::datehelper#select_day()","html::selector#select_first()","actionview::helpers::datehelper#select_hour()","actionview::helpers::datehelper#select_minute()","actionview::helpers::datehelper#select_month()","activerecord::connectionadapters::databasestatements#select_one()","activerecord::connectionadapters::databasestatements#select_rows()","activerecord::connectionadapters::mysqladapter#select_rows()","activerecord::connectionadapters::postgresqladapter#select_rows()","activerecord::connectionadapters::sqliteadapter#select_rows()","actionview::helpers::datehelper#select_second()","actionview::helpers::formtaghelper#select_tag()","actionview::helpers::datehelper#select_time()","activerecord::connectionadapters::databasestatements#select_value()","activerecord::connectionadapters::databasestatements#select_values()","actionview::helpers::datehelper#select_year()","html::selector()","i18n::locale::tag::parents#self_and_parents()","actioncontroller::streaming#send_data()","actioncontroller::streaming#send_file()","actioncontroller::base#send_response()","actioncontroller::response#sending_file?()","activerecord::base::sequence_name=()","activerecord::base::serialize()","activerecord::base::serialized_attributes()","actioncontroller::request#server_port()","actioncontroller::request#server_software()","memcache#servers=()","actioncontroller::request#session()","actioncontroller::sessionmanagement::classmethods#session()","actioncontroller::testprocess#session()","actioncontroller::sessionmanagement::classmethods#session=()","actioncontroller::base#session_enabled?()","actioncontroller::session::abstractstore::sessionhash#session_id()","activerecord::sessionstore::sqlbypass::session_id_column()","actioncontroller::request#session_options()","actioncontroller::sessionmanagement::classmethods#session_options()","actioncontroller::request#session_options=()","actioncontroller::sessionmanagement::classmethods#session_store()","actioncontroller::sessionmanagement::classmethods#session_store=()","memcache#set()","rails::initializer#set_autoload_paths()","i18n::backend::gettext::podata#set_comment()","actioncontroller::response#set_cookie()","activesupport::json::set_default_backend()","activerecord::testfixtures::classmethods#set_fixture_class()","activerecord::base::set_inheritance_column()","rails::initializer#set_load_path()","activerecord::locking::optimistic::classmethods#set_locking_column()","activeresource::base::set_prefix()","activerecord::base::set_primary_key()","rails::configuration#set_root_path!()","activerecord::base::set_sequence_name()","activerecord::connectionadapters::postgresqladapter#set_standard_conforming_strings()","activerecord::base::set_table_name()","actioncontroller::testcase#setup_controller_request_and_response()","activerecord::testfixtures::classmethods#setup_fixture_accessors()","activerecord::testfixtures#setup_fixtures()","actionview::testcase#setup_with_controller()","i18n::gettext::helpers#sgettext()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#show()","activerecord::connectionadapters::mysqladapter#show_variable()","actioncontroller::benchmarking::classmethods#silence()","activerecord::base::silence()","activesupport::bufferedlogger#silence()","logger#silence()","activesupport::cache::store#silence!()","rails::vendorgemsourceindex::silence_spec_warnings()","rails::vendorgemsourceindex::silence_spec_warnings=()","kernel#silence_stream()","kernel#silence_warnings()","activesupport::bufferedlogger::silencer()","logger::silencer()","actionview::helpers::texthelper#simple_format()","html::selector#simple_selector()","activesupport::coreextensions::date::calculations#since()","activesupport::coreextensions::datetime::calculations#since()","activesupport::coreextensions::numeric::time#since()","activesupport::coreextensions::time::calculations#since()","activesupport::duration#since()","activesupport::timewithzone#since()","kernel#singleton_class()","object#singleton_class()","activesupport::inflector::inflections#singular()","actioncontroller::recordidentifier#singular_class_name()","activesupport::coreextensions::string::inflections#singularize()","activesupport::inflector#singularize()","activeresource::base::site()","activeresource::base::site=()","activeresource::connection#site=()","activerecord::errors#size()","activerecord::namedscope::scope#size()","activeresource::errors#size()","activesupport::multibyte::chars#size()","rails::vendorgemsourceindex#size()","actioncontroller::filters::classmethods#skip_after_filter()","actioncontroller::filters::classmethods#skip_before_filter()","actioncontroller::filters::classmethods#skip_filter()","activesupport::coreextensions::hash::slice#slice()","activesupport::multibyte::chars#slice()","hash#slice()","activesupport::coreextensions::hash::slice#slice!()","activesupport::multibyte::chars#slice!()","memcache::server#socket()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#sortable()","actionview::helpers::scriptaculoushelper#sortable_element()","actionview::template#source()","actioncontroller::routing::optimisation::optimiser#source_code()","gem::source_index=()","rails::generator::base#source_path()","rails::generator::lookup::classmethods#sources()","rails::gemdependency#specification()","rails::gemdependency#specification=()","activesupport::coreextensions::array::grouping#split()","activesupport::multibyte::chars#split()","commands::plugin#split_args()","activerecord::connectionadapters::databaselimits#sql_query_length()","activerecord::connectionadapters::sqliteadapter#sqlite_version()","activesupport::coreextensions::string::filters#squish()","activesupport::coreextensions::string::filters#squish!()","actioncontroller::request#ssl?()","activeresource::base::ssl_options()","activeresource::base::ssl_options=()","activeresource::connection#ssl_options=()","actioncontroller::base#stale?()","actionview::reloadabletemplate#stale?()","actioncontroller::request#standard_port()","activesupport::xmlmini_nokogirisax::hashbuilder#start_document()","activesupport::xmlmini_nokogirisax::hashbuilder#start_element()","activesupport::coreextensions::string::startsendswith#starts_with?()","activesupport::cache::memcachestore#stats()","memcache#stats()","tzinfo::timezoneperiod#std_offset()","activesupport::coreextensions::range::blocklessstep#step_with_blockless()","activerecord::base::sti_name()","actioncontroller::flash::flashhash#store()","builder::css#store!()","i18n::backend::activerecord::missing#store_default_translation()","i18n::backend::activerecord::missing#store_default_translations()","i18n::backend::flatten#store_link()","i18n::backend::activerecord::implementation#store_translations()","i18n::backend::base#store_translations()","i18n::backend::chain#store_translations()","i18n::backend::interpolationcompiler#store_translations()","i18n::backend::keyvalue::implementation#store_translations()","i18n::backend::memoize#store_translations()","i18n::backend::simple::implementation#store_translations()","activesupport::okjson#strenc()","activesupport::timewithzone#strftime()","tzinfo::timezone#strftime()","activerecord::connectionadapters::column::string_to_binary()","activerecord::connectionadapters::column::string_to_date()","activerecord::connectionadapters::column::string_to_dummy_time()","activerecord::connectionadapters::column::string_to_time()","activesupport::coreextensions::hash::keys#stringify_keys()","activesupport::coreextensions::hash::keys#stringify_keys!()","hashwithindifferentaccess#stringify_keys!()","activesupport::multibyte::chars#strip()","actionview::helpers::sanitizehelper#strip_links()","actionview::helpers::sanitizehelper#strip_tags()","actioncontroller::assertions::domassertions::strip_whitespace!()","activesupport::okjson#strtok()","activerecord::connectionadapters::schemastatements#structure_dump()","actionview::helpers::assettaghelper#stylesheet_link_tag()","actionview::helpers::assettaghelper#stylesheet_path()","actioncontroller::request#subdomains()","actionview::helpers::formtaghelper#submit_tag()","actionview::helpers::prototypehelper#submit_to_remote()","activesupport::okjson#subst()","i18n::locale::tag::simple#subtags()","activeresource::response#success?()","activerecord::calculations::classmethods#sum()","enumerable#sum()","class#superclass_delegating_accessor()","class#superclass_delegating_reader()","class#superclass_delegating_writer()","activerecord::connectionadapters::sqliteadapter#supports_add_column?()","activerecord::connectionadapters::abstractadapter#supports_count_distinct?()","activerecord::connectionadapters::abstractadapter#supports_ddl_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_ddl_transactions?()","activerecord::connectionadapters::sqliteadapter#supports_ddl_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_insert_with_returning?()","activerecord::connectionadapters::abstractadapter#supports_migrations?()","activerecord::connectionadapters::postgresqladapter#supports_migrations?()","activerecord::connectionadapters::abstractadapter#supports_primary_key?()","activerecord::connectionadapters::abstractadapter#supports_savepoints?()","activerecord::connectionadapters::postgresqladapter#supports_savepoints?()","kernel#suppress()","activerecord::migration::suppress_messages()","activesupport::okjson#surrogate?()","plugin#svn_url?()","actioncontroller::middlewarestack#swap()","activesupport::coreextensions::hash::keys#symbolize_keys()","activesupport::coreextensions::hash::keys#symbolize_keys!()","hashwithindifferentaccess#symbolize_keys!()","actioncontroller::request#symbolized_path_parameters()","module#synchronize()","actioncontroller::translation#t()","actionview::helpers::translationhelper#t()","i18n::t()","i18n::t!()","activerecord::connectionadapters::schemastatements#table_alias_for()","activerecord::connectionadapters::databaselimits#table_alias_length()","activerecord::connectionadapters::postgresqladapter#table_alias_length()","activerecord::base::table_exists?()","activerecord::connectionadapters::schemastatements#table_exists?()","activerecord::base::table_name()","activerecord::sessionstore::sqlbypass::table_name()","activerecord::base::table_name=()","activerecord::connectionadapters::databaselimits#table_name_length()","activerecord::base::table_name_prefix()","activerecord::base::table_name_suffix()","activerecord::connectionadapters::sqliteadapter#table_structure()","activesupport::coreextensions::string::inflections#tableize()","activesupport::inflector#tableize()","activerecord::connectionadapters::postgresqladapter#tables()","actionview::helpers::taghelper#tag()","i18n::locale::tag::tag()","i18n::locale::tag::rfc4646::tag()","i18n::locale::tag::simple::tag()","builder::xmlbase#tag!()","object#tap()","builder::css#target!()","builder::xmlmarkup#target!()","activerecord::testfixtures#teardown_fixtures()","rails::generator::commands::create#template()","rails::generator::commands::destroy#template()","rails::generator::commands::list#template()","rails::generator::commands::update#template()","actioncontroller::request#template_format()","actionmailer::base::template_root()","actionmailer::base::template_root=()","activesupport::coreextensions::numeric::bytes#terabyte()","activesupport::coreextensions::numeric::bytes#terabytes()","activesupport::testing::declarative#test()","actioncontroller::testcase::tests()","actionview::testcase::tests()","builder::xmlbase#text!()","builder::xmlevents#text!()","activerecord::connectionadapters::column#text?()","actionview::helpers::formhelper#text_area()","actionview::helpers::formtaghelper#text_area_tag()","actionview::helpers::formhelper#text_field()","actionview::helpers::formtaghelper#text_field_tag()","actionview::helpers::texthelper#textilize()","actionview::helpers::texthelper#textilize_without_paragraph()","activesupport::okjson#textparse()","activesupport::coreextensions::array::access#third()","rails::configuration#threadsafe!()","activesupport::multibyte::chars#tidy_bytes()","activesupport::multibyte::chars::tidy_bytes()","activesupport::timewithzone#time()","actionview::helpers::datehelper#time_ago_in_words()","actionview::helpers::datehelper#time_select()","actionview::helpers::formbuilder#time_select()","activesupport::coreextensions::time::calculations::classmethods#time_with_datetime_fallback()","actionview::helpers::formoptionshelper#time_zone_options_for_select()","actionview::helpers::formbuilder#time_zone_select()","actionview::helpers::formoptionshelper#time_zone_select()","activeresource::base::timeout()","activeresource::base::timeout=()","activeresource::connection#timeout=()","activerecord::base::timestamped_migrations()","activerecord::connectionadapters::table#timestamps()","activerecord::connectionadapters::tabledefinition#timestamps()","activesupport::coreextensions::string::inflections#titlecase()","activesupport::coreextensions::string::inflections#titleize()","activesupport::inflector#titleize()","activesupport::coreextensions::array::access#to()","activesupport::coreextensions::string::access#to()","activesupport::timewithzone#to_a()","i18n::locale::tag::rfc4646#to_a()","i18n::locale::tag::simple#to_a()","activesupport::coreextensions::date::conversions#to_date()","activesupport::coreextensions::datetime::conversions#to_date()","activesupport::coreextensions::string::conversions#to_date()","activesupport::coreextensions::time::conversions#to_date()","activesupport::coreextensions::date::conversions#to_datetime()","activesupport::coreextensions::datetime::conversions#to_datetime()","activesupport::coreextensions::string::conversions#to_datetime()","activesupport::coreextensions::time::conversions#to_datetime()","activesupport::timewithzone#to_datetime()","activesupport::coreextensions::datetime::conversions#to_f()","activesupport::timewithzone#to_f()","activesupport::coreextensions::array::conversions#to_formatted_s()","activesupport::coreextensions::bigdecimal::conversions#to_formatted_s()","activesupport::coreextensions::date::conversions#to_formatted_s()","activesupport::coreextensions::datetime::conversions#to_formatted_s()","activesupport::coreextensions::range::conversions#to_formatted_s()","activesupport::coreextensions::time::conversions#to_formatted_s()","activesupport::timewithzone#to_formatted_s()","actioncontroller::session::abstractstore::sessionhash#to_hash()","activesupport::xmlmini_nokogiri::conversions::document#to_hash()","activesupport::xmlmini_nokogiri::conversions::node#to_hash()","hashwithindifferentaccess#to_hash()","libxml::conversions::document#to_hash()","libxml::conversions::node#to_hash()","activesupport::coreextensions::datetime::conversions#to_i()","activesupport::timewithzone#to_i()","activerecord::serialization#to_json()","activesupport::json::variable#to_json()","object#to_json()","tzinfo::timezoneperiod#to_local()","activesupport::coreextensions::hash::keys#to_options()","activesupport::coreextensions::hash::keys#to_options!()","hashwithindifferentaccess#to_options!()","activerecord::base#to_param()","activeresource::base#to_param()","activesupport::coreextensions::array::conversions#to_param()","activesupport::coreextensions::hash::conversions#to_param()","falseclass#to_param()","nilclass#to_param()","object#to_param()","trueclass#to_param()","actioncontroller::routing::routeset#to_plain_segments()","actioncontroller::dispatcher::to_prepare()","rails::configuration#to_prepare()","symbol#to_proc()","activesupport::coreextensions::array::conversions#to_query()","activesupport::coreextensions::hash::conversions#to_query()","object#to_query()","actioncontroller::routing::optionalformatsegment#to_s()","actionview::template::path#to_s()","activeresource::request#to_s()","activeresource::sslerror#to_s()","activeresource::timeouterror#to_s()","activesupport::safebuffer#to_s()","activesupport::timewithzone#to_s()","activesupport::timezone#to_s()","cgi::cookie#to_s()","i18n::locale::tag::rfc4646#to_s()","i18n::locale::tag::simple#to_s()","mime::type#to_s()","plugin#to_s()","sourceannotationextractor::annotation#to_s()","tzinfo::timezone#to_s()","activesupport::coreextensions::array::conversions#to_sentence()","activerecord::connectionadapters::tabledefinition#to_sql()","actionview::template::path#to_str()","mime::type#to_str()","i18n::locale::tag::rfc4646#to_sym()","i18n::locale::tag::simple#to_sym()","mime::type#to_sym()","activesupport::coreextensions::date::conversions#to_time()","activesupport::coreextensions::datetime::conversions#to_time()","activesupport::coreextensions::string::conversions#to_time()","activesupport::coreextensions::time::conversions#to_time()","activesupport::timewithzone#to_time()","tzinfo::timezoneperiod#to_utc()","activesupport::coreextensions::numeric::conversions#to_utc_offset_s()","activerecord::errors#to_xml()","activerecord::serialization#to_xml()","activeresource::base#to_xml()","activesupport::coreextensions::array::conversions#to_xml()","activesupport::coreextensions::hash::conversions#to_xml()","string#to_xs()","activesupport::coreextensions::bigdecimal::conversions#to_yaml()","activesupport::safebuffer#to_yaml()","activesupport::timewithzone#to_yaml()","activesupport::timezone#today()","activesupport::coreextensions::date::calculations#today?()","activesupport::coreextensions::time::calculations#today?()","activesupport::timewithzone#today?()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#toggle()","activerecord::base#toggle()","activerecord::base#toggle!()","activesupport::okjson#tok()","html::sanitizer#tokenize()","html::whitelistsanitizer#tokenize()","i18n::backend::interpolationcompiler::compiler#tokenize()","activesupport::coreextensions::date::calculations#tomorrow()","activesupport::coreextensions::date::calculations::classmethods#tomorrow()","activesupport::coreextensions::time::calculations#tomorrow()","activerecord::timestamp#touch()","activerecord::connectionadapters::databasestatements#transaction()","activerecord::transactions#transaction()","activerecord::transactions::classmethods#transaction()","activerecord::connectionadapters::abstractadapter#transaction_joinable=()","actioncontroller::translation#translate()","actionview::helpers::translationhelper#translate()","i18n::translate()","i18n::backend::activerecord::missing#translate()","i18n::backend::base#translate()","i18n::backend::cache#translate()","i18n::backend::chain#translate()","i18n::backend::fallbacks#translate()","i18n::backend::metadata#translate()","i18n::translate!()","i18n::backend::metadata::translation_metadata()","i18n::backend::metadata::translation_metadata=()","i18n::backend::simple::implementation#translations()","activesupport::inflector#transliterate()","i18n::transliterate()","i18n::backend::transliterator#transliterate()","i18n::backend::transliterator::hashtransliterator#transliterate()","i18n::backend::transliterator::proctransliterator#transliterate()","activesupport::okjson#truetok()","actionview::helpers::texthelper#truncate()","nilclass#try()","object#try()","activerecord::testfixtures::classmethods#try_to_load_dependency()","activesupport::timewithzone#tv_sec()","activerecord::connectionadapters::column#type_cast()","activerecord::connectionadapters::column#type_cast_code()","activerecord::connectionadapters::mysqladapter#type_to_sql()","activerecord::connectionadapters::postgresqladapter#type_to_sql()","activesupport::multibyte::chars::u_unpack()","activesupport::okjson#ucharcopy()","activesupport::okjson#ucharenc()","activerecord::connectionadapters::querycache#uncached()","activerecord::querycache::classmethods#uncached()","activesupport::inflector::inflections#uncountable()","actionview::reloadabletemplate#undef_my_compiled_methods!()","activesupport::coreextensions::string::inflections#underscore()","activesupport::inflector#underscore()","object#unescape()","activerecord::connectionadapters::postgresqladapter#unescape_bytea()","actioncontroller::assertions::selectorassertions#unescape_rjs()","plugin#uninstall()","activerecord::sessionstore::session::unmarshal()","activerecord::sessionstore::sqlbypass::unmarshal()","activesupport::memoizable::instancemethods#unmemoize_all()","rexml::entity#unnormalized()","rails::gemdependency#unpack()","rails::gemdependency::unpacked_path()","activesupport::okjson#unquote()","activesupport::coreextensions::numeric::time#until()","activesupport::duration#until()","mime::type::unverifiable_types()","activesupport::multibyte::chars#upcase()","actioncontroller::session::abstractstore::sessionhash#update()","activerecord::base::update()","activerecord::connectionadapters::databasestatements#update()","activeresource::base#update()","hashwithindifferentaccess#update()","activerecord::base::update_all()","activerecord::base#update_attribute()","activerecord::base#update_attributes()","activerecord::base#update_attributes!()","activerecord::base::update_counters()","activerecord::locking::optimistic::classmethods#update_counters_with_lock()","actionview::helpers::prototypehelper#update_page()","actionview::helpers::prototypehelper#update_page_tag()","activerecord::connectionadapters::databasestatements#update_sql()","activerecord::connectionadapters::postgresqladapter#update_sql()","actionview::helpers::atomfeedhelper::atomfeedbuilder#updated()","actioncontroller::request#url()","actioncontroller::base#url_for()","actioncontroller::integration::session#url_for()","actioncontroller::urlwriter#url_for()","actionview::helpers::urlhelper#url_for()","tzinfo::timezone::us_zone_identifiers()","activesupport::timezone::us_zones()","tzinfo::timezone::us_zones()","rails::generator::options#usage()","rails::generator::base#usage_message()","rails::generator::options#usage_message()","rails::generator::scripts::base#usage_message()","actioncontroller::middlewarestack#use()","rails::generator::lookup::classmethods#use_application_sources!()","railsenvironment#use_checkout?()","rails::generator::lookup::classmethods#use_component_sources!()","actioncontroller::routing::use_controllers!()","railsenvironment#use_externals?()","railsenvironment#use_svn?()","activesupport::coreextensions::time::zones::classmethods#use_zone()","activesupport::timewithzone#usec()","activeresource::base::user()","activeresource::base::user=()","activeresource::connection#user=()","dir::user_home()","actioncontroller::httpauthentication::basic#user_name_and_password()","activerecord::testfixtures::classmethods#uses_transaction()","activerecord::testfixtures::classmethods#uses_transaction?()","activesupport::coreextensions::datetime::calculations#utc()","activesupport::timewithzone#utc()","activesupport::coreextensions::datetime::calculations#utc?()","activesupport::timewithzone#utc?()","tzinfo::timezoneperiod#utc_after_start?()","tzinfo::timezoneperiod#utc_before_end?()","tzinfo::timezoneperiod#utc_end()","activesupport::coreextensions::datetime::calculations#utc_offset()","activesupport::timewithzone#utc_offset()","activesupport::timezone#utc_offset()","tzinfo::timezoneperiod#utc_offset()","tzinfo::timezoneperiod#utc_start()","activesupport::coreextensions::time::calculations::classmethods#utc_time()","activesupport::timezone#utc_to_local()","tzinfo::timezone#utc_to_local()","tzinfo::timezoneperiod#utc_total_offset()","tzinfo::timezoneperiod#utc_total_offset_rational()","activesupport::okjson#valenc()","activerecord::validations#valid?()","activeresource::validations#valid?()","rails::plugin#valid?()","activerecord::connectionadapters::sqliteadapter#valid_alter_table_options()","tzinfo::timezoneperiod#valid_for_local?()","tzinfo::timezoneperiod#valid_for_utc?()","activerecord::validations#validate()","actioncontroller::httpauthentication::digest#validate_digest_response()","actioncontroller::httpauthentication::digest#validate_nonce()","activerecord::validations#validate_on_create()","activerecord::validations#validate_on_update()","activerecord::validations::classmethods#validates_acceptance_of()","activerecord::validations::classmethods#validates_associated()","activerecord::validations::classmethods#validates_confirmation_of()","activerecord::validations::classmethods#validates_each()","activerecord::validations::classmethods#validates_exclusion_of()","activerecord::validations::classmethods#validates_format_of()","activerecord::validations::classmethods#validates_inclusion_of()","activerecord::validations::classmethods#validates_length_of()","activerecord::validations::classmethods#validates_numericality_of()","activerecord::validations::classmethods#validates_presence_of()","activerecord::validations::classmethods#validates_size_of()","activerecord::validations::classmethods#validates_uniqueness_of()","activesupport::okjson#valparse()","activerecord::error#value()","i18n::backend::activerecord::translation#value()","i18n::backend::activerecord::storeprocs#value=()","activerecord::connectionadapters::column::value_to_boolean()","activerecord::connectionadapters::column::value_to_decimal()","hashwithindifferentaccess#values_at()","rails::gemdependency#vendor_gem?()","rails::gemdependency#vendor_rails?()","actioncontroller::requestforgeryprotection#verifiable_request_format?()","activerecord::base::verification_timeout()","activerecord::base::verification_timeout=()","actioncontroller::requestforgeryprotection#verified_request?()","actioncontroller::verification::classmethods#verify()","activesupport::messageverifier#verify()","activerecord::connectionadapters::abstractadapter#verify!()","actioncontroller::requestforgeryprotection#verify_authenticity_token()","mime::type#verify_request?()","rails::version()","rails::vendorgemsourceindex#version_for_dir()","rails::plugin#view_path()","actioncontroller::base#view_paths()","actioncontroller::base::view_paths()","actioncontroller::base#view_paths=()","actioncontroller::base::view_paths=()","actionview::helpers::prototypehelper::javascriptgenerator::generatormethods#visual_effect()","actionview::helpers::scriptaculoushelper#visual_effect()","activesupport::multibyte::chars::wants?()","activesupport::coreextensions::numeric::time#week()","activesupport::coreextensions::numeric::time#weeks()","activesupport::json::with_backend()","activesupport::xmlmini#with_backend()","activerecord::connectionadapters::connectionpool#with_connection()","actioncontroller::routing::with_controllers()","activerecord::base::with_exclusive_scope()","activesupport::testing::performance::metrics::base#with_gc_stats()","activesupport::cache::strategy::localcache#with_local_cache()","i18n::with_locale()","i18n::backend::metadata#with_metadata()","object#with_options()","activesupport::testing::performance::benchmarker#with_output_file()","actioncontroller::testprocess#with_routing()","activerecord::base::with_scope()","memcache#with_server()","railsfcgihandler#with_signal_handler()","memcache#with_socket_management()","activerecord::transactions#with_transaction_returning_status()","actionview::helpers::texthelper#word_wrap()","activesupport::coreextensions::array::wrapper#wrap()","actioncontroller::response#write()","activerecord::migration::write()","activesupport::cache::compressedmemcachestore#write()","activesupport::cache::filestore#write()","activesupport::cache::memcachestore#write()","activesupport::cache::memorystore#write()","activesupport::cache::store#write()","activesupport::cache::strategy::localcache#write()","activesupport::cache::synchronizedmemorystore#write()","actioncontroller::caching::fragments#write_fragment()","rails::gemdependency#write_specification()","fixnum#xchr()","actioncontroller::integration::session#xhr()","actioncontroller::testprocess#xhr()","actioncontroller::request#xhr?()","activerecord::connectionadapters::tabledefinition#xml()","activerecord::connectionadapters::tabledefinition#xml_column_fallback()","actioncontroller::integration::session#xml_http_request()","actioncontroller::testprocess#xml_http_request()","actioncontroller::request#xml_http_request?()","activesupport::coreextensions::date::conversions#xmlschema()","activesupport::coreextensions::datetime::conversions#xmlschema()","activesupport::timewithzone#xmlschema()","activesupport::coreextensions::float::time#year()","activesupport::coreextensions::integer::time#year()","activesupport::coreextensions::float::time#years()","activesupport::coreextensions::integer::time#years()","activesupport::coreextensions::date::calculations#years_ago()","activesupport::coreextensions::time::calculations#years_ago()","activesupport::coreextensions::date::calculations#years_since()","activesupport::coreextensions::time::calculations#years_since()","activesupport::coreextensions::float::time#years_without_deprecation()","activesupport::coreextensions::date::calculations#yesterday()","activesupport::coreextensions::date::calculations::classmethods#yesterday()","activesupport::coreextensions::time::calculations#yesterday()","activesupport::coreextensions::time::zones::classmethods#zone()","activesupport::timewithzone#zone()","activesupport::coreextensions::time::zones::classmethods#zone=()","tzinfo::timezoneperiod#zone_identifier()","activesupport::timezone::zones_map()","builder::css#|()","","","","","","","","","","","","","",""],"info":[["ActionController","","classes/ActionController.html","",""],["ActionController::Assertions","","classes/ActionController/Assertions.html","",""],["ActionController::Assertions::DomAssertions","","classes/ActionController/Assertions/DomAssertions.html","",""],["ActionController::Assertions::ModelAssertions","","classes/ActionController/Assertions/ModelAssertions.html","",""],["ActionController::Assertions::ResponseAssertions","","classes/ActionController/Assertions/ResponseAssertions.html","","<p>A small suite of assertions that test responses from Rails applications.\n"],["ActionController::Assertions::RoutingAssertions","","classes/ActionController/Assertions/RoutingAssertions.html","","<p>Suite of assertions to test routes generated by Rails and the handling of\nrequests made to them.\n"],["ActionController::Assertions::SelectorAssertions","","classes/ActionController/Assertions/SelectorAssertions.html","","<p>Adds the <code>assert_select</code> method for use in Rails functional test\ncases, which can be used to make assertions …\n"],["ActionController::Assertions::TagAssertions","","classes/ActionController/Assertions/TagAssertions.html","","<p>Pair of assertions to testing elements in the HTML output of the response.\n"],["ActionController::Base","","classes/ActionController/Base.html","","<p>Action Controllers are the core of a web request in Rails. They are made up\nof one or more actions that …\n"],["ActionController::Benchmarking","","classes/ActionController/Benchmarking.html","",""],["ActionController::Benchmarking::ClassMethods","","classes/ActionController/Benchmarking/ClassMethods.html","",""],["ActionController::CGIHandler","","classes/ActionController/CGIHandler.html","",""],["ActionController::CGIHandler::ProperStream","","classes/ActionController/CGIHandler/ProperStream.html","",""],["ActionController::Caching","","classes/ActionController/Caching.html","","<p>Caching is a cheap way of speeding up slow applications by keeping the\nresult of calculations, renderings, …\n"],["ActionController::Caching::Actions","","classes/ActionController/Caching/Actions.html","","<p>Action caching is similar to page caching by the fact that the entire\noutput of the response is cached, …\n"],["ActionController::Caching::Actions::ActionCachePath","","classes/ActionController/Caching/Actions/ActionCachePath.html","",""],["ActionController::Caching::Actions::ClassMethods","","classes/ActionController/Caching/Actions/ClassMethods.html","",""],["ActionController::Caching::Fragments","","classes/ActionController/Caching/Fragments.html","","<p>Fragment caching is used for caching various blocks within templates\nwithout caching the entire action …\n"],["ActionController::Caching::Pages","","classes/ActionController/Caching/Pages.html","","<p>Page caching is an approach to caching where the entire action output of is\nstored as a HTML file that …\n"],["ActionController::Caching::Pages::ClassMethods","","classes/ActionController/Caching/Pages/ClassMethods.html","",""],["ActionController::Caching::Sweeping","","classes/ActionController/Caching/Sweeping.html","","<p>Sweepers are the terminators of the caching world and responsible for\nexpiring caches when model objects …\n"],["ActionController::CgiExt","","classes/ActionController/CgiExt.html","",""],["ActionController::CgiExt::Stdinput","","classes/ActionController/CgiExt/Stdinput.html","","<p>Publicize the CGI&#39;s internal input stream so we can lazy-read\nrequest.body. Make it writable so we …\n"],["ActionController::Cookies","","classes/ActionController/Cookies.html","","<p>Cookies are read and written through ActionController#cookies.\n<p>The cookies being read are the ones received …\n"],["ActionController::Dispatcher","","classes/ActionController/Dispatcher.html","","<p>Dispatches requests to the appropriate controller and takes care of\nreloading the app after each request …\n"],["ActionController::Failsafe","","classes/ActionController/Failsafe.html","","<p>The Failsafe middleware is usually the top-most middleware in the Rack\nmiddleware chain. It returns the …\n"],["ActionController::Filters","","classes/ActionController/Filters.html","",""],["ActionController::Filters::ClassMethods","","classes/ActionController/Filters/ClassMethods.html","","<p>Filters enable controllers to run shared pre- and post-processing code for\nits actions. These filters …\n"],["ActionController::Flash","","classes/ActionController/Flash.html","","<p>The flash provides a way to pass temporary objects between actions.\nAnything you place in the flash will …\n"],["ActionController::Flash::FlashHash","","classes/ActionController/Flash/FlashHash.html","",""],["ActionController::Helpers","","classes/ActionController/Helpers.html","",""],["ActionController::Helpers::ClassMethods","","classes/ActionController/Helpers/ClassMethods.html","","<p>The Rails framework provides a large number of helpers for working with\n<code>assets</code>, <code>dates</code>, <code>forms</code>, \n<code>numbers</code> …\n"],["ActionController::Http","","classes/ActionController/Http.html","",""],["ActionController::Http::Headers","","classes/ActionController/Http/Headers.html","",""],["ActionController::HttpAuthentication","","classes/ActionController/HttpAuthentication.html","",""],["ActionController::HttpAuthentication::Basic","","classes/ActionController/HttpAuthentication/Basic.html","","<p>Makes it dead easy to do HTTP Basic authentication.\n<p>Simple Basic example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ApplicationController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActionController::HttpAuthentication::Basic::ControllerMethods","","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Digest","","classes/ActionController/HttpAuthentication/Digest.html","",""],["ActionController::HttpAuthentication::Digest::ControllerMethods","","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html","",""],["ActionController::Integration","","classes/ActionController/Integration.html","",""],["ActionController::Integration::Runner","","classes/ActionController/Integration/Runner.html","",""],["ActionController::Integration::Session","","classes/ActionController/Integration/Session.html","","<p>An integration Session instance represents a set of requests and responses\nperformed sequentially by …\n"],["ActionController::Integration::Session::MultiPartNeededException","","classes/ActionController/Integration/Session/MultiPartNeededException.html","",""],["ActionController::IntegrationTest","","classes/ActionController/IntegrationTest.html","","<p>An IntegrationTest is one that spans multiple controllers and actions,\ntying them all together to ensure …\n"],["ActionController::Layout","","classes/ActionController/Layout.html","",""],["ActionController::Layout::ClassMethods","","classes/ActionController/Layout/ClassMethods.html","","<p>Layouts reverse the common pattern of including shared headers and footers\nin many templates to isolate …\n"],["ActionController::MiddlewareStack","","classes/ActionController/MiddlewareStack.html","",""],["ActionController::MiddlewareStack::Middleware","","classes/ActionController/MiddlewareStack/Middleware.html","",""],["ActionController::MimeResponds","","classes/ActionController/MimeResponds.html","",""],["ActionController::MimeResponds::InstanceMethods","","classes/ActionController/MimeResponds/InstanceMethods.html","",""],["ActionController::ParamsParser","","classes/ActionController/ParamsParser.html","",""],["ActionController::PerformanceTest","","classes/ActionController/PerformanceTest.html","","<p>An integration test that runs a code profiler on your test methods.\nProfiling output for combinations …\n"],["ActionController::PolymorphicRoutes","","classes/ActionController/PolymorphicRoutes.html","","<p>Polymorphic URL helpers are methods for smart resolution to a named route\ncall when given an Active  …\n"],["ActionController::RecordIdentifier","","classes/ActionController/RecordIdentifier.html","","<p>The record identifier encapsulates a number of naming conventions for\ndealing with records, like Active …\n"],["ActionController::Reloader","","classes/ActionController/Reloader.html","",""],["ActionController::Reloader::BodyWrapper","","classes/ActionController/Reloader/BodyWrapper.html","",""],["ActionController::Request","","classes/ActionController/Request.html","",""],["ActionController::RequestForgeryProtection","","classes/ActionController/RequestForgeryProtection.html","",""],["ActionController::RequestForgeryProtection::ClassMethods","","classes/ActionController/RequestForgeryProtection/ClassMethods.html","","<p>Protecting controller actions from CSRF attacks by ensuring that all forms\nare coming from the current …\n"],["ActionController::Rescue","","classes/ActionController/Rescue.html","","<p>Actions that fail to perform as expected throw exceptions. These exceptions\ncan either be rescued for …\n"],["ActionController::Rescue::ClassMethods","","classes/ActionController/Rescue/ClassMethods.html","",""],["ActionController::Resources","","classes/ActionController/Resources.html","","<p>Overview\n<p>ActionController::Resources are a way of defining RESTful resources.  A\nRESTful resource, in …\n"],["ActionController::Response","","classes/ActionController/Response.html","","<p>Represents an HTTP response generated by a controller action. One can use\nan ActionController::Response …\n"],["ActionController::Routing","","classes/ActionController/Routing.html","","<p>Routing\n<p>The routing module provides URL rewriting in native Ruby. It&#39;s a way to\nredirect incoming …\n"],["ActionController::Routing::Helpers","","classes/ActionController/Routing/Helpers.html","","<p>A helper module to hold URL related helpers.\n"],["ActionController::Routing::Optimisation","","classes/ActionController/Routing/Optimisation.html","","<p>Much of the slow performance from routes comes from the complexity of\nexpiry, <code>:requirements</code> matching, …\n"],["ActionController::Routing::Optimisation::Optimiser","","classes/ActionController/Routing/Optimisation/Optimiser.html","",""],["ActionController::Routing::Optimisation::PositionalArguments","","classes/ActionController/Routing/Optimisation/PositionalArguments.html","","<p>Given a route\n\n<pre>map.person &#39;/people/:id&#39;</pre>\n<p>If the user calls <code>person_url(@person)</code>, we can simply return a\nstring …\n"],["ActionController::Routing::Optimisation::PositionalArgumentsWithAdditionalParams","","classes/ActionController/Routing/Optimisation/PositionalArgumentsWithAdditionalParams.html","","<p>This case is mostly the same as the positional arguments case above, but it\nsupports additional query …\n"],["ActionController::Routing::OptionalFormatSegment","","classes/ActionController/Routing/OptionalFormatSegment.html","","<p>The OptionalFormatSegment allows for any resource route to have an optional\n:format, which decreases …\n"],["ActionController::Routing::RouteSet","","classes/ActionController/Routing/RouteSet.html","","<p>BEFORE:   0.191446860631307 ms/url AFTER:    0.029847304022858 ms/url Speed\nup: 6.4 times\n<p>Route recognition …\n"],["ActionController::Routing::RouteSet::Mapper","","classes/ActionController/Routing/RouteSet/Mapper.html","","<p>Mapper instances are used to build routes. The object passed to the draw\nblock in config/routes.rb is …\n"],["ActionController::Session","","classes/ActionController/Session.html","",""],["ActionController::Session::AbstractStore","","classes/ActionController/Session/AbstractStore.html","",""],["ActionController::Session::AbstractStore::OptionsHash","","classes/ActionController/Session/AbstractStore/OptionsHash.html","","<p>thin wrapper around Hash that allows us to lazily load session id into\nsession_options\n"],["ActionController::Session::AbstractStore::SessionHash","","classes/ActionController/Session/AbstractStore/SessionHash.html","",""],["ActionController::Session::AbstractStore::SessionUtils","","classes/ActionController/Session/AbstractStore/SessionUtils.html","",""],["ActionController::Session::CookieStore","","classes/ActionController/Session/CookieStore.html","","<p>This cookie-based session store is the Rails default. Sessions typically\ncontain at most a user_id and …\n"],["ActionController::Session::CookieStore::CookieOverflow","","classes/ActionController/Session/CookieStore/CookieOverflow.html","","<p>Raised when storing more than 4K of session data.\n"],["ActionController::Session::MemCacheStore","","classes/ActionController/Session/MemCacheStore.html","",""],["ActionController::SessionManagement","","classes/ActionController/SessionManagement.html","",""],["ActionController::SessionManagement::ClassMethods","","classes/ActionController/SessionManagement/ClassMethods.html","",""],["ActionController::Streaming","","classes/ActionController/Streaming.html","","<p>Methods for sending arbitrary data and for streaming files to the browser,\ninstead of rendering.\n"],["ActionController::StringCoercion","","classes/ActionController/StringCoercion.html","",""],["ActionController::StringCoercion::UglyBody","","classes/ActionController/StringCoercion/UglyBody.html","",""],["ActionController::TestCase","","classes/ActionController/TestCase.html","","<p>Superclass for ActionController functional tests. Functional tests allow\nyou to test a single controller …\n"],["ActionController::TestCase::Assertions","","classes/ActionController/TestCase/Assertions.html","",""],["ActionController::TestCase::RaiseActionExceptions","","classes/ActionController/TestCase/RaiseActionExceptions.html","","<p>When the request.remote_addr remains the default for testing, which is\n0.0.0.0, the exception is simply …\n"],["ActionController::TestProcess","","classes/ActionController/TestProcess.html","",""],["ActionController::TestResponse","","classes/ActionController/TestResponse.html","","<p>Integration test methods such as ActionController::Integration::Session#get\nand ActionController::Integration::Session#post …\n"],["ActionController::TestUploadedFile","","classes/ActionController/TestUploadedFile.html","",""],["ActionController::Translation","","classes/ActionController/Translation.html","",""],["ActionController::UploadedFile","","classes/ActionController/UploadedFile.html","",""],["ActionController::UploadedStringIO","","classes/ActionController/UploadedStringIO.html","",""],["ActionController::UploadedTempfile","","classes/ActionController/UploadedTempfile.html","",""],["ActionController::UrlWriter","","classes/ActionController/UrlWriter.html","","<p>In <strong>routes.rb</strong> one defines URL-to-controller mappings, but\nthe reverse is also possible: an URL can be …\n"],["ActionController::Verification","","classes/ActionController/Verification.html","",""],["ActionController::Verification::ClassMethods","","classes/ActionController/Verification/ClassMethods.html","","<p>This module provides a class-level method for specifying that certain\nactions are guarded against being …\n"],["ActionMailer","","classes/ActionMailer.html","",""],["ActionMailer::Base","","classes/ActionMailer/Base.html","","<p>Action Mailer allows you to send email from your application using a mailer\nmodel and views.\n<p>Mailer Models …\n"],["ActionView","","classes/ActionView.html","","<p>Adds easy defaults to writing Atom feeds with the Builder template engine\n(this does not work on ERb …\n"],["ActionView::Base","","classes/ActionView/Base.html","","<p>Action View templates can be written in three ways. If the template file\nhas a <code>.erb</code> (or <code>.rhtml</code>) extension …\n"],["ActionView::Base::ProxyModule","","classes/ActionView/Base/ProxyModule.html","",""],["ActionView::Helpers","","classes/ActionView/Helpers.html","","<p>Action View CSRF Helper\n"],["ActionView::Helpers::ActiveRecordHelper","","classes/ActionView/Helpers/ActiveRecordHelper.html","","<p>The Active Record Helper makes it easier to create forms for records kept\nin instance variables. The …\n"],["ActionView::Helpers::AssetTagHelper","","classes/ActionView/Helpers/AssetTagHelper.html","","<p>This module provides methods for generating HTML that links views to assets\nsuch as images, javascripts, …\n"],["ActionView::Helpers::AtomFeedHelper","","classes/ActionView/Helpers/AtomFeedHelper.html","",""],["ActionView::Helpers::AtomFeedHelper::AtomBuilder","","classes/ActionView/Helpers/AtomFeedHelper/AtomBuilder.html","",""],["ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","","classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html","",""],["ActionView::Helpers::BenchmarkHelper","","classes/ActionView/Helpers/BenchmarkHelper.html","","<p>This helper offers a method to measure the execution time of a block  in a\ntemplate.\n"],["ActionView::Helpers::CacheHelper","","classes/ActionView/Helpers/CacheHelper.html","","<p>This helper to exposes a method for caching of view fragments. See\nActionController::Caching::Fragments …\n"],["ActionView::Helpers::CaptureHelper","","classes/ActionView/Helpers/CaptureHelper.html","","<p>CaptureHelper exposes methods to let you extract generated markup which can\nbe used in other parts of …\n"],["ActionView::Helpers::ClassMethods","","classes/ActionView/Helpers/ClassMethods.html","",""],["ActionView::Helpers::CsrfHelper","","classes/ActionView/Helpers/CsrfHelper.html","",""],["ActionView::Helpers::DateHelper","","classes/ActionView/Helpers/DateHelper.html","","<p>The Date Helper primarily creates select/option tags for different kinds of\ndates and date elements. …\n"],["ActionView::Helpers::DebugHelper","","classes/ActionView/Helpers/DebugHelper.html","","<p>Provides a set of methods for making it easier to debug Rails objects.\n"],["ActionView::Helpers::FormBuilder","","classes/ActionView/Helpers/FormBuilder.html","",""],["ActionView::Helpers::FormHelper","","classes/ActionView/Helpers/FormHelper.html","","<p>Form helpers are designed to make working with models much easier compared\nto using just standard HTML …\n"],["ActionView::Helpers::FormOptionsHelper","","classes/ActionView/Helpers/FormOptionsHelper.html","","<p>Provides a number of methods for turning different kinds of containers into\na set of option tags.\n<p>Options …\n"],["ActionView::Helpers::FormTagHelper","","classes/ActionView/Helpers/FormTagHelper.html","","<p>Provides a number of methods for creating form tags that doesn&#39;t rely\non an Active Record object …\n"],["ActionView::Helpers::JavaScriptHelper","","classes/ActionView/Helpers/JavaScriptHelper.html","","<p>Provides functionality for working with JavaScript in your views.\n<p>Ajax, controls and visual effects\n<p>For …\n"],["ActionView::Helpers::NumberHelper","","classes/ActionView/Helpers/NumberHelper.html","","<p>Provides methods for converting numbers into formatted strings. Methods are\nprovided for phone numbers, …\n"],["ActionView::Helpers::PrototypeHelper","","classes/ActionView/Helpers/PrototypeHelper.html","","<p>Prototype is a JavaScript library that provides DOM manipulation, Ajax\nfunctionality, and more traditional …\n"],["ActionView::Helpers::PrototypeHelper::JavaScriptGenerator","","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator.html","",""],["ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html","","<p>JavaScriptGenerator generates blocks of JavaScript code that allow you to\nchange the content and presentation …\n"],["ActionView::Helpers::RawOutputHelper","","classes/ActionView/Helpers/RawOutputHelper.html","",""],["ActionView::Helpers::RecordIdentificationHelper","","classes/ActionView/Helpers/RecordIdentificationHelper.html","",""],["ActionView::Helpers::RecordTagHelper","","classes/ActionView/Helpers/RecordTagHelper.html","",""],["ActionView::Helpers::SanitizeHelper","","classes/ActionView/Helpers/SanitizeHelper.html","","<p>The SanitizeHelper module provides a set of methods for scrubbing text of\nundesired HTML elements. These …\n"],["ActionView::Helpers::ScriptaculousHelper","","classes/ActionView/Helpers/ScriptaculousHelper.html","","<p>Provides a set of helpers for calling Scriptaculous JavaScript  functions,\nincluding those which create …\n"],["ActionView::Helpers::TagHelper","","classes/ActionView/Helpers/TagHelper.html","","<p>Provides methods to generate HTML tags programmatically when you can&#39;t\nuse a Builder. By default, …\n"],["ActionView::Helpers::TextHelper","","classes/ActionView/Helpers/TextHelper.html","","<p>The TextHelper module provides a set of methods for filtering, formatting\nand transforming strings, which …\n"],["ActionView::Helpers::TranslationHelper","","classes/ActionView/Helpers/TranslationHelper.html","",""],["ActionView::Helpers::UrlHelper","","classes/ActionView/Helpers/UrlHelper.html","","<p>Provides a set of methods for making links and getting URLs that depend on\nthe routing subsystem (see …\n"],["ActionView::Partials","","classes/ActionView/Partials.html","","<p>There&#39;s also a convenience method for rendering sub templates within\nthe current controller that …\n"],["ActionView::ReloadableTemplate","","classes/ActionView/ReloadableTemplate.html","",""],["ActionView::ReloadableTemplate::ReloadablePath","","classes/ActionView/ReloadableTemplate/ReloadablePath.html","",""],["ActionView::ReloadableTemplate::TemplateDeleted","","classes/ActionView/ReloadableTemplate/TemplateDeleted.html","",""],["ActionView::ReloadableTemplate::Unfreezable","","classes/ActionView/ReloadableTemplate/Unfreezable.html","",""],["ActionView::Renderable","","classes/ActionView/Renderable.html","",""],["ActionView::Template","","classes/ActionView/Template.html","",""],["ActionView::Template::EagerPath","","classes/ActionView/Template/EagerPath.html","",""],["ActionView::Template::Path","","classes/ActionView/Template/Path.html","",""],["ActionView::TemplateHandler","","classes/ActionView/TemplateHandler.html","",""],["ActionView::TemplateHandlers","","classes/ActionView/TemplateHandlers.html","",""],["ActionView::TemplateHandlers::Builder","","classes/ActionView/TemplateHandlers/Builder.html","",""],["ActionView::TemplateHandlers::Compilable","","classes/ActionView/TemplateHandlers/Compilable.html","",""],["ActionView::TemplateHandlers::Compilable::ClassMethods","","classes/ActionView/TemplateHandlers/Compilable/ClassMethods.html","",""],["ActionView::TemplateHandlers::ERB","","classes/ActionView/TemplateHandlers/ERB.html","",""],["ActionView::TemplateHandlers::RJS","","classes/ActionView/TemplateHandlers/RJS.html","",""],["ActionView::TestCase","","classes/ActionView/TestCase.html","",""],["ActionView::TestCase::TestController","","classes/ActionView/TestCase/TestController.html","",""],["ActiveRecord","","classes/ActiveRecord.html","",""],["ActiveRecord::ActiveRecordError","","classes/ActiveRecord/ActiveRecordError.html","","<p>Generic Active Record exception class.\n"],["ActiveRecord::AdapterNotFound","","classes/ActiveRecord/AdapterNotFound.html","","<p>Raised when Active Record cannot find database adapter specified in\n<code>config/database.yml</code> or programmatically. …\n"],["ActiveRecord::AdapterNotSpecified","","classes/ActiveRecord/AdapterNotSpecified.html","","<p>Raised when adapter not specified on connection (or configuration file\n<code>config/database.yml</code> misses adapter …\n"],["ActiveRecord::Aggregations","","classes/ActiveRecord/Aggregations.html","",""],["ActiveRecord::Aggregations::ClassMethods","","classes/ActiveRecord/Aggregations/ClassMethods.html","","<p>Active Record implements aggregation through a macro-like class method\ncalled <code>composed_of</code> for representing …\n"],["ActiveRecord::AssociationPreload","","classes/ActiveRecord/AssociationPreload.html","",""],["ActiveRecord::AssociationPreload::ClassMethods","","classes/ActiveRecord/AssociationPreload/ClassMethods.html","","<p>Implements the details of eager loading of ActiveRecord associations.\nApplication developers should not …\n"],["ActiveRecord::AssociationTypeMismatch","","classes/ActiveRecord/AssociationTypeMismatch.html","","<p>Raised when an object assigned to an association has an incorrect type.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Ticket</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveRecord::Associations","","classes/ActiveRecord/Associations.html","",""],["ActiveRecord::Associations::ClassMethods","","classes/ActiveRecord/Associations/ClassMethods.html","","<p>Associations are a set of macro-like class methods for tying objects\ntogether through foreign keys.  …\n"],["ActiveRecord::Associations::ClassMethods::InnerJoinDependency","","classes/ActiveRecord/Associations/ClassMethods/InnerJoinDependency.html","",""],["ActiveRecord::Associations::ClassMethods::InnerJoinDependency::InnerJoinAssociation","","classes/ActiveRecord/Associations/ClassMethods/InnerJoinDependency/InnerJoinAssociation.html","",""],["ActiveRecord::Associations::HasOneThroughAssociation","","classes/ActiveRecord/Associations/HasOneThroughAssociation.html","",""],["ActiveRecord::AttributeAssignmentError","","classes/ActiveRecord/AttributeAssignmentError.html","","<p>Raised when an error occurred while doing a mass assignment to an attribute\nthrough the <code>attributes=</code> method. …\n"],["ActiveRecord::AttributeMethods","","classes/ActiveRecord/AttributeMethods.html","",""],["ActiveRecord::AttributeMethods::ClassMethods","","classes/ActiveRecord/AttributeMethods/ClassMethods.html","","<p>Declare and check for suffixed attribute methods.\n"],["ActiveRecord::AutosaveAssociation","","classes/ActiveRecord/AutosaveAssociation.html","","<p>AutosaveAssociation is a module that takes care of automatically saving\nyour associations when the parent …\n"],["ActiveRecord::AutosaveAssociation::ClassMethods","","classes/ActiveRecord/AutosaveAssociation/ClassMethods.html","",""],["ActiveRecord::Base","","classes/ActiveRecord/Base.html","","<p>Active Record objects don&#39;t specify their attributes directly, but\nrather infer them from the table …\n"],["ActiveRecord::Batches","","classes/ActiveRecord/Batches.html","",""],["ActiveRecord::Batches::ClassMethods","","classes/ActiveRecord/Batches/ClassMethods.html","","<p>When processing large numbers of records, it&#39;s often a good idea to do\nso in batches to prevent memory …\n"],["ActiveRecord::Calculations","","classes/ActiveRecord/Calculations.html","",""],["ActiveRecord::Calculations::ClassMethods","","classes/ActiveRecord/Calculations/ClassMethods.html","",""],["ActiveRecord::Callbacks","","classes/ActiveRecord/Callbacks.html","","<p>Callbacks are hooks into the lifecycle of an Active Record object that\nallow you to trigger logic before …\n"],["ActiveRecord::ConfigurationError","","classes/ActiveRecord/ConfigurationError.html","","<p>Raised when association is being configured improperly or user tries to use\noffset and limit together …\n"],["ActiveRecord::ConnectionAdapters","","classes/ActiveRecord/ConnectionAdapters.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter","","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html","","<p>ActiveRecord supports multiple database systems. AbstractAdapter and\nrelated classes form the abstraction …\n"],["ActiveRecord::ConnectionAdapters::Column","","classes/ActiveRecord/ConnectionAdapters/Column.html","","<p>An abstract definition of a column in a table.\n"],["ActiveRecord::ConnectionAdapters::Column::Format","","classes/ActiveRecord/ConnectionAdapters/Column/Format.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionHandler","","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html","","<p>ConnectionHandler is a collection of ConnectionPool objects. It is used for\nkeeping separate connection …\n"],["ActiveRecord::ConnectionAdapters::ConnectionManagement","","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionPool","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html","","<p>Connection pool base class for managing ActiveRecord database connections.\n<p>Introduction\n<p>A connection pool …\n"],["ActiveRecord::ConnectionAdapters::DatabaseLimits","","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html","",""],["ActiveRecord::ConnectionAdapters::DatabaseStatements","","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html","","<p>The MySQL adapter will work with both Ruby/MySQL, which is a Ruby-based\nMySQL adapter that comes bundled …\n"],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html","","<p>The PostgreSQL adapter works both with the native C\n(ruby.scripting.ca/postgres/) and the pure Ruby (available …\n"],["ActiveRecord::ConnectionAdapters::QueryCache","","classes/ActiveRecord/ConnectionAdapters/QueryCache.html","",""],["ActiveRecord::ConnectionAdapters::Quoting","","classes/ActiveRecord/ConnectionAdapters/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::SQLiteAdapter","","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html","","<p>The SQLite adapter works with both the 2.x and 3.x series of SQLite with\nthe sqlite-ruby drivers (available …\n"],["ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html","",""],["ActiveRecord::ConnectionAdapters::SchemaStatements","","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::Table","","classes/ActiveRecord/ConnectionAdapters/Table.html","","<p>Represents a SQL table in an abstract way for updating a table. Also see\nTableDefinition and SchemaStatements#create_table …\n"],["ActiveRecord::ConnectionAdapters::TableDefinition","","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html","","<p>Represents the schema of an SQL table in an abstract way. This class\nprovides methods for manipulating …\n"],["ActiveRecord::ConnectionNotEstablished","","classes/ActiveRecord/ConnectionNotEstablished.html","","<p>Raised when connection to the database could not been established (for\nexample when <code>connection=</code> is given …\n"],["ActiveRecord::ConnectionTimeoutError","","classes/ActiveRecord/ConnectionTimeoutError.html","","<p>Raised when a connection could not be obtained within the connection\nacquisition timeout period.\n"],["ActiveRecord::DangerousAttributeError","","classes/ActiveRecord/DangerousAttributeError.html","","<p>Raised when attribute has a name reserved by Active Record (when attribute\nhas name of one of Active …\n"],["ActiveRecord::Dirty","","classes/ActiveRecord/Dirty.html","","<p>Track unsaved attribute changes.\n<p>A newly instantiated object is unchanged:\n\n<pre>person = Person.find_by_name(&#39;uncle ...</pre>\n"],["ActiveRecord::Dirty::ClassMethods","","classes/ActiveRecord/Dirty/ClassMethods.html","",""],["ActiveRecord::DynamicFinderMatch","","classes/ActiveRecord/DynamicFinderMatch.html","",""],["ActiveRecord::DynamicScopeMatch","","classes/ActiveRecord/DynamicScopeMatch.html","",""],["ActiveRecord::Error","","classes/ActiveRecord/Error.html","",""],["ActiveRecord::Errors","","classes/ActiveRecord/Errors.html","","<p>Active Record validation is reported to and from this object, which is used\nby Base#save to determine …\n"],["ActiveRecord::Locking","","classes/ActiveRecord/Locking.html","",""],["ActiveRecord::Locking::Optimistic","","classes/ActiveRecord/Locking/Optimistic.html","","<p>What is Optimistic Locking\n<p>Optimistic locking allows multiple users to access the same record for\nedits, …\n"],["ActiveRecord::Locking::Optimistic::ClassMethods","","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html","",""],["ActiveRecord::Locking::Pessimistic","","classes/ActiveRecord/Locking/Pessimistic.html","","<p>Locking::Pessimistic provides support for row-level locking using SELECT …\nFOR UPDATE and other lock …\n"],["ActiveRecord::Migration","","classes/ActiveRecord/Migration.html","","<p>Migrations can manage the evolution of a schema used by several physical\ndatabases. It&#39;s a solution …\n"],["ActiveRecord::MigrationProxy","","classes/ActiveRecord/MigrationProxy.html","","<p>MigrationProxy is used to defer loading of the actual migration classes\nuntil they are needed\n"],["ActiveRecord::MissingAttributeError","","classes/ActiveRecord/MissingAttributeError.html","","<p>Raised when you&#39;ve tried to access a column which wasn&#39;t loaded by\nyour finder. Typically this …\n"],["ActiveRecord::MultiparameterAssignmentErrors","","classes/ActiveRecord/MultiparameterAssignmentErrors.html","","<p>Raised when there are multiple errors while doing a mass assignment through\nthe <code>attributes</code> method. The …\n"],["ActiveRecord::NamedScope","","classes/ActiveRecord/NamedScope.html","",""],["ActiveRecord::NamedScope::ClassMethods","","classes/ActiveRecord/NamedScope/ClassMethods.html","",""],["ActiveRecord::NamedScope::Scope","","classes/ActiveRecord/NamedScope/Scope.html","",""],["ActiveRecord::NestedAttributes","","classes/ActiveRecord/NestedAttributes.html","",""],["ActiveRecord::NestedAttributes::ClassMethods","","classes/ActiveRecord/NestedAttributes/ClassMethods.html","","<p>Nested Attributes\n<p>Nested attributes allow you to save attributes on associated records\nthrough the parent. …\n"],["ActiveRecord::NestedAttributes::TooManyRecords","","classes/ActiveRecord/NestedAttributes/TooManyRecords.html","",""],["ActiveRecord::Observer","","classes/ActiveRecord/Observer.html","","<p>Observer classes respond to lifecycle callbacks to implement trigger-like\nbehavior outside the original …\n"],["ActiveRecord::Observing","","classes/ActiveRecord/Observing.html","",""],["ActiveRecord::Observing::ClassMethods","","classes/ActiveRecord/Observing/ClassMethods.html","",""],["ActiveRecord::PreparedStatementInvalid","","classes/ActiveRecord/PreparedStatementInvalid.html","","<p>Raised when number of bind variables in statement given to\n<code>:condition</code> key (for example, when using <code>find</code> …\n"],["ActiveRecord::QueryCache","","classes/ActiveRecord/QueryCache.html","",""],["ActiveRecord::QueryCache::ClassMethods","","classes/ActiveRecord/QueryCache/ClassMethods.html","",""],["ActiveRecord::ReadOnlyRecord","","classes/ActiveRecord/ReadOnlyRecord.html","","<p>Raised on attempt to update record that is instantiated as read only.\n"],["ActiveRecord::RecordInvalid","","classes/ActiveRecord/RecordInvalid.html","","<p>Raised by <code>save!</code> and <code>create!</code> when the record is\ninvalid.  Use the <code>record</code> method to retrieve the record …\n"],["ActiveRecord::RecordNotFound","","classes/ActiveRecord/RecordNotFound.html","","<p>Raised when Active Record cannot find record by given id or set of ids.\n"],["ActiveRecord::RecordNotSaved","","classes/ActiveRecord/RecordNotSaved.html","","<p>Raised by ActiveRecord::Base.save! and ActiveRecord::Base.create! methods\nwhen record cannot be saved …\n"],["ActiveRecord::Reflection","","classes/ActiveRecord/Reflection.html","",""],["ActiveRecord::Reflection::ClassMethods","","classes/ActiveRecord/Reflection/ClassMethods.html","","<p>Reflection allows you to interrogate Active Record classes and objects\nabout their associations and aggregations. …\n"],["ActiveRecord::Reflection::MacroReflection","","classes/ActiveRecord/Reflection/MacroReflection.html","","<p>Abstract base class for AggregateReflection and AssociationReflection that\ndescribes the interface available …\n"],["ActiveRecord::Rollback","","classes/ActiveRecord/Rollback.html","","<p>ActiveRecord::Transactions::ClassMethods.transaction uses this exception to\ndistinguish a deliberate …\n"],["ActiveRecord::Schema","","classes/ActiveRecord/Schema.html","","<p>Allows programmers to programmatically define a schema in a portable DSL.\nThis means you can define tables, …\n"],["ActiveRecord::Serialization","","classes/ActiveRecord/Serialization.html","",""],["ActiveRecord::SerializationTypeMismatch","","classes/ActiveRecord/SerializationTypeMismatch.html","","<p>Raised when unserialized object&#39;s type mismatches one specified for\nserializable field.\n"],["ActiveRecord::SessionStore","","classes/ActiveRecord/SessionStore.html","","<p>A session store backed by an Active Record class.  A default class is\nprovided, but any object duck-typing …\n"],["ActiveRecord::SessionStore::Session","","classes/ActiveRecord/SessionStore/Session.html","","<p>The default Active Record class.\n"],["ActiveRecord::SessionStore::SqlBypass","","classes/ActiveRecord/SessionStore/SqlBypass.html","","<p>A barebones session store which duck-types with the default session store\nbut bypasses Active Record …\n"],["ActiveRecord::StaleObjectError","","classes/ActiveRecord/StaleObjectError.html","","<p>Raised on attempt to save stale record. Record is stale when it&#39;s being\nsaved in another query after …\n"],["ActiveRecord::StatementInvalid","","classes/ActiveRecord/StatementInvalid.html","","<p>Raised when SQL statement cannot be executed by the database (for example,\nit&#39;s often the case for …\n"],["ActiveRecord::TestFixtures","","classes/ActiveRecord/TestFixtures.html","",""],["ActiveRecord::TestFixtures::ClassMethods","","classes/ActiveRecord/TestFixtures/ClassMethods.html","",""],["ActiveRecord::Timestamp","","classes/ActiveRecord/Timestamp.html","","<p>Active Record automatically timestamps create and update operations if the\ntable has fields named created_at/created_on …\n"],["ActiveRecord::Transactions","","classes/ActiveRecord/Transactions.html","","<p>See ActiveRecord::Transactions::ClassMethods for documentation.\n"],["ActiveRecord::Transactions::ClassMethods","","classes/ActiveRecord/Transactions/ClassMethods.html","","<p>Transactions are protective blocks where SQL statements are only permanent\nif they can all succeed as …\n"],["ActiveRecord::UnknownAttributeError","","classes/ActiveRecord/UnknownAttributeError.html","","<p>Raised when unknown attributes are supplied via mass assignment.\n"],["ActiveRecord::Validations","","classes/ActiveRecord/Validations.html","","<p>Please do have a look at ActiveRecord::Validations::ClassMethods for a\nhigher level of validations.\n<p>Active …\n"],["ActiveRecord::Validations::ClassMethods","","classes/ActiveRecord/Validations/ClassMethods.html","","<p>Active Record classes can implement validations in several ways. The\nhighest level, easiest to read, …\n"],["ActiveResource","","classes/ActiveResource.html","",""],["ActiveResource::BadRequest","","classes/ActiveResource/BadRequest.html","","<p>400 Bad Request\n<p>400 Bad Request\n"],["ActiveResource::Base","","classes/ActiveResource/Base.html","","<p>ActiveResource::Base is the main class for mapping RESTful resources as\nmodels in a Rails application. …\n"],["ActiveResource::ClientError","","classes/ActiveResource/ClientError.html","","<p>4xx Client Error\n<p>4xx Client Error\n"],["ActiveResource::Connection","","classes/ActiveResource/Connection.html","","<p>Class to handle connections to remote web services. This class is used by\nActiveResource::Base to interface …\n"],["ActiveResource::CustomMethods","","classes/ActiveResource/CustomMethods.html","","<p>A module to support custom REST methods and sub-resources, allowing you to\nbreak out of the “default” …\n"],["ActiveResource::CustomMethods::ClassMethods","","classes/ActiveResource/CustomMethods/ClassMethods.html","",""],["ActiveResource::CustomMethods::InstanceMethods","","classes/ActiveResource/CustomMethods/InstanceMethods.html","",""],["ActiveResource::Errors","","classes/ActiveResource/Errors.html","","<p>Active Resource validation is reported to and from this object, which is\nused by Base#save to determine …\n"],["ActiveResource::ForbiddenAccess","","classes/ActiveResource/ForbiddenAccess.html","","<p>403 Forbidden\n<p>403 Forbidden\n"],["ActiveResource::Formats","","classes/ActiveResource/Formats.html","",""],["ActiveResource::Formats::JsonFormat","","classes/ActiveResource/Formats/JsonFormat.html","",""],["ActiveResource::Formats::XmlFormat","","classes/ActiveResource/Formats/XmlFormat.html","",""],["ActiveResource::HttpMock","","classes/ActiveResource/HttpMock.html","","<p>One thing that has always been a pain with remote web services is testing. \nThe HttpMock class makes …\n"],["ActiveResource::InvalidRequestError","","classes/ActiveResource/InvalidRequestError.html","",""],["ActiveResource::Request","","classes/ActiveResource/Request.html","",""],["ActiveResource::ResourceConflict","","classes/ActiveResource/ResourceConflict.html","","<p>409 Conflict\n<p>409 Conflict\n"],["ActiveResource::ResourceGone","","classes/ActiveResource/ResourceGone.html","","<p>410 Gone\n<p>410 Gone\n"],["ActiveResource::ResourceNotFound","","classes/ActiveResource/ResourceNotFound.html","","<p>404 Not Found\n<p>404 Not Found\n"],["ActiveResource::Response","","classes/ActiveResource/Response.html","",""],["ActiveResource::SSLError","","classes/ActiveResource/SSLError.html","","<p>Raised when a OpenSSL::SSL::SSLError occurs.\n<p>Raised when a OpenSSL::SSL::SSLError occurs.\n"],["ActiveResource::ServerError","","classes/ActiveResource/ServerError.html","","<p>5xx Server Error\n<p>5xx Server Error\n"],["ActiveResource::TimeoutError","","classes/ActiveResource/TimeoutError.html","","<p>Raised when a Timeout::Error occurs.\n<p>Raised when a Timeout::Error occurs.\n"],["ActiveResource::UnauthorizedAccess","","classes/ActiveResource/UnauthorizedAccess.html","","<p>401 Unauthorized\n<p>401 Unauthorized\n"],["ActiveResource::Validations","","classes/ActiveResource/Validations.html","","<p>Module to support validation and errors with Active Resource objects. The\nmodule overrides Base#save …\n"],["ActiveSupport","","classes/ActiveSupport.html","","<p>OrderedHash is namespaced to prevent conflicts with other implementations\n<p>The TimeZone class serves as …\n"],["ActiveSupport::BacktraceCleaner","","classes/ActiveSupport/BacktraceCleaner.html","","<p>Many backtraces include too much information that&#39;s not relevant for\nthe context. This makes it hard …\n"],["ActiveSupport::Base64","","classes/ActiveSupport/Base64.html","","<p>Base64 provides utility methods for encoding and de-coding binary data \nusing a base 64 representation. …\n"],["ActiveSupport::BasicObject","","classes/ActiveSupport/BasicObject.html","","<p>A class with no predefined methods that behaves similarly to Builder&#39;s\nBlankSlate. Used for proxy …\n"],["ActiveSupport::BufferedLogger","","classes/ActiveSupport/BufferedLogger.html","","<p>Inspired by the buffered logger idea by Ezra\n"],["ActiveSupport::BufferedLogger::Severity","","classes/ActiveSupport/BufferedLogger/Severity.html","",""],["ActiveSupport::Cache","","classes/ActiveSupport/Cache.html","","<p>See ActiveSupport::Cache::Store for documentation.\n"],["ActiveSupport::Cache::CompressedMemCacheStore","","classes/ActiveSupport/Cache/CompressedMemCacheStore.html","",""],["ActiveSupport::Cache::FileStore","","classes/ActiveSupport/Cache/FileStore.html","","<p>A cache store implementation which stores everything on the filesystem.\n"],["ActiveSupport::Cache::MemCacheStore","","classes/ActiveSupport/Cache/MemCacheStore.html","","<p>A cache store implementation which stores data in Memcached:\nwww.danga.com/memcached/\n<p>This is currently …\n"],["ActiveSupport::Cache::MemoryStore","","classes/ActiveSupport/Cache/MemoryStore.html","","<p>A cache store implementation which stores everything into memory in the\nsame process. If you&#39;re running …\n"],["ActiveSupport::Cache::Store","","classes/ActiveSupport/Cache/Store.html","","<p>An abstract cache store class. There are multiple cache store\nimplementations, each having its own additional …\n"],["ActiveSupport::Cache::Strategy","","classes/ActiveSupport/Cache/Strategy.html","",""],["ActiveSupport::Cache::Strategy::LocalCache","","classes/ActiveSupport/Cache/Strategy/LocalCache.html","",""],["ActiveSupport::Cache::SynchronizedMemoryStore","","classes/ActiveSupport/Cache/SynchronizedMemoryStore.html","","<p>Like MemoryStore, but thread-safe.\n"],["ActiveSupport::Callbacks","","classes/ActiveSupport/Callbacks.html","","<p>Callbacks are hooks into the lifecycle of an object that allow you to\ntrigger logic before or after an …\n"],["ActiveSupport::Callbacks::Callback","","classes/ActiveSupport/Callbacks/Callback.html","",""],["ActiveSupport::Callbacks::CallbackChain","","classes/ActiveSupport/Callbacks/CallbackChain.html","",""],["ActiveSupport::Callbacks::ClassMethods","","classes/ActiveSupport/Callbacks/ClassMethods.html","",""],["ActiveSupport::CoreExtensions","","classes/ActiveSupport/CoreExtensions.html","",""],["ActiveSupport::CoreExtensions::Array","","classes/ActiveSupport/CoreExtensions/Array.html","",""],["ActiveSupport::CoreExtensions::Array::Access","","classes/ActiveSupport/CoreExtensions/Array/Access.html","","<p>Makes it easier to access parts of an array.\n"],["ActiveSupport::CoreExtensions::Array::Conversions","","classes/ActiveSupport/CoreExtensions/Array/Conversions.html","",""],["ActiveSupport::CoreExtensions::Array::ExtractOptions","","classes/ActiveSupport/CoreExtensions/Array/ExtractOptions.html","",""],["ActiveSupport::CoreExtensions::Array::Grouping","","classes/ActiveSupport/CoreExtensions/Array/Grouping.html","",""],["ActiveSupport::CoreExtensions::Array::RandomAccess","","classes/ActiveSupport/CoreExtensions/Array/RandomAccess.html","",""],["ActiveSupport::CoreExtensions::Array::Wrapper","","classes/ActiveSupport/CoreExtensions/Array/Wrapper.html","",""],["ActiveSupport::CoreExtensions::Base64","","classes/ActiveSupport/CoreExtensions/Base64.html","",""],["ActiveSupport::CoreExtensions::Base64::Encoding","","classes/ActiveSupport/CoreExtensions/Base64/Encoding.html","",""],["ActiveSupport::CoreExtensions::BigDecimal","","classes/ActiveSupport/CoreExtensions/BigDecimal.html","",""],["ActiveSupport::CoreExtensions::BigDecimal::Conversions","","classes/ActiveSupport/CoreExtensions/BigDecimal/Conversions.html","",""],["ActiveSupport::CoreExtensions::Date","","classes/ActiveSupport/CoreExtensions/Date.html","",""],["ActiveSupport::CoreExtensions::Date::Behavior","","classes/ActiveSupport/CoreExtensions/Date/Behavior.html","",""],["ActiveSupport::CoreExtensions::Date::Calculations","","classes/ActiveSupport/CoreExtensions/Date/Calculations.html","","<p>Enables the use of time calculations within Date itself\n"],["ActiveSupport::CoreExtensions::Date::Calculations::ClassMethods","","classes/ActiveSupport/CoreExtensions/Date/Calculations/ClassMethods.html","",""],["ActiveSupport::CoreExtensions::Date::Conversions","","classes/ActiveSupport/CoreExtensions/Date/Conversions.html","","<p>Converting dates to formatted strings, times, and datetimes.\n"],["ActiveSupport::CoreExtensions::DateTime","","classes/ActiveSupport/CoreExtensions/DateTime.html","",""],["ActiveSupport::CoreExtensions::DateTime::Calculations","","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html","","<p>Enables the use of time calculations within DateTime itself\n"],["ActiveSupport::CoreExtensions::DateTime::Calculations::ClassMethods","","classes/ActiveSupport/CoreExtensions/DateTime/Calculations/ClassMethods.html","",""],["ActiveSupport::CoreExtensions::DateTime::Conversions","","classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html","","<p>Converting datetimes to formatted strings, dates, and times.\n"],["ActiveSupport::CoreExtensions::File","","classes/ActiveSupport/CoreExtensions/File.html","",""],["ActiveSupport::CoreExtensions::File::Atomic","","classes/ActiveSupport/CoreExtensions/File/Atomic.html","",""],["ActiveSupport::CoreExtensions::Float","","classes/ActiveSupport/CoreExtensions/Float.html","",""],["ActiveSupport::CoreExtensions::Float::Rounding","","classes/ActiveSupport/CoreExtensions/Float/Rounding.html","",""],["ActiveSupport::CoreExtensions::Float::Time","","classes/ActiveSupport/CoreExtensions/Float/Time.html","",""],["ActiveSupport::CoreExtensions::Hash","","classes/ActiveSupport/CoreExtensions/Hash.html","",""],["ActiveSupport::CoreExtensions::Hash::Conversions","","classes/ActiveSupport/CoreExtensions/Hash/Conversions.html","",""],["ActiveSupport::CoreExtensions::Hash::Conversions::ClassMethods","","classes/ActiveSupport/CoreExtensions/Hash/Conversions/ClassMethods.html","",""],["ActiveSupport::CoreExtensions::Hash::DeepMerge","","classes/ActiveSupport/CoreExtensions/Hash/DeepMerge.html","","<p>Allows for deep merging\n"],["ActiveSupport::CoreExtensions::Hash::Diff","","classes/ActiveSupport/CoreExtensions/Hash/Diff.html","",""],["ActiveSupport::CoreExtensions::Hash::Except","","classes/ActiveSupport/CoreExtensions/Hash/Except.html","","<p>Return a hash that includes everything but the given keys. This is useful\nfor limiting a set of parameters …\n"],["ActiveSupport::CoreExtensions::Hash::Keys","","classes/ActiveSupport/CoreExtensions/Hash/Keys.html","",""],["ActiveSupport::CoreExtensions::Hash::ReverseMerge","","classes/ActiveSupport/CoreExtensions/Hash/ReverseMerge.html","","<p>Allows for reverse merging two hashes where the keys in the calling hash\ntake precedence over those in …\n"],["ActiveSupport::CoreExtensions::Hash::Slice","","classes/ActiveSupport/CoreExtensions/Hash/Slice.html","","<p>Slice a hash to include only the given keys. This is useful for limiting an\noptions hash to valid keys …\n"],["ActiveSupport::CoreExtensions::Integer","","classes/ActiveSupport/CoreExtensions/Integer.html","",""],["ActiveSupport::CoreExtensions::Integer::EvenOdd","","classes/ActiveSupport/CoreExtensions/Integer/EvenOdd.html","","<p>For checking if a fixnum is even or odd.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">even?</span>  <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">odd?</span>   <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">even?</span>  <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">odd?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveSupport::CoreExtensions::Integer::Inflections","","classes/ActiveSupport/CoreExtensions/Integer/Inflections.html","",""],["ActiveSupport::CoreExtensions::Integer::Time","","classes/ActiveSupport/CoreExtensions/Integer/Time.html","","<p>Enables the use of time calculations and declarations, like 45.minutes +\n2.hours + 4.years.\n<p>These methods …\n"],["ActiveSupport::CoreExtensions::Module","","classes/ActiveSupport/CoreExtensions/Module.html","","<p>Various extensions for the Ruby core Module class.\n"],["ActiveSupport::CoreExtensions::Numeric","","classes/ActiveSupport/CoreExtensions/Numeric.html","",""],["ActiveSupport::CoreExtensions::Numeric::Bytes","","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html","","<p>Enables the use of byte calculations and declarations, like 45.bytes +\n2.6.megabytes\n"],["ActiveSupport::CoreExtensions::Numeric::Conversions","","classes/ActiveSupport/CoreExtensions/Numeric/Conversions.html","",""],["ActiveSupport::CoreExtensions::Numeric::Time","","classes/ActiveSupport/CoreExtensions/Numeric/Time.html","","<p>Enables the use of time calculations and declarations, like 45.minutes +\n2.hours + 4.years.\n<p>These methods …\n"],["ActiveSupport::CoreExtensions::Pathname","","classes/ActiveSupport/CoreExtensions/Pathname.html","",""],["ActiveSupport::CoreExtensions::Pathname::CleanWithin","","classes/ActiveSupport/CoreExtensions/Pathname/CleanWithin.html","",""],["ActiveSupport::CoreExtensions::Range","","classes/ActiveSupport/CoreExtensions/Range.html","",""],["ActiveSupport::CoreExtensions::Range::BlocklessStep","","classes/ActiveSupport/CoreExtensions/Range/BlocklessStep.html","","<p>Return an array when step is called without a block.\n"],["ActiveSupport::CoreExtensions::Range::Conversions","","classes/ActiveSupport/CoreExtensions/Range/Conversions.html","","<p>Getting ranges in different convenient string representations and other\nobjects\n"],["ActiveSupport::CoreExtensions::Range::IncludeRange","","classes/ActiveSupport/CoreExtensions/Range/IncludeRange.html","","<p>Check if a Range includes another Range.\n"],["ActiveSupport::CoreExtensions::Range::Overlaps","","classes/ActiveSupport/CoreExtensions/Range/Overlaps.html","","<p>Check if Ranges overlap.\n"],["ActiveSupport::CoreExtensions::String","","classes/ActiveSupport/CoreExtensions/String.html","",""],["ActiveSupport::CoreExtensions::String::Access","","classes/ActiveSupport/CoreExtensions/String/Access.html","","<p>Makes it easier to access parts of a string, such as specific characters\nand substrings.\n"],["ActiveSupport::CoreExtensions::String::Behavior","","classes/ActiveSupport/CoreExtensions/String/Behavior.html","",""],["ActiveSupport::CoreExtensions::String::Conversions","","classes/ActiveSupport/CoreExtensions/String/Conversions.html","","<p>Converting strings to other objects\n"],["ActiveSupport::CoreExtensions::String::Filters","","classes/ActiveSupport/CoreExtensions/String/Filters.html","",""],["ActiveSupport::CoreExtensions::String::Inflections","","classes/ActiveSupport/CoreExtensions/String/Inflections.html","","<p>String inflections define new methods on the String class to transform\nnames for different purposes. …\n"],["ActiveSupport::CoreExtensions::String::Iterators","","classes/ActiveSupport/CoreExtensions/String/Iterators.html","","<p>Custom string iterators\n"],["ActiveSupport::CoreExtensions::String::Multibyte","","classes/ActiveSupport/CoreExtensions/String/Multibyte.html","","<p>Implements multibyte methods for easier access to multibyte characters in a\nString instance.\n"],["ActiveSupport::CoreExtensions::String::StartsEndsWith","","classes/ActiveSupport/CoreExtensions/String/StartsEndsWith.html","","<p>Additional string tests.\n"],["ActiveSupport::CoreExtensions::Time","","classes/ActiveSupport/CoreExtensions/Time.html","",""],["ActiveSupport::CoreExtensions::Time::Behavior","","classes/ActiveSupport/CoreExtensions/Time/Behavior.html","",""],["ActiveSupport::CoreExtensions::Time::Calculations","","classes/ActiveSupport/CoreExtensions/Time/Calculations.html","","<p>Enables the use of time calculations within Time itself\n"],["ActiveSupport::CoreExtensions::Time::Calculations::ClassMethods","","classes/ActiveSupport/CoreExtensions/Time/Calculations/ClassMethods.html","",""],["ActiveSupport::CoreExtensions::Time::Conversions","","classes/ActiveSupport/CoreExtensions/Time/Conversions.html","","<p>Converting times to formatted strings, dates, and datetimes.\n"],["ActiveSupport::CoreExtensions::Time::Zones","","classes/ActiveSupport/CoreExtensions/Time/Zones.html","",""],["ActiveSupport::CoreExtensions::Time::Zones::ClassMethods","","classes/ActiveSupport/CoreExtensions/Time/Zones/ClassMethods.html","",""],["ActiveSupport::Deprecation","","classes/ActiveSupport/Deprecation.html","",""],["ActiveSupport::Deprecation::DeprecatedObjectProxy","","classes/ActiveSupport/Deprecation/DeprecatedObjectProxy.html","",""],["ActiveSupport::Duration","","classes/ActiveSupport/Duration.html","","<p>Provides accurate date and time measurements using Date#advance and \nTime#advance, respectively. It mainly …\n"],["ActiveSupport::Gzip","","classes/ActiveSupport/Gzip.html","","<p>A convenient wrapper for the zlib standard library that allows\ncompression/decompression of strings with …\n"],["ActiveSupport::Gzip::Stream","","classes/ActiveSupport/Gzip/Stream.html","",""],["ActiveSupport::Inflector","","classes/ActiveSupport/Inflector.html","","<p>The Inflector transforms words from singular to plural, class names to\ntable names, modularized class …\n"],["ActiveSupport::Inflector::Inflections","","classes/ActiveSupport/Inflector/Inflections.html","","<p>A singleton instance of this class is yielded by Inflector.inflections,\nwhich can then be used to specify …\n"],["ActiveSupport::JSON","","classes/ActiveSupport/JSON.html","",""],["ActiveSupport::JSON::Backends","","classes/ActiveSupport/JSON/Backends.html","",""],["ActiveSupport::JSON::Backends::JSONGem","","classes/ActiveSupport/JSON/Backends/JSONGem.html","",""],["ActiveSupport::JSON::Backends::OkJson","","classes/ActiveSupport/JSON/Backends/OkJson.html","",""],["ActiveSupport::JSON::Backends::OkJson::ParseError","","classes/ActiveSupport/OkJson/Error.html","",""],["ActiveSupport::JSON::Backends::Yajl","","classes/ActiveSupport/JSON/Backends/Yajl.html","",""],["ActiveSupport::JSON::Backends::Yaml","","classes/ActiveSupport/JSON/Backends/Yaml.html","",""],["ActiveSupport::JSON::Encoding","","classes/ActiveSupport/JSON/Encoding.html","",""],["ActiveSupport::JSON::Encoding::CircularReferenceError","","classes/ActiveSupport/JSON/Encoding/CircularReferenceError.html","",""],["ActiveSupport::JSON::Variable","","classes/ActiveSupport/JSON/Variable.html","","<p>A string that returns itself as its JSON-encoded form.\n"],["ActiveSupport::Memoizable","","classes/ActiveSupport/Memoizable.html","",""],["ActiveSupport::Memoizable::InstanceMethods","","classes/ActiveSupport/Memoizable/InstanceMethods.html","",""],["ActiveSupport::MessageEncryptor","","classes/ActiveSupport/MessageEncryptor.html","","<p>MessageEncryptor is a simple way to encrypt values which get stored\nsomewhere  you don&#39;t trust.\n<p>The …\n"],["ActiveSupport::MessageEncryptor::InvalidMessage","","classes/ActiveSupport/MessageEncryptor/InvalidMessage.html","",""],["ActiveSupport::MessageVerifier","","classes/ActiveSupport/MessageVerifier.html","","<p>MessageVerifier makes it easy to generate and verify messages which are\nsigned to prevent tampering. …\n"],["ActiveSupport::MessageVerifier::InvalidSignature","","classes/ActiveSupport/MessageVerifier/InvalidSignature.html","",""],["ActiveSupport::ModelName","","classes/ActiveSupport/ModelName.html","",""],["ActiveSupport::Multibyte","","classes/ActiveSupport/Multibyte.html","",""],["ActiveSupport::Multibyte::Chars","","classes/ActiveSupport/Multibyte/Chars.html","","<p>Chars enables you to work transparently with UTF-8 encoding in the Ruby\nString class without having extensive …\n"],["ActiveSupport::Multibyte::Codepoint","","classes/ActiveSupport/Multibyte/Codepoint.html","","<p>Holds data about a codepoint in the Unicode database\n"],["ActiveSupport::Multibyte::EncodingError","","classes/ActiveSupport/Multibyte/EncodingError.html","","<p>Raised when a problem with the encoding was found.\n"],["ActiveSupport::Multibyte::UnicodeDatabase","","classes/ActiveSupport/Multibyte/UnicodeDatabase.html","","<p>Holds static data from the Unicode database\n"],["ActiveSupport::OkJson","","classes/ActiveSupport/OkJson.html","","<p>Some parts adapted from golang.org/src/pkg/json/decode.go and\ngolang.org/src/pkg/utf8/utf8.go\n"],["ActiveSupport::OkJson::Error","","classes/ActiveSupport/OkJson/Error.html","",""],["ActiveSupport::OkJson::Utf8Error","","classes/ActiveSupport/OkJson/Utf8Error.html","",""],["ActiveSupport::Rescuable","","classes/ActiveSupport/Rescuable.html","","<p>Rescuable module adds support for easier exception handling.\n"],["ActiveSupport::Rescuable::ClassMethods","","classes/ActiveSupport/Rescuable/ClassMethods.html","",""],["ActiveSupport::SafeBuffer","","classes/ActiveSupport/SafeBuffer.html","",""],["ActiveSupport::SecureRandom","","classes/ActiveSupport/SecureRandom.html","","<p>Secure random number generator interface.\n<p>This library is an interface for secure random number generator …\n"],["ActiveSupport::StringInquirer","","classes/ActiveSupport/StringInquirer.html","","<p>Wrapping a string in this class gives you a prettier way to test for\nequality. The value returned by …\n"],["ActiveSupport::TestCase","","classes/ActiveSupport/TestCase.html","",""],["ActiveSupport::Testing","","classes/ActiveSupport/Testing.html","",""],["ActiveSupport::Testing::Assertions","","classes/ActiveSupport/Testing/Assertions.html","",""],["ActiveSupport::Testing::Declarative","","classes/ActiveSupport/Testing/Declarative.html","",""],["ActiveSupport::Testing::Performance","","classes/ActiveSupport/Testing/Performance.html","",""],["ActiveSupport::Testing::Performance::Benchmarker","","classes/ActiveSupport/Testing/Performance/Benchmarker.html","",""],["ActiveSupport::Testing::Performance::Metrics","","classes/ActiveSupport/Testing/Performance/Metrics.html","",""],["ActiveSupport::Testing::Performance::Metrics::Base","","classes/ActiveSupport/Testing/Performance/Metrics/Base.html","",""],["ActiveSupport::Testing::Performance::Metrics::CpuTime","","classes/ActiveSupport/Testing/Performance/Metrics/CpuTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::GcRuns","","classes/ActiveSupport/Testing/Performance/Metrics/GcRuns.html","",""],["ActiveSupport::Testing::Performance::Metrics::GcTime","","classes/ActiveSupport/Testing/Performance/Metrics/GcTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::Memory","","classes/ActiveSupport/Testing/Performance/Metrics/Memory.html","",""],["ActiveSupport::Testing::Performance::Metrics::Objects","","classes/ActiveSupport/Testing/Performance/Metrics/Objects.html","",""],["ActiveSupport::Testing::Performance::Metrics::ProcessTime","","classes/ActiveSupport/Testing/Performance/Metrics/ProcessTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::Time","","classes/ActiveSupport/Testing/Performance/Metrics/Time.html","",""],["ActiveSupport::Testing::Performance::Metrics::WallTime","","classes/ActiveSupport/Testing/Performance/Metrics/WallTime.html","",""],["ActiveSupport::Testing::Performance::Performer","","classes/ActiveSupport/Testing/Performance/Performer.html","",""],["ActiveSupport::Testing::Performance::Profiler","","classes/ActiveSupport/Testing/Performance/Profiler.html","",""],["ActiveSupport::Testing::SetupAndTeardown","","classes/ActiveSupport/Testing/SetupAndTeardown.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ForClassicTestUnit","","classes/ActiveSupport/Testing/SetupAndTeardown/ForClassicTestUnit.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ForMiniTest","","classes/ActiveSupport/Testing/SetupAndTeardown/ForMiniTest.html","",""],["ActiveSupport::TimeWithZone","","classes/ActiveSupport/TimeWithZone.html","","<p>A Time-like class that can represent a time in any time zone. Necessary\nbecause standard Ruby Time instances …\n"],["ActiveSupport::TimeZone","","classes/ActiveSupport/TimeZone.html","",""],["ActiveSupport::XmlMini","","classes/ActiveSupport/XmlMini.html","","<p>XmlMini\n<p>To use the much faster libxml parser:\n\n<pre>gem &#39;libxml-ruby&#39;, &#39;=0.9.7&#39;\nXmlMini.backend = &#39;LibXML&#39;</pre>\n"],["ActiveSupport::XmlMini_LibXMLSAX","","classes/ActiveSupport/XmlMini_LibXMLSAX.html","",""],["ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],["ActiveSupport::XmlMini_Nokogiri","","classes/ActiveSupport/XmlMini_Nokogiri.html","",""],["ActiveSupport::XmlMini_Nokogiri::Conversions","","classes/ActiveSupport/XmlMini_Nokogiri/Conversions.html","",""],["ActiveSupport::XmlMini_Nokogiri::Conversions::Document","","classes/ActiveSupport/XmlMini_Nokogiri/Conversions/Document.html","",""],["ActiveSupport::XmlMini_Nokogiri::Conversions::Node","","classes/ActiveSupport/XmlMini_Nokogiri/Conversions/Node.html","",""],["ActiveSupport::XmlMini_NokogiriSAX","","classes/ActiveSupport/XmlMini_NokogiriSAX.html","",""],["ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],["Benchmark","","classes/Benchmark.html","",""],["BlankSlate","","classes/BlankSlate.html","","<p>BlankSlate provides an abstract base class with no predefined methods\n(except for <code>__send__</code> and <code>__id__</code> …\n"],["Builder","","classes/Builder.html","","<p>BlankSlate has been promoted to a top level name and is now available as a\nstandalone gem.  We make the …\n"],["Builder::BlankSlate","","classes/BlankSlate.html","","<p>BlankSlate provides an abstract base class with no predefined methods\n(except for <code>__send__</code> and <code>__id__</code> …\n"],["Builder::CSS","","classes/Builder/CSS.html","","<p>Create a Cascading Style Sheet (CSS) using Ruby.\n<p>Example usage:\n\n<pre>css = Builder::CSS.new\n\ntext_color     ...</pre>\n"],["Builder::IllegalBlockError","","classes/Builder/IllegalBlockError.html","","<p>Generic error for builder\n"],["Builder::XmlBase","","classes/Builder/XmlBase.html","","<p>XmlBase is a base class for building XML builders.  See Builder::XmlMarkup\nand Builder::XmlEvents for …\n"],["Builder::XmlEvents","","classes/Builder/XmlEvents.html","","<p>Create a series of SAX-like XML events (e.g. start_tag, end_tag) from the\nmarkup code.  XmlEvent objects …\n"],["Builder::XmlMarkup","","classes/Builder/XmlMarkup.html","","<p>Create XML markup easily.  All (well, almost all) methods sent to an\nXmlMarkup object will be translated …\n"],["CGI","","classes/CGI.html","",""],["CGI::Cookie","","classes/CGI/Cookie.html","",""],["CGI::QueryExtension","","classes/CGI/QueryExtension.html","",""],["Class","","classes/Class.html","","<p>Extends the class object with class and instance accessors for class\nattributes, just like the native …\n"],["Commands","","classes/Commands.html","",""],["Commands::Discover","","classes/Commands/Discover.html","",""],["Commands::Info","","classes/Commands/Info.html","",""],["Commands::Install","","classes/Commands/Install.html","",""],["Commands::List","","classes/Commands/List.html","",""],["Commands::Plugin","","classes/Commands/Plugin.html","",""],["Commands::Remove","","classes/Commands/Remove.html","",""],["Commands::Source","","classes/Commands/Source.html","",""],["Commands::Sources","","classes/Commands/Sources.html","",""],["Commands::Unsource","","classes/Commands/Unsource.html","",""],["Commands::Update","","classes/Commands/Update.html","",""],["Continuum","","classes/Continuum.html","",""],["Continuum::Entry","","classes/Continuum/Entry.html","",""],["Date","","classes/Date.html","",""],["DateTime","","classes/DateTime.html","",""],["Dir","","classes/Dir.html","",""],["DispatchServlet","","classes/DispatchServlet.html","","<p>A custom dispatch servlet for use with WEBrick. It dispatches requests\n(using the Rails Dispatcher) to …\n"],["ERB","","classes/ERB.html","",""],["ERB::Util","","classes/ERB/Util.html","",""],["Enumerable","","classes/Enumerable.html","",""],["FalseClass","","classes/FalseClass.html","",""],["Fixnum","","classes/Fixnum.html","","<p>Enhance the Fixnum class with a XML escaped character conversion.\n"],["Fixtures","","classes/Fixtures.html","","<p>Fixtures are a way of organizing data that you want to test against; in\nshort, sample data.\n<p>Fixture formats …\n"],["Gem","","classes/Gem.html","",""],["GetText","","classes/GetText.html","",""],["GetText::PoParser","","classes/GetText/PoParser.html","",""],["HTML","","classes/HTML.html","",""],["HTML::FullSanitizer","","classes/HTML/FullSanitizer.html","",""],["HTML::LinkSanitizer","","classes/HTML/LinkSanitizer.html","",""],["HTML::Sanitizer","","classes/HTML/Sanitizer.html","",""],["HTML::Selector","","classes/HTML/Selector.html","","<p>Selects HTML elements using CSS 2 selectors.\n<p>The <code>Selector</code> class uses CSS selector expressions to match …\n"],["HTML::Tag","","classes/HTML/Tag.html","",""],["HTML::WhiteListSanitizer","","classes/HTML/WhiteListSanitizer.html","",""],["Hash","","classes/Hash.html","",""],["HashWithIndifferentAccess","","classes/HashWithIndifferentAccess.html","","<p>This class has dubious semantics and we only have it so that people can\nwrite params instead of params …\n"],["I18n","","classes/I18n.html","","<p>This extension stores translation stub records for missing translations to\nthe database.\n<p>This is useful …\n"],["I18n::ArgumentError","","classes/I18n/ArgumentError.html","",""],["I18n::Backend","","classes/I18n/Backend.html","",""],["I18n::Backend::ActiveRecord","","classes/I18n/Backend/ActiveRecord.html","","<p>ActiveRecord model used to store actual translations to the database.\n<p>This model expects a table like …\n"],["I18n::Backend::ActiveRecord::Implementation","","classes/I18n/Backend/ActiveRecord/Implementation.html","",""],["I18n::Backend::ActiveRecord::Missing","","classes/I18n/Backend/ActiveRecord/Missing.html","",""],["I18n::Backend::ActiveRecord::StoreProcs","","classes/I18n/Backend/ActiveRecord/StoreProcs.html","",""],["I18n::Backend::ActiveRecord::Translation","","classes/I18n/Backend/ActiveRecord/Translation.html","",""],["I18n::Backend::Base","","classes/I18n/Backend/Base.html","",""],["I18n::Backend::Cache","","classes/I18n/Backend/Cache.html","","<p>TODO Should the cache be cleared if new translations are stored?\n"],["I18n::Backend::Cascade","","classes/I18n/Backend/Cascade.html","",""],["I18n::Backend::Chain","","classes/I18n/Backend/Chain.html","","<p>Backend that chains multiple other backends and checks each of them when a\ntranslation needs to be looked …\n"],["I18n::Backend::Cldr","","classes/I18n/Backend/Cldr.html","",""],["I18n::Backend::Fallbacks","","classes/I18n/Backend/Fallbacks.html","",""],["I18n::Backend::Flatten","","classes/I18n/Backend/Flatten.html","","<p>This module contains several helpers to assist flattening translations. You\nmay want to flatten translations …\n"],["I18n::Backend::Gettext","","classes/I18n/Backend/Gettext.html","",""],["I18n::Backend::Gettext::PoData","","classes/I18n/Backend/Gettext/PoData.html","",""],["I18n::Backend::InterpolationCompiler","","classes/I18n/Backend/InterpolationCompiler.html","",""],["I18n::Backend::InterpolationCompiler::Compiler","","classes/I18n/Backend/InterpolationCompiler/Compiler.html","",""],["I18n::Backend::KeyValue","","classes/I18n/Backend/KeyValue.html","","<p>This is a basic backend for key value stores. It receives on initialization\nthe store, which should respond …\n"],["I18n::Backend::KeyValue::Implementation","","classes/I18n/Backend/KeyValue/Implementation.html","",""],["I18n::Backend::Memoize","","classes/I18n/Backend/Memoize.html","",""],["I18n::Backend::Metadata","","classes/I18n/Backend/Metadata.html","",""],["I18n::Backend::Pluralization","","classes/I18n/Backend/Pluralization.html","",""],["I18n::Backend::Simple","","classes/I18n/Backend/Simple.html","","<p>A simple backend that reads translations from YAML files and stores them in\nan in-memory hash. Relies …\n"],["I18n::Backend::Simple::Implementation","","classes/I18n/Backend/Simple/Implementation.html","",""],["I18n::Backend::Transliterator","","classes/I18n/Backend/Transliterator.html","",""],["I18n::Backend::Transliterator::HashTransliterator","","classes/I18n/Backend/Transliterator/HashTransliterator.html","","<p>A transliterator which accepts a Hash of characters as its translation\nrule.\n"],["I18n::Backend::Transliterator::ProcTransliterator","","classes/I18n/Backend/Transliterator/ProcTransliterator.html","","<p>A transliterator which accepts a Proc as its transliteration rule.\n"],["I18n::Config","","classes/I18n/Config.html","",""],["I18n::Gettext","","classes/I18n/Gettext.html","",""],["I18n::Gettext::Helpers","","classes/I18n/Gettext/Helpers.html","","<p>Implements classical Gettext style accessors. To use this include the\nmodule to the global namespace …\n"],["I18n::InvalidLocale","","classes/I18n/InvalidLocale.html","",""],["I18n::InvalidPluralizationData","","classes/I18n/InvalidPluralizationData.html","",""],["I18n::Locale","","classes/I18n/Locale.html","",""],["I18n::Locale::Fallbacks","","classes/I18n/Locale/Fallbacks.html","",""],["I18n::Locale::Tag","","classes/I18n/Locale/Tag.html","",""],["I18n::Locale::Tag::Parents","","classes/I18n/Locale/Tag/Parents.html","",""],["I18n::Locale::Tag::Rfc4646","","classes/I18n/Locale/Tag/Rfc4646.html","",""],["I18n::Locale::Tag::Rfc4646::Parser","","classes/I18n/Locale/Tag/Rfc4646/Parser.html","",""],["I18n::Locale::Tag::Simple","","classes/I18n/Locale/Tag/Simple.html","",""],["I18n::MissingInterpolationArgument","","classes/I18n/MissingInterpolationArgument.html","",""],["I18n::MissingTranslationData","","classes/I18n/MissingTranslationData.html","",""],["I18n::ReservedInterpolationKey","","classes/I18n/ReservedInterpolationKey.html","",""],["I18n::UnknownFileType","","classes/I18n/UnknownFileType.html","",""],["Kernel","","classes/Kernel.html","","<p>Since Ruby is very dynamic, methods added to the ancestors of BlankSlate\n<em>after BlankSlate is defined</em> …\n"],["KeyError","","classes/KeyError.html","","<p>KeyError is raised by String#% when the string contains a named placeholder\nthat is not contained in …\n"],["LibXML","","classes/LibXML.html","",""],["LibXML::Conversions","","classes/LibXML/Conversions.html","",""],["LibXML::Conversions::Document","","classes/LibXML/Conversions/Document.html","",""],["LibXML::Conversions::Node","","classes/LibXML/Conversions/Node.html","",""],["Logger","","classes/Logger.html","","<p>Adds the &#39;around_level&#39; method to Logger.\n<p>Extensions to the built in Ruby logger.\n<p>If you want to …\n"],["Logger::Formatter","","classes/Logger/Formatter.html","",""],["Logger::SimpleFormatter","","classes/Logger/SimpleFormatter.html","","<p>Simple formatter which only displays the message.\n"],["MemCache","","classes/MemCache.html","","<p>A Ruby client library for memcached.\n"],["MemCache::MemCacheError","","classes/MemCache/MemCacheError.html","","<p>Base MemCache exception class.\n"],["MemCache::Server","","classes/MemCache/Server.html","","<p>This class represents a memcached server instance.\n"],["Mime","","classes/Mime.html","",""],["Mime::Type","","classes/Mime/Type.html","","<p>Encapsulates the notion of a mime type. Can be used at render time, for\nexample, with:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Module","","classes/Module.html","","<p>Extends the module object with module and instance accessors for class\nattributes,  just like the native …\n"],["NilClass","","classes/NilClass.html","","<p>Extensions to <code>nil</code> which allow for more helpful error messages\nfor people who are new to Rails.\n<p>Ruby raises …\n"],["Object","","classes/Object.html","","<p>Same as above, except in Object.\n"],["PGresult","","classes/PGresult.html","",""],["Plugin","","classes/Plugin.html","",""],["Process","","classes/Process.html","",""],["REXML","","classes/REXML.html","",""],["REXML::Document","","classes/REXML/Document.html","",""],["REXML::Entity","","classes/REXML/Entity.html","",""],["RackLintPatch","","classes/RackLintPatch.html","","<p>Rack 1.0 does not allow string subclass body. This does not play well with\nour ActiveSupport::SafeBuffer …\n"],["RackLintPatch::AllowStringSubclass","","classes/RackLintPatch/AllowStringSubclass.html","",""],["Rails","","classes/Rails.html","",""],["Rails::BacktraceCleaner","","classes/Rails/BacktraceCleaner.html","",""],["Rails::Configuration","","classes/Rails/Configuration.html","","<p>The Configuration class holds all the parameters for the Initializer and\nships with defaults that suites …\n"],["Rails::GemBuilder","","classes/Rails/GemBuilder.html","","<p>this class hijacks the functionality of Gem::Installer by overloading its \ninitializer to only provide …\n"],["Rails::GemDependency","","classes/Rails/GemDependency.html","",""],["Rails::GemPlugin","","classes/Rails/GemPlugin.html","","<p>This Plugin subclass represents a Gem plugin. Although RubyGems has already\ntaken care of $LOAD_PATHs …\n"],["Rails::Generator","","classes/Rails/Generator.html","","<p>Rails::Generator is a code generation platform tailored for the Rails web\napplication framework.  Generators …\n"],["Rails::Generator::AbstractGemSource","","classes/Rails/Generator/AbstractGemSource.html","",""],["Rails::Generator::Base","","classes/Rails/Generator/Base.html","","<p>The base code generator is bare-bones.  It sets up the source and\ndestination paths and tells the logger …\n"],["Rails::Generator::Commands","","classes/Rails/Generator/Commands.html","",""],["Rails::Generator::Commands::Base","","classes/Rails/Generator/Commands/Base.html","","<p>Generator commands delegate Rails::Generator::Base and implement a standard\nset of actions.  Their behavior …\n"],["Rails::Generator::Commands::Create","","classes/Rails/Generator/Commands/Create.html","","<p>Create is the premier generator command.  It copies files, creates\ndirectories, renders templates, and …\n"],["Rails::Generator::Commands::Destroy","","classes/Rails/Generator/Commands/Destroy.html","","<p>Undo the actions performed by a generator.  Rewind the action manifest and\nattempt to completely erase …\n"],["Rails::Generator::Commands::List","","classes/Rails/Generator/Commands/List.html","","<p>List a generator&#39;s action manifest.\n"],["Rails::Generator::Commands::RewindBase","","classes/Rails/Generator/Commands/RewindBase.html","","<p>Base class for commands which handle generator actions in reverse, such as\nDestroy.\n"],["Rails::Generator::Commands::Update","","classes/Rails/Generator/Commands/Update.html","","<p>Update generator&#39;s action manifest.\n"],["Rails::Generator::GemGeneratorSource","","classes/Rails/Generator/GemGeneratorSource.html","","<p>GemGeneratorSource hits the mines to quarry for generators.  The latest\nversions of gems named *_generator …\n"],["Rails::Generator::GemPathSource","","classes/Rails/Generator/GemPathSource.html","","<p>GemPathSource looks for generators within any RubyGem&#39;s\n/rails_generators/&lt;generator_name&gt; …\n"],["Rails::Generator::GeneratedAttribute","","classes/Rails/Generator/GeneratedAttribute.html","",""],["Rails::Generator::GeneratorError","","classes/Rails/Generator/GeneratorError.html","",""],["Rails::Generator::Lookup","","classes/Rails/Generator/Lookup.html","","<p>Generator lookup is managed by a list of sources which return specs\ndescribing where to find and how …\n"],["Rails::Generator::Lookup::ClassMethods","","classes/Rails/Generator/Lookup/ClassMethods.html","",""],["Rails::Generator::Manifest","","classes/Rails/Generator/Manifest.html","","<p>Manifest captures the actions a generator performs.  Instantiate a manifest\nwith an optional target object, …\n"],["Rails::Generator::NamedBase","","classes/Rails/Generator/NamedBase.html","","<p>The base generator for named components: models, controllers, mailers, etc.\nThe target name is taken …\n"],["Rails::Generator::Options","","classes/Rails/Generator/Options.html","",""],["Rails::Generator::Options::ClassMethods","","classes/Rails/Generator/Options/ClassMethods.html","",""],["Rails::Generator::PathSource","","classes/Rails/Generator/PathSource.html","","<p>PathSource looks for generators in a filesystem directory.\n"],["Rails::Generator::Scripts","","classes/Rails/Generator/Scripts.html","",""],["Rails::Generator::Scripts::Base","","classes/Rails/Generator/Scripts/Base.html","","<p>Generator scripts handle command-line invocation.  Each script responds to\nan invoke! class method which …\n"],["Rails::Generator::Source","","classes/Rails/Generator/Source.html","","<p>Sources enumerate (yield from #each) generator specs which describe where\nto find and how to create generators. …\n"],["Rails::Generator::Spec","","classes/Rails/Generator/Spec.html","","<p>A spec knows where a generator was found and how to instantiate it.\nMetadata include the generator&#39;s …\n"],["Rails::Generator::UsageError","","classes/Rails/Generator/UsageError.html","",""],["Rails::Initializer","","classes/Rails/Initializer.html","","<p>The Initializer is responsible for processing the Rails configuration, such\nas setting the $LOAD_PATH …\n"],["Rails::Plugin","","classes/Rails/Plugin.html","","<p>The Plugin class should be an object which provides the following methods:\n<p><code>name</code>       - Used during initialisation …\n"],["Rails::Rack","","classes/Rails/Rack.html","",""],["Rails::SecretKeyGenerator","","classes/Rails/SecretKeyGenerator.html","","<p>A class for creating random secret keys. This class will do its best to\ncreate a random secret key that&#39;s …\n"],["Rails::VendorGemSourceIndex","","classes/Rails/VendorGemSourceIndex.html","",""],["RailsEnvironment","","classes/RailsEnvironment.html","",""],["RailsFCGIHandler","","classes/RailsFCGIHandler.html","",""],["RecursiveHTTPFetcher","","classes/RecursiveHTTPFetcher.html","",""],["Repositories","","classes/Repositories.html","",""],["Repository","","classes/Repository.html","",""],["SourceAnnotationExtractor","","classes/SourceAnnotationExtractor.html","","<p>Implements the logic behind the rake tasks for annotations like\n\n<pre>rake notes\nrake notes:optimize</pre>\n<p>and friends. …\n"],["SourceAnnotationExtractor::Annotation","","classes/SourceAnnotationExtractor/Annotation.html","",""],["String","","classes/String.html","","<p>Enhance the String class with a XML escaped character version of to_s.\n<p>Extension for String class. This …\n"],["Symbol","","classes/Symbol.html","",""],["TZInfo","","classes/TZInfo.html","",""],["TZInfo::AmbiguousTime","","classes/TZInfo/AmbiguousTime.html","","<p>Indicate a specified time in a local timezone has more than one possible\ntime in UTC. This happens when …\n"],["TZInfo::Definitions","","classes/TZInfo/Definitions.html","",""],["TZInfo::Definitions::Africa","","classes/TZInfo/Definitions/Africa.html","",""],["TZInfo::Definitions::Africa::Algiers","","classes/TZInfo/Definitions/Africa/Algiers.html","",""],["TZInfo::Definitions::Africa::Cairo","","classes/TZInfo/Definitions/Africa/Cairo.html","",""],["TZInfo::Definitions::Africa::Casablanca","","classes/TZInfo/Definitions/Africa/Casablanca.html","",""],["TZInfo::Definitions::Africa::Harare","","classes/TZInfo/Definitions/Africa/Harare.html","",""],["TZInfo::Definitions::Africa::Johannesburg","","classes/TZInfo/Definitions/Africa/Johannesburg.html","",""],["TZInfo::Definitions::Africa::Monrovia","","classes/TZInfo/Definitions/Africa/Monrovia.html","",""],["TZInfo::Definitions::Africa::Nairobi","","classes/TZInfo/Definitions/Africa/Nairobi.html","",""],["TZInfo::Definitions::America","","classes/TZInfo/Definitions/America.html","",""],["TZInfo::Definitions::America::Argentina","","classes/TZInfo/Definitions/America/Argentina.html","",""],["TZInfo::Definitions::America::Argentina::Buenos_Aires","","classes/TZInfo/Definitions/America/Argentina/Buenos_Aires.html","",""],["TZInfo::Definitions::America::Argentina::San_Juan","","classes/TZInfo/Definitions/America/Argentina/San_Juan.html","",""],["TZInfo::Definitions::America::Bogota","","classes/TZInfo/Definitions/America/Bogota.html","",""],["TZInfo::Definitions::America::Caracas","","classes/TZInfo/Definitions/America/Caracas.html","",""],["TZInfo::Definitions::America::Chicago","","classes/TZInfo/Definitions/America/Chicago.html","",""],["TZInfo::Definitions::America::Chihuahua","","classes/TZInfo/Definitions/America/Chihuahua.html","",""],["TZInfo::Definitions::America::Denver","","classes/TZInfo/Definitions/America/Denver.html","",""],["TZInfo::Definitions::America::Godthab","","classes/TZInfo/Definitions/America/Godthab.html","",""],["TZInfo::Definitions::America::Guatemala","","classes/TZInfo/Definitions/America/Guatemala.html","",""],["TZInfo::Definitions::America::Halifax","","classes/TZInfo/Definitions/America/Halifax.html","",""],["TZInfo::Definitions::America::Indiana","","classes/TZInfo/Definitions/America/Indiana.html","",""],["TZInfo::Definitions::America::Indiana::Indianapolis","","classes/TZInfo/Definitions/America/Indiana/Indianapolis.html","",""],["TZInfo::Definitions::America::Juneau","","classes/TZInfo/Definitions/America/Juneau.html","",""],["TZInfo::Definitions::America::La_Paz","","classes/TZInfo/Definitions/America/La_Paz.html","",""],["TZInfo::Definitions::America::Lima","","classes/TZInfo/Definitions/America/Lima.html","",""],["TZInfo::Definitions::America::Los_Angeles","","classes/TZInfo/Definitions/America/Los_Angeles.html","",""],["TZInfo::Definitions::America::Mazatlan","","classes/TZInfo/Definitions/America/Mazatlan.html","",""],["TZInfo::Definitions::America::Mexico_City","","classes/TZInfo/Definitions/America/Mexico_City.html","",""],["TZInfo::Definitions::America::Monterrey","","classes/TZInfo/Definitions/America/Monterrey.html","",""],["TZInfo::Definitions::America::New_York","","classes/TZInfo/Definitions/America/New_York.html","",""],["TZInfo::Definitions::America::Phoenix","","classes/TZInfo/Definitions/America/Phoenix.html","",""],["TZInfo::Definitions::America::Regina","","classes/TZInfo/Definitions/America/Regina.html","",""],["TZInfo::Definitions::America::Santiago","","classes/TZInfo/Definitions/America/Santiago.html","",""],["TZInfo::Definitions::America::Sao_Paulo","","classes/TZInfo/Definitions/America/Sao_Paulo.html","",""],["TZInfo::Definitions::America::St_Johns","","classes/TZInfo/Definitions/America/St_Johns.html","",""],["TZInfo::Definitions::America::Tijuana","","classes/TZInfo/Definitions/America/Tijuana.html","",""],["TZInfo::Definitions::Asia","","classes/TZInfo/Definitions/Asia.html","",""],["TZInfo::Definitions::Asia::Almaty","","classes/TZInfo/Definitions/Asia/Almaty.html","",""],["TZInfo::Definitions::Asia::Baghdad","","classes/TZInfo/Definitions/Asia/Baghdad.html","",""],["TZInfo::Definitions::Asia::Baku","","classes/TZInfo/Definitions/Asia/Baku.html","",""],["TZInfo::Definitions::Asia::Bangkok","","classes/TZInfo/Definitions/Asia/Bangkok.html","",""],["TZInfo::Definitions::Asia::Chongqing","","classes/TZInfo/Definitions/Asia/Chongqing.html","",""],["TZInfo::Definitions::Asia::Colombo","","classes/TZInfo/Definitions/Asia/Colombo.html","",""],["TZInfo::Definitions::Asia::Dhaka","","classes/TZInfo/Definitions/Asia/Dhaka.html","",""],["TZInfo::Definitions::Asia::Hong_Kong","","classes/TZInfo/Definitions/Asia/Hong_Kong.html","",""],["TZInfo::Definitions::Asia::Irkutsk","","classes/TZInfo/Definitions/Asia/Irkutsk.html","",""],["TZInfo::Definitions::Asia::Jakarta","","classes/TZInfo/Definitions/Asia/Jakarta.html","",""],["TZInfo::Definitions::Asia::Jerusalem","","classes/TZInfo/Definitions/Asia/Jerusalem.html","",""],["TZInfo::Definitions::Asia::Kabul","","classes/TZInfo/Definitions/Asia/Kabul.html","",""],["TZInfo::Definitions::Asia::Kamchatka","","classes/TZInfo/Definitions/Asia/Kamchatka.html","",""],["TZInfo::Definitions::Asia::Karachi","","classes/TZInfo/Definitions/Asia/Karachi.html","",""],["TZInfo::Definitions::Asia::Katmandu","","classes/TZInfo/Definitions/Asia/Katmandu.html","",""],["TZInfo::Definitions::Asia::Kolkata","","classes/TZInfo/Definitions/Asia/Kolkata.html","",""],["TZInfo::Definitions::Asia::Krasnoyarsk","","classes/TZInfo/Definitions/Asia/Krasnoyarsk.html","",""],["TZInfo::Definitions::Asia::Kuala_Lumpur","","classes/TZInfo/Definitions/Asia/Kuala_Lumpur.html","",""],["TZInfo::Definitions::Asia::Kuwait","","classes/TZInfo/Definitions/Asia/Kuwait.html","",""],["TZInfo::Definitions::Asia::Magadan","","classes/TZInfo/Definitions/Asia/Magadan.html","",""],["TZInfo::Definitions::Asia::Muscat","","classes/TZInfo/Definitions/Asia/Muscat.html","",""],["TZInfo::Definitions::Asia::Novosibirsk","","classes/TZInfo/Definitions/Asia/Novosibirsk.html","",""],["TZInfo::Definitions::Asia::Rangoon","","classes/TZInfo/Definitions/Asia/Rangoon.html","",""],["TZInfo::Definitions::Asia::Riyadh","","classes/TZInfo/Definitions/Asia/Riyadh.html","",""],["TZInfo::Definitions::Asia::Seoul","","classes/TZInfo/Definitions/Asia/Seoul.html","",""],["TZInfo::Definitions::Asia::Shanghai","","classes/TZInfo/Definitions/Asia/Shanghai.html","",""],["TZInfo::Definitions::Asia::Singapore","","classes/TZInfo/Definitions/Asia/Singapore.html","",""],["TZInfo::Definitions::Asia::Taipei","","classes/TZInfo/Definitions/Asia/Taipei.html","",""],["TZInfo::Definitions::Asia::Tashkent","","classes/TZInfo/Definitions/Asia/Tashkent.html","",""],["TZInfo::Definitions::Asia::Tbilisi","","classes/TZInfo/Definitions/Asia/Tbilisi.html","",""],["TZInfo::Definitions::Asia::Tehran","","classes/TZInfo/Definitions/Asia/Tehran.html","",""],["TZInfo::Definitions::Asia::Tokyo","","classes/TZInfo/Definitions/Asia/Tokyo.html","",""],["TZInfo::Definitions::Asia::Ulaanbaatar","","classes/TZInfo/Definitions/Asia/Ulaanbaatar.html","",""],["TZInfo::Definitions::Asia::Urumqi","","classes/TZInfo/Definitions/Asia/Urumqi.html","",""],["TZInfo::Definitions::Asia::Vladivostok","","classes/TZInfo/Definitions/Asia/Vladivostok.html","",""],["TZInfo::Definitions::Asia::Yakutsk","","classes/TZInfo/Definitions/Asia/Yakutsk.html","",""],["TZInfo::Definitions::Asia::Yekaterinburg","","classes/TZInfo/Definitions/Asia/Yekaterinburg.html","",""],["TZInfo::Definitions::Asia::Yerevan","","classes/TZInfo/Definitions/Asia/Yerevan.html","",""],["TZInfo::Definitions::Atlantic","","classes/TZInfo/Definitions/Atlantic.html","",""],["TZInfo::Definitions::Atlantic::Azores","","classes/TZInfo/Definitions/Atlantic/Azores.html","",""],["TZInfo::Definitions::Atlantic::Cape_Verde","","classes/TZInfo/Definitions/Atlantic/Cape_Verde.html","",""],["TZInfo::Definitions::Atlantic::South_Georgia","","classes/TZInfo/Definitions/Atlantic/South_Georgia.html","",""],["TZInfo::Definitions::Australia","","classes/TZInfo/Definitions/Australia.html","",""],["TZInfo::Definitions::Australia::Adelaide","","classes/TZInfo/Definitions/Australia/Adelaide.html","",""],["TZInfo::Definitions::Australia::Brisbane","","classes/TZInfo/Definitions/Australia/Brisbane.html","",""],["TZInfo::Definitions::Australia::Darwin","","classes/TZInfo/Definitions/Australia/Darwin.html","",""],["TZInfo::Definitions::Australia::Hobart","","classes/TZInfo/Definitions/Australia/Hobart.html","",""],["TZInfo::Definitions::Australia::Melbourne","","classes/TZInfo/Definitions/Australia/Melbourne.html","",""],["TZInfo::Definitions::Australia::Perth","","classes/TZInfo/Definitions/Australia/Perth.html","",""],["TZInfo::Definitions::Australia::Sydney","","classes/TZInfo/Definitions/Australia/Sydney.html","",""],["TZInfo::Definitions::Etc","","classes/TZInfo/Definitions/Etc.html","",""],["TZInfo::Definitions::Etc::UTC","","classes/TZInfo/Definitions/Etc/UTC.html","",""],["TZInfo::Definitions::Europe","","classes/TZInfo/Definitions/Europe.html","",""],["TZInfo::Definitions::Europe::Amsterdam","","classes/TZInfo/Definitions/Europe/Amsterdam.html","",""],["TZInfo::Definitions::Europe::Athens","","classes/TZInfo/Definitions/Europe/Athens.html","",""],["TZInfo::Definitions::Europe::Belgrade","","classes/TZInfo/Definitions/Europe/Belgrade.html","",""],["TZInfo::Definitions::Europe::Berlin","","classes/TZInfo/Definitions/Europe/Berlin.html","",""],["TZInfo::Definitions::Europe::Bratislava","","classes/TZInfo/Definitions/Europe/Bratislava.html","",""],["TZInfo::Definitions::Europe::Brussels","","classes/TZInfo/Definitions/Europe/Brussels.html","",""],["TZInfo::Definitions::Europe::Bucharest","","classes/TZInfo/Definitions/Europe/Bucharest.html","",""],["TZInfo::Definitions::Europe::Budapest","","classes/TZInfo/Definitions/Europe/Budapest.html","",""],["TZInfo::Definitions::Europe::Copenhagen","","classes/TZInfo/Definitions/Europe/Copenhagen.html","",""],["TZInfo::Definitions::Europe::Dublin","","classes/TZInfo/Definitions/Europe/Dublin.html","",""],["TZInfo::Definitions::Europe::Helsinki","","classes/TZInfo/Definitions/Europe/Helsinki.html","",""],["TZInfo::Definitions::Europe::Istanbul","","classes/TZInfo/Definitions/Europe/Istanbul.html","",""],["TZInfo::Definitions::Europe::Kiev","","classes/TZInfo/Definitions/Europe/Kiev.html","",""],["TZInfo::Definitions::Europe::Lisbon","","classes/TZInfo/Definitions/Europe/Lisbon.html","",""],["TZInfo::Definitions::Europe::Ljubljana","","classes/TZInfo/Definitions/Europe/Ljubljana.html","",""],["TZInfo::Definitions::Europe::London","","classes/TZInfo/Definitions/Europe/London.html","",""],["TZInfo::Definitions::Europe::Madrid","","classes/TZInfo/Definitions/Europe/Madrid.html","",""],["TZInfo::Definitions::Europe::Minsk","","classes/TZInfo/Definitions/Europe/Minsk.html","",""],["TZInfo::Definitions::Europe::Moscow","","classes/TZInfo/Definitions/Europe/Moscow.html","",""],["TZInfo::Definitions::Europe::Paris","","classes/TZInfo/Definitions/Europe/Paris.html","",""],["TZInfo::Definitions::Europe::Prague","","classes/TZInfo/Definitions/Europe/Prague.html","",""],["TZInfo::Definitions::Europe::Riga","","classes/TZInfo/Definitions/Europe/Riga.html","",""],["TZInfo::Definitions::Europe::Rome","","classes/TZInfo/Definitions/Europe/Rome.html","",""],["TZInfo::Definitions::Europe::Sarajevo","","classes/TZInfo/Definitions/Europe/Sarajevo.html","",""],["TZInfo::Definitions::Europe::Skopje","","classes/TZInfo/Definitions/Europe/Skopje.html","",""],["TZInfo::Definitions::Europe::Sofia","","classes/TZInfo/Definitions/Europe/Sofia.html","",""],["TZInfo::Definitions::Europe::Stockholm","","classes/TZInfo/Definitions/Europe/Stockholm.html","",""],["TZInfo::Definitions::Europe::Tallinn","","classes/TZInfo/Definitions/Europe/Tallinn.html","",""],["TZInfo::Definitions::Europe::Vienna","","classes/TZInfo/Definitions/Europe/Vienna.html","",""],["TZInfo::Definitions::Europe::Vilnius","","classes/TZInfo/Definitions/Europe/Vilnius.html","",""],["TZInfo::Definitions::Europe::Warsaw","","classes/TZInfo/Definitions/Europe/Warsaw.html","",""],["TZInfo::Definitions::Europe::Zagreb","","classes/TZInfo/Definitions/Europe/Zagreb.html","",""],["TZInfo::Definitions::Pacific","","classes/TZInfo/Definitions/Pacific.html","",""],["TZInfo::Definitions::Pacific::Auckland","","classes/TZInfo/Definitions/Pacific/Auckland.html","",""],["TZInfo::Definitions::Pacific::Fiji","","classes/TZInfo/Definitions/Pacific/Fiji.html","",""],["TZInfo::Definitions::Pacific::Guam","","classes/TZInfo/Definitions/Pacific/Guam.html","",""],["TZInfo::Definitions::Pacific::Honolulu","","classes/TZInfo/Definitions/Pacific/Honolulu.html","",""],["TZInfo::Definitions::Pacific::Majuro","","classes/TZInfo/Definitions/Pacific/Majuro.html","",""],["TZInfo::Definitions::Pacific::Midway","","classes/TZInfo/Definitions/Pacific/Midway.html","",""],["TZInfo::Definitions::Pacific::Noumea","","classes/TZInfo/Definitions/Pacific/Noumea.html","",""],["TZInfo::Definitions::Pacific::Pago_Pago","","classes/TZInfo/Definitions/Pacific/Pago_Pago.html","",""],["TZInfo::Definitions::Pacific::Port_Moresby","","classes/TZInfo/Definitions/Pacific/Port_Moresby.html","",""],["TZInfo::Definitions::Pacific::Tongatapu","","classes/TZInfo/Definitions/Pacific/Tongatapu.html","",""],["TZInfo::InvalidTimezoneIdentifier","","classes/TZInfo/InvalidTimezoneIdentifier.html","","<p>Thrown by Timezone#get if the identifier given is not valid.\n"],["TZInfo::NoOffsetsDefined","","classes/TZInfo/NoOffsetsDefined.html","","<p>Thrown if no offsets have been defined when calling period_for_utc or\nperiods_for_local. Indicates an …\n"],["TZInfo::PeriodNotFound","","classes/TZInfo/PeriodNotFound.html","","<p>Thrown to indicate that no TimezonePeriod matching a given time could be\nfound.\n"],["TZInfo::Timezone","","classes/TZInfo/Timezone.html","","<p>Timezone is the base class of all timezones. It provides a factory method\nget to access timezones by …\n"],["TZInfo::TimezonePeriod","","classes/TZInfo/TimezonePeriod.html","","<p>A period of time in a timezone where the same offset from UTC applies.\n<p>All the methods that take times …\n"],["TZInfo::UnknownTimezone","","classes/TZInfo/UnknownTimezone.html","","<p>Thrown if an attempt is made to use a timezone created with\nTimezone.new(nil).\n"],["Test","","classes/Test.html","",""],["Test::Unit","","classes/Test/Unit.html","",""],["Time","","classes/Time.html","",""],["TrueClass","","classes/TrueClass.html","",""],["%","String","classes/String.html#method-i-25","(args)","<p>% uses self (i.e. the String) as a format specification and returns the\nresult of applying it to the …\n"],["+","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-2B","(other)","<p>Adds another Duration or a Numeric to this Duration. Numeric values are\ntreated as seconds.\n"],["+","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-2B","(other)","<p>Returns a new Chars object containing the <em>other</em> object\nconcatenated to the string.\n<p>Example:\n\n<pre>(&#39;Café&#39;.mb_chars ...</pre>\n"],["+","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-2B","(other)",""],["+","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-2B","(other)",""],["+","Builder::CSS","classes/Builder/CSS.html#method-i-2B","(part)",""],["-","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-2D","(other)","<p>Subtracts another Duration or a Numeric from this Duration. Numeric values\nare treated as seconds.\n"],["-","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-2D","(other)",""],["<<","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-3C-3C","(javascript)","<p>Writes raw JavaScript to the page.\n<p>Example:\n\n<pre>page &lt;&lt; &quot;alert(&#39;JavaScript with Prototype.&#39;);&quot;</pre>\n"],["<<","Builder::XmlBase","classes/Builder/XmlBase.html#method-i-3C-3C","(text)","<p>Append text to the output target without escaping any markup. May be used\nwithin the markup brackets …\n"],["<=>","ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html#method-i-3C-3D-3E","(version_string)",""],["<=>","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-3C-3D-3E","(other)","<p>Returns <code>-1</code>, <code>0</code> or <code>+1</code> depending on\nwhether the Chars object is to be sorted before, equal or after the …\n"],["<=>","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-3C-3D-3E","(other)","<p>Use the time in UTC for comparisons.\n"],["<=>","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-3C-3D-3E","(zone)","<p>Compare this time zone to the parameter. The two are comapred first on\ntheir offsets, and then by name. …\n"],["<=>","Rails::Plugin","classes/Rails/Plugin.html#method-i-3C-3D-3E","(other_plugin)",""],["<=>","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-3C-3D-3E","(tz)","<p>Compares two Timezones based on their identifier. Returns -1 if tz is less\nthan self, 0 if tz is equal …\n"],["==","ActionController::MiddlewareStack::Middleware","classes/ActionController/MiddlewareStack/Middleware.html#method-i-3D-3D","(middleware)",""],["==","ActionView::Template::Path","classes/ActionView/Template/Path.html#method-i-3D-3D","(path)",""],["==","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-3D-3D","(comparison_object)","<p>Returns true if the <code>comparison_object</code> is the same object, or\nis of the same type and has the same id. …\n"],["==","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-3D-3D","(other_aggregation)","<p>Returns <code>true</code> if <code>self</code> and\n<code>other_aggregation</code> have the same <code>name</code> attribute,\n<code>active_record</code> attribute, and …\n"],["==","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-3D-3D","(other)","<p>Test for equality.  Resource are equal if and only if <code>other</code> is\nthe same object or is an instance of the …\n"],["==","ActiveResource::Request","classes/ActiveResource/Request.html#method-i-3D-3D","(req)",""],["==","ActiveResource::Response","classes/ActiveResource/Response.html#method-i-3D-3D","(other)",""],["==","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-3D-3D","(other)",""],["==","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-3D-3D","(other)","<p>Returns true if <code>other</code> is also a Duration instance with the\nsame <code>value</code>, or if <code>other == value</code>.\n"],["==","Mime::Type","classes/Mime/Type.html#method-i-3D-3D","(mime_type)",""],["==","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-3D-3D","(other)",""],["==","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-3D-3D","(p)","<p>Returns true if this TimezonePeriod is equal to p. This compares the \nstart_transition, end_transition …\n"],["===","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-3D-3D-3D","(object)","<p>Overwrite the default class equality method to provide support for\nassociation proxies.\n"],["===","ActiveSupport::CoreExtensions::Time::Calculations::ClassMethods","classes/ActiveSupport/CoreExtensions/Time/Calculations/ClassMethods.html#method-i-3D-3D-3D","(other)","<p>Overriding case equality method so that it returns true for\nActiveSupport::TimeWithZone instances\n"],["===","ActiveSupport::Multibyte::UnicodeDatabase","classes/ActiveSupport/Multibyte/UnicodeDatabase.html#method-i-3D-3D-3D","(other)",""],["===","Mime::Type","classes/Mime/Type.html#method-i-3D-3D-3D","(list)",""],["=~","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-3D-7E","(other)","<p>Like <code>String#=~</code> only it returns the character offset (in\ncodepoints) instead of the byte offset.\n<p>Example: …\n"],["=~","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-3D-7E","(re)","<p>Compare #name and TZInfo identifier to a supplied regexp, returning true if\na match is found.\n"],["=~","Mime::Type","classes/Mime/Type.html#method-i-3D-7E","(mime_type)",""],[">","Builder::CSS","classes/Builder/CSS.html#method-i-3E","(part)",""],[">>","Builder::CSS","classes/Builder/CSS.html#method-i-3E-3E","(part)",""],["GET","ActionController::Request","classes/ActionController/Request.html#method-i-GET","()","<p>Override Rack&#39;s GET method to support indifferent access\n"],["POST","ActionController::Request","classes/ActionController/Request.html#method-i-POST","()","<p>Override Rack&#39;s POST method to support indifferent access\n"],["[]","ActionController::Http::Headers","classes/ActionController/Http/Headers.html#method-i-5B-5D","(header_name)",""],["[]","ActionController::Session::AbstractStore::OptionsHash","classes/ActionController/Session/AbstractStore/OptionsHash.html#method-i-5B-5D","(key)",""],["[]","ActionController::Session::AbstractStore::SessionHash","classes/ActionController/Session/AbstractStore/SessionHash.html#method-i-5B-5D","(key)",""],["[]","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-5B-5D","(id)","<p>Returns a element reference by finding it through <code>id</code> in the\nDOM. This element can then be used for further …\n"],["[]","ActionView::ReloadableTemplate::ReloadablePath","classes/ActionView/ReloadableTemplate/ReloadablePath.html#method-i-5B-5D","(path)",""],["[]","ActionView::Template::EagerPath","classes/ActionView/Template/EagerPath.html#method-i-5B-5D","(path)",""],["[]","ActionView::Template::Path","classes/ActionView/Template/Path.html#method-i-5B-5D","(path)","<p>Returns a ActionView::Template object for the given path string. The input\npath should be relative to …\n"],["[]","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-5B-5D","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["[]","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-5B-5D","(name)","<p>Returns a ColumnDefinition for the column with name <code>name</code>.\n"],["[]","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-5B-5D","(attribute)",""],["[]","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-5B-5D","(attribute)",""],["[]","ActiveResource::Formats","classes/ActiveResource/Formats.html#method-c-5B-5D","(mime_type_reference)","<p>Lookup the format class from a mime type reference symbol. Example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveResource</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Formats</span>[:<span class=\"ruby-identifier\">xml</span>]  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["[]","ActiveResource::Response","classes/ActiveResource/Response.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-5B-5D","(*args)",""],["[]","ActiveSupport::Testing::Performance::Metrics","classes/ActiveSupport/Testing/Performance/Metrics.html#method-c-5B-5D","(name)",""],["[]","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-5B-5D","(arg)","<p>Locate a specific time zone object. If the argument is a string, it is\ninterpreted to mean the name of …\n"],["[]","I18n::Locale::Fallbacks","classes/I18n/Locale/Fallbacks.html#method-i-5B-5D","(locale)",""],["[]","MemCache","classes/MemCache.html#method-i-5B-5D","(key, raw = false)","<p>Shortcut to get a value from the cache.\n"],["[]=","ActionController::Session::AbstractStore::SessionHash","classes/ActionController/Session/AbstractStore/SessionHash.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-5B-5D-3D","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. (Alias for the protected write_attribute …\n"],["[]=","ActiveResource::Response","classes/ActiveResource/Response.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-5B-5D-3D","(*args)","<p>Like <code>String#[]=</code>, except instead of byte offsets you specify\ncharacter offsets.\n<p>Example:\n\n<pre>s = &quot;Müller&quot;\ns.mb_chars[2] ...</pre>\n"],["[]=","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:key] = &quot;value&quot;</pre>\n"],["[]=","MemCache","classes/MemCache.html#method-i-5B-5D-3D","(key, value)","<p>Shortcut to save a value in the cache.  This method does not set an\nexpiration on the entry.  Use set …\n"],["_","GetText::PoParser","classes/GetText/PoParser.html#method-i-_","(x)",""],["_","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#method-i-_","(msgid, options = {})",""],["_call","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-i-_call","(env)",""],["_dump","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-_dump","(limit)","<p>Dumps this Timezone for marshalling.\n"],["_dump","Time","classes/Time.html#method-i-_dump","(*args)",""],["_end_tag","Builder::XmlEvents","classes/Builder/XmlEvents.html#method-i-_end_tag","(sym)",""],["_load","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-c-_load","(data)","<p>Loads a marshalled Timezone.\n"],["_load","Time","classes/Time.html#method-c-_load","(marshaled_time)",""],["_original_load","Time","classes/Time.html#method-c-_original_load","(marshaled_time)",""],["_reduce_none","GetText::PoParser","classes/GetText/PoParser.html#method-i-_reduce_none","( val, _values, result )",""],["_start_tag","Builder::XmlEvents","classes/Builder/XmlEvents.html#method-i-_start_tag","(sym, attrs, end_too=false)",""],["abbrev","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-abbrev","(s)",""],["abbreviation","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-abbreviation","()","<p>The identifier of this period, e.g. “GMT” (Greenwich Mean Time) or “BST”\n(British …\n"],["about","Rails::Plugin","classes/Rails/Plugin.html#method-i-about","()",""],["abstract_class?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-abstract_class-3F","()","<p>Returns whether this class is a base AR class.  If A is a base class and B\ndescends from A, then B.base_class …\n"],["accepts","ActionController::Request","classes/ActionController/Request.html#method-i-accepts","()","<p>Returns the accepted MIME type for the request.\n"],["accepts_nested_attributes_for","ActiveRecord::NestedAttributes::ClassMethods","classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for","(*attr_names)","<p>Defines an attributes writer for the specified association(s). If you are\nusing <code>attr_protected</code> or <code>attr_accessible</code> …\n"],["accessible_paths","ActionView::Template","classes/ActionView/Template.html#method-i-accessible_paths","()",""],["active","ActionController::MiddlewareStack","classes/ActionController/MiddlewareStack.html#method-i-active","()",""],["active?","ActionController::MiddlewareStack::Middleware","classes/ActionController/MiddlewareStack/Middleware.html#method-i-active-3F","()",""],["active?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-active-3F","()","<p>Checks whether the connection to the database is still active. This\nincludes checking whether the database …\n"],["active?","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-active-3F","()","<p>CONNECTION MANAGEMENT ====================================\n"],["active?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-active-3F","()","<p>Is this connection alive and ready for queries?\n"],["active?","MemCache","classes/MemCache.html#method-i-active-3F","()","<p>Returns whether there is at least one active server for the object.\n"],["acts_like?","Object","classes/Object.html#method-i-acts_like-3F","(duck)","<p>A duck-type assistant method. For example, Active Support extends Date to\ndefine an acts_like_date? method, …\n"],["acts_like_date?","ActiveSupport::CoreExtensions::Date::Behavior","classes/ActiveSupport/CoreExtensions/Date/Behavior.html#method-i-acts_like_date-3F","()","<p>Enable more predictable duck-typing on Date-like classes. See\nObject#acts_like?.\n"],["acts_like_string?","ActiveSupport::CoreExtensions::String::Behavior","classes/ActiveSupport/CoreExtensions/String/Behavior.html#method-i-acts_like_string-3F","()","<p>Enable more predictable duck-typing on String-like classes. See\nObject#acts_like?.\n"],["acts_like_string?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-acts_like_string-3F","()","<p>Enable more predictable duck-typing on String-like classes. See\nObject#acts_like?.\n"],["acts_like_time?","ActiveSupport::CoreExtensions::Time::Behavior","classes/ActiveSupport/CoreExtensions/Time/Behavior.html#method-i-acts_like_time-3F","()","<p>Enable more predictable duck-typing on Time-like classes. See\nObject#acts_like?.\n"],["acts_like_time?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-acts_like_time-3F","()","<p>So that <code>self</code> <code>acts_like?(:time)</code>.\n"],["adapter_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-adapter_name","()","<p>Returns the human-readable name of the adapter.  Use mixed case - one can\nalways use downcase if needed. …\n"],["adapter_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-adapter_name","()","<p>Returns &#39;PostgreSQL&#39; as adapter name for identification purposes.\n"],["add","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-add","(attribute, message = nil, options = {})","<p>Adds an error message (<code>messsage</code>) to the\n<code>attribute</code>, which will be returned on a call to\n<code>on(attribute)</code> …\n"],["add","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-add","(attribute, msg)","<p>Adds an error to an Active Resource object&#39;s attribute (named for the\n<code>attribute</code> parameter) with the …\n"],["add","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-add","(severity, message = nil, progname = nil, &block)",""],["add","MemCache","classes/MemCache.html#method-i-add","(key, value, expiry = 0, raw = false)","<p>Add <code>key</code> to the cache with value <code>value</code> that\nexpires in <code>expiry</code> seconds, but only if <code>key</code> does\nnot already …\n"],["add","Repositories","classes/Repositories.html#method-i-add","(uri)",""],["add_column","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-add_column","(table_name, column_name, type, options = {})",""],["add_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column_position!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-add_column_position-21","(sql, options)",""],["add_filter","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-add_filter","(&block)","<p>Adds a filter from the block provided. Each line in the backtrace will be\nmapped against this filter. …\n"],["add_frozen_gem_path","Rails::GemDependency","classes/Rails/GemDependency.html#method-c-add_frozen_gem_path","()",""],["add_gem_load_paths","Rails::Initializer","classes/Rails/Initializer.html#method-i-add_gem_load_paths","()",""],["add_general_options!","Rails::Generator::Options","classes/Rails/Generator/Options.html#method-i-add_general_options-21","(opt)","<p>Adds general options like -h and –quiet.  Usually don&#39;t override.\n"],["add_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index","(table_name, column_name, options = {})","<p>Adds a new index to the table.  <code>column_name</code> can be a single\nSymbol, or an Array of Symbols.\n<p>The index …\n"],["add_limit!","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_limit-21","(sql, options)","<p>Alias for <code>add_limit_offset!</code>.\n"],["add_limit_offset!","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_limit_offset-21","(sql, options)","<p>Appends <code>LIMIT</code> and <code>OFFSET</code> options to an SQL\nstatement, or some SQL fragment that has the same semantics …\n"],["add_load_paths","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-add_load_paths","()",""],["add_lock!","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_lock-21","(sql, options)","<p>Appends a locking clause to an SQL statement. This method\n<strong>modifies</strong> the <code>sql</code> parameter.\n\n<pre># SELECT * FROM ...</pre>\n"],["add_observer!","ActiveRecord::Observer","classes/ActiveRecord/Observer.html#method-i-add_observer-21","(klass)",""],["add_on_blank","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-add_on_blank","(attributes, custom_message = nil)","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is blank (using Object#blank? …\n"],["add_on_empty","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-add_on_empty","(attributes, custom_message = nil)","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is empty.\n"],["add_options!","Rails::Generator::Options","classes/Rails/Generator/Options.html#method-i-add_options-21","(opt)","<p>Override to add your options to the parser:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">add_options!</span>(<span class=\"ruby-identifier\">opt</span>)\n  <span class=\"ruby-identifier\">opt</span>.<span class=\"ruby-identifier\">on</span>(<span class=\"ruby-string\">&#39;-v&#39;</span>, <span class=\"ruby-string\">&#39;--verbose&#39;</span>) { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">value</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["add_order_by_for_association_limiting!","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_order_by_for_association_limiting-21","(sql, options)","<p>ORDER BY clause for the passed order option. PostgreSQL overrides this due\nto its stricter standards …\n"],["add_plugin_load_paths","Rails::Initializer","classes/Rails/Initializer.html#method-i-add_plugin_load_paths","()","<p>Adds all load paths from plugins to the global set of load paths, so that\ncode from plugins can be required …\n"],["add_silencer","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-add_silencer","(&block)","<p>Adds a silencer from the block provided. If the silencer returns true for a\ngiven line, it&#39;ll be …\n"],["add_spec","Rails::VendorGemSourceIndex","classes/Rails/VendorGemSourceIndex.html#method-i-add_spec","(spec)",""],["add_support_load_paths","Rails::Initializer","classes/Rails/Initializer.html#method-i-add_support_load_paths","()","<p>Add the load paths used by support functions such as the info controller\n"],["add_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_timestamps","(table_name)","<p>Adds timestamps (created_at and updated_at) columns to the named table.\n<p>Examples\n\n<pre>add_timestamps(:suppliers)</pre>\n"],["add_to_base","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-add_to_base","(msg)","<p>Adds an error to the base object instead of any particular attribute. This\nis used to report errors that …\n"],["add_to_base","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-add_to_base","(msg)","<p>Add an error to the base Active Resource object rather than an attribute.\n<p>Examples\n\n<pre>my_folder = Folder.find(1) ...</pre>\n"],["advance","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-advance","(options)","<p>Provides precise Date calculations for years, months, and days.  The\n<code>options</code> parameter takes a hash with …\n"],["advance","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days.\nThe <code>options</code> parameter takes …\n"],["advance","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days.\nThe <code>options</code> parameter takes …\n"],["advance","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-advance","(options)",""],["after_create","ActiveRecord::Callbacks","classes/ActiveRecord/Callbacks.html#method-i-after_create","()","<p>Is called <em>after</em> <code>Base.save</code> on new objects that\nhaven&#39;t been saved yet (no record exists). Note that …\n"],["after_destroy","ActiveRecord::Callbacks","classes/ActiveRecord/Callbacks.html#method-i-after_destroy","()","<p>Is called <em>after</em> <code>Base.destroy</code> (and all the attributes\nhave been frozen).\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Contact</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["after_filter","ActionController::Filters::ClassMethods","classes/ActionController/Filters/ClassMethods.html#method-i-after_filter","(*filters, &block)","<p>Shorthand for append_after_filter since it&#39;s the most common.\n"],["after_generate","Rails::Generator::Base","classes/Rails/Generator/Base.html#method-i-after_generate","()",""],["after_initialize","Rails::Configuration","classes/Rails/Configuration.html#method-i-after_initialize","(&after_initialize_block)","<p>Adds a block which will be executed after rails has been fully initialized.\nUseful for per-environment …\n"],["after_initialize","Rails::Initializer","classes/Rails/Initializer.html#method-i-after_initialize","()","<p>Fires the user-supplied after_initialize block\n(Configuration#after_initialize)\n"],["after_initialize_blocks","Rails::Configuration","classes/Rails/Configuration.html#method-i-after_initialize_blocks","()","<p>Returns the blocks added with Configuration#after_initialize\n"],["after_save","ActiveRecord::Callbacks","classes/ActiveRecord/Callbacks.html#method-i-after_save","()","<p>Is called <em>after</em> <code>Base.save</code> (regardless of whether\nit&#39;s a <code>create</code> or <code>update</code> save). Note that this\ncallback …\n"],["after_update","ActiveRecord::Callbacks","classes/ActiveRecord/Callbacks.html#method-i-after_update","()","<p>Is called <em>after</em> <code>Base.save</code> on existing objects that\nhave a record. Note that this callback is still wrapped …\n"],["after_validation","ActiveRecord::Callbacks","classes/ActiveRecord/Callbacks.html#method-i-after_validation","()","<p>Is called <em>after</em> <code>Validations.validate</code> (which is part\nof the <code>Base.save</code> call).\n"],["after_validation_on_create","ActiveRecord::Callbacks","classes/ActiveRecord/Callbacks.html#method-i-after_validation_on_create","()","<p>Is called <em>after</em> <code>Validations.validate</code> (which is part\nof the <code>Base.save</code> call) on new objects that haven&#39;t …\n"],["after_validation_on_update","ActiveRecord::Callbacks","classes/ActiveRecord/Callbacks.html#method-i-after_validation_on_update","()","<p>Is called <em>after</em> <code>Validations.validate</code> (which is part\nof the <code>Base.save</code> call) on existing objects that have …\n"],["aggregate_mapping","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-aggregate_mapping","(reflection)",""],["ago","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-ago","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["ago","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-ago","(seconds)","<p>Returns a new DateTime representing the time a number of seconds ago Do not\nuse this method in combination …\n"],["ago","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-ago","(time = ::Time.now)","<p>Reads best without arguments:  10.minutes.ago\n"],["ago","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-ago","(seconds)","<p>Returns a new Time representing the time a number of seconds ago, this is\nbasically a wrapper around …\n"],["ago","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-ago","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the past as this Duration\nrepresents.\n"],["ago","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-ago","(other)",""],["alert","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-alert","(message)","<p>Displays an alert dialog with the given <code>message</code>.\n<p>Example:\n\n<pre># Generates: alert(&#39;This message is from Rails!&#39;) ...</pre>\n"],["alias_attribute","ActiveSupport::CoreExtensions::Module","classes/ActiveSupport/CoreExtensions/Module.html#method-i-alias_attribute","(new_name, old_name)","<p>Allows you to make aliases for attributes, which includes getter, setter,\nand query methods.\n<p>Example: …\n"],["alias_attribute_with_dirty","ActiveRecord::Dirty::ClassMethods","classes/ActiveRecord/Dirty/ClassMethods.html#method-i-alias_attribute_with_dirty","(new_name, old_name)",""],["alias_method_chain","ActiveSupport::CoreExtensions::Module","classes/ActiveSupport/CoreExtensions/Module.html#method-i-alias_method_chain","(target, feature)","<p>Encapsulates the common pattern of:\n\n<pre>alias_method :foo_without_feature, :foo\nalias_method :foo, :foo_with_feature</pre>\n"],["alive?","MemCache::Server","classes/MemCache/Server.html#method-i-alive-3F","()","<p>Check whether the server connection is alive.  This will cause the socket\nto attempt to connect if it …\n"],["all","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-all","(*args)","<p>This is an alias for find(:all).  You can pass in all the same arguments to\nthis method as you can to …\n"],["all","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-all","()","<p>Return an array of all TimeZone objects. There are multiple TimeZone\nobjects per time zone, in many cases, …\n"],["all","Repositories","classes/Repositories.html#method-i-all","()",""],["all","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-c-all","()","<p>Returns an array containing all the available Timezones.\n<p>Returns TimezoneProxy objects to avoid the overhead …\n"],["all_country_zone_identifiers","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-c-all_country_zone_identifiers","()","<p>Returns all the zone identifiers defined for all Countries. This is not the\ncomplete set of zone identifiers …\n"],["all_country_zones","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-c-all_country_zones","()","<p>Returns all the Timezones defined for all Countries. This is not the\ncomplete set of Timezones as some …\n"],["all_data_zone_identifiers","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-c-all_data_zone_identifiers","()","<p>Returns an array containing the identifiers of all the available  Timezones\nthat are based on data (are …\n"],["all_data_zones","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-c-all_data_zones","()","<p>Returns an array containing all the available Timezones that are based on\ndata (are not links to other …\n"],["all_identifiers","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-c-all_identifiers","()","<p>Returns an array containing the identifiers of all the available \nTimezones.\n"],["all_linked_zone_identifiers","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-c-all_linked_zone_identifiers","()","<p>Returns an array containing the identifiers of all the available  Timezones\nthat are links to other  …\n"],["all_linked_zones","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-c-all_linked_zones","()","<p>Returns an array containing all the available Timezones that are links to\nother Timezones.\n<p>Returns TimezoneProxy …\n"],["allow_concurrency","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-allow_concurrency","()","<p>Deprecated and no longer has any effect.\n"],["allow_concurrency=","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-allow_concurrency-3D","(flag)","<p>Deprecated and no longer has any effect.\n"],["announce","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-announce","(message)",""],["any?","ActiveRecord::NamedScope::Scope","classes/ActiveRecord/NamedScope/Scope.html#method-i-any-3F","()",""],["app","Object","classes/Object.html#method-i-app","(create=false)","<p>reference the global “app” instance, created on demand. To recreate the\ninstance, pass a non-false …\n"],["append","MemCache","classes/MemCache.html#method-i-append","(key, value)","<p>Append - &#39;add this data to an existing key after existing data&#39;\nPlease note the value is always …\n"],["append_after_filter","ActionController::Filters::ClassMethods","classes/ActionController/Filters/ClassMethods.html#method-i-append_after_filter","(*filters, &block)","<p>The passed <code>filters</code> will be appended to the array of filters\nthat run <em>after</em> actions on this controller …\n"],["append_around_filter","ActionController::Filters::ClassMethods","classes/ActionController/Filters/ClassMethods.html#method-i-append_around_filter","(*filters, &block)","<p>If you <code>append_around_filter A.new, B.new</code>, the filter chain\nlooks like\n\n<pre>B#before\n  A#before\n    # run the ...</pre>\n"],["append_before_filter","ActionController::Filters::ClassMethods","classes/ActionController/Filters/ClassMethods.html#method-i-append_before_filter","(*filters, &block)","<p>The passed <code>filters</code> will be appended to the filter_chain and\nwill execute before the action on this controller …\n"],["append_features","ActiveSupport::CoreExtensions::String::Iterators","classes/ActiveSupport/CoreExtensions/String/Iterators.html#method-c-append_features","(base)",""],["append_features","ActiveSupport::CoreExtensions::String::StartsEndsWith","classes/ActiveSupport/CoreExtensions/String/StartsEndsWith.html#method-c-append_features","(base)",""],["append_features","Module","classes/Module.html#method-i-append_features","(mod)",""],["append_sources","Rails::Generator::Lookup::ClassMethods","classes/Rails/Generator/Lookup/ClassMethods.html#method-i-append_sources","(*args)","<p>Add a source to the end of the list.\n"],["append_view_path","ActionController::Base","classes/ActionController/Base.html#method-i-append_view_path","(path)","<p>Adds a view_path to the end of the view_paths array. This change affects\nthe current request only.\n\n<pre>self.append_view_path(&quot;views/default&quot;) ...</pre>\n"],["append_view_path","ActionController::Base","classes/ActionController/Base.html#method-c-append_view_path","(path)","<p>Adds a view_path to the end of the view_paths array. If the current class\nhas no view paths, copy them …\n"],["applicable?","ActionController::Routing::Optimisation::Optimiser","classes/ActionController/Routing/Optimisation/Optimiser.html#method-i-applicable-3F","()","<p>Temporarily disabled <code>:url</code> optimisation pending proper solution\nto Issues around request.host etc.\n"],["applicable?","ActionController::Routing::Optimisation::PositionalArgumentsWithAdditionalParams","classes/ActionController/Routing/Optimisation/PositionalArgumentsWithAdditionalParams.html#method-i-applicable-3F","()","<p>To avoid generating “localhost/?host=foo.example.com” we can&#39;t use this\noptimisation on …\n"],["around_filter","ActionController::Filters::ClassMethods","classes/ActionController/Filters/ClassMethods.html#method-i-around_filter","(*filters, &block)","<p>Shorthand for <code>append_around_filter</code> since it&#39;s the most\ncommon.\n"],["array_or_string_for_javascript","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-array_or_string_for_javascript","(option)",""],["arrenc","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-arrenc","(a)",""],["arrparse","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-arrparse","(ts)","<p>Parses an “array” in the sense of RFC 4627. Returns the parsed value and\nany trailing tokens. …\n"],["as_json","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-as_json","(options = nil)","<p>Coerces to a hash for JSON encoding.\n<p>Options\n<p>The <code>options</code> are passed to the <code>to_json</code> method on\neach attribute, …\n"],["as_json","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-as_json","(options = nil)","<p>Coerces the date to a string for JSON encoding.\n<p>ISO 8601 format is used if\nActiveSupport::JSON::Encoding.use_standard_json_time_format …\n"],["as_json","Date","classes/Date.html#method-i-as_json","(options = nil)","<p>Coerces the date to a string for JSON encoding.\n<p>ISO 8601 format is used if\nActiveSupport::JSON::Encoding.use_standard_json_time_format …\n"],["as_json","DateTime","classes/DateTime.html#method-i-as_json","(options = nil)","<p>Coerces the datetime to a string for JSON encoding.\n<p>ISO 8601 format is used if\nActiveSupport::JSON::Encoding.use_standard_json_time_format …\n"],["as_json","Object","classes/Object.html#method-i-as_json","(options = nil)",""],["as_json","Time","classes/Time.html#method-i-as_json","(options = nil)","<p>Coerces the time to a string for JSON encoding.\n<p>ISO 8601 format is used if\nActiveSupport::JSON::Encoding.use_standard_json_time_format …\n"],["as_load_path","Module","classes/Module.html#method-i-as_load_path","()","<p>Returns String#underscore applied to the module name minus trailing\nclasses.\n\n<pre>ActiveRecord.as_load_path ...</pre>\n"],["as_str","String","classes/String.html#method-i-as_str","()",""],["assert_blank","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_blank","(object)","<p>Test if an expression is blank. Passes if object.blank? is true.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_blank</span> [] <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n"],["assert_difference","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_difference","(expression, difference = 1, message = nil, &block)","<p>Test numeric difference between the return value of an expression as a\nresult of what is evaluated in …\n"],["assert_dom_equal","ActionController::Assertions::DomAssertions","classes/ActionController/Assertions/DomAssertions.html#method-i-assert_dom_equal","(expected, actual, message = \"\")","<p>Test two HTML strings for equivalency (e.g., identical up to reordering of\nattributes)\n<p>Examples\n\n<pre># assert ...</pre>\n"],["assert_dom_not_equal","ActionController::Assertions::DomAssertions","classes/ActionController/Assertions/DomAssertions.html#method-i-assert_dom_not_equal","(expected, actual, message = \"\")","<p>The negated form of <code>assert_dom_equal</code>.\n<p>Examples\n\n<pre># assert that the referenced method does not generate the ...</pre>\n"],["assert_generates","ActionController::Assertions::RoutingAssertions","classes/ActionController/Assertions/RoutingAssertions.html#method-i-assert_generates","(expected_path, options, defaults={}, extras = {}, message=nil)","<p>Asserts that the provided options can be used to generate the provided\npath.  This is the inverse of …\n"],["assert_no_difference","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_no_difference","(expression, message = nil, &block)","<p>Assertion that the numeric result of evaluating an expression is not\nchanged before and after invoking …\n"],["assert_no_tag","ActionController::Assertions::TagAssertions","classes/ActionController/Assertions/TagAssertions.html#method-i-assert_no_tag","(*opts)","<p>Identical to <code>assert_tag</code>, but asserts that a matching tag does\n<em>not</em> exist. (See <code>assert_tag</code> for a full discussion …\n"],["assert_present","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_present","(object)","<p>Test if an expression is not blank. Passes if object.present? is true.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_present</span> {:<span class=\"ruby-identifier\">data</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;x&#39;</span> } <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_recognizes","ActionController::Assertions::RoutingAssertions","classes/ActionController/Assertions/RoutingAssertions.html#method-i-assert_recognizes","(expected_options, path, extras={}, message=nil)","<p>Asserts that the routing of the given <code>path</code> was handled\ncorrectly and that the parsed options (given in …\n"],["assert_redirected_to","ActionController::Assertions::ResponseAssertions","classes/ActionController/Assertions/ResponseAssertions.html#method-i-assert_redirected_to","(options = {}, message=nil)","<p>Assert that the redirection options passed in match those of the redirect\ncalled in the latest action. …\n"],["assert_response","ActionController::Assertions::ResponseAssertions","classes/ActionController/Assertions/ResponseAssertions.html#method-i-assert_response","(type, message = nil)","<p>Asserts that the response is one of the following types:\n<p><code>:success</code>   - Status code was 200\n<p><code>:redirect</code>  - …\n"],["assert_routing","ActionController::Assertions::RoutingAssertions","classes/ActionController/Assertions/RoutingAssertions.html#method-i-assert_routing","(path, options, defaults={}, extras={}, message=nil)","<p>Asserts that path and options match both ways; in other words, it verifies\nthat <code>path</code> generates <code>options</code> …\n"],["assert_select","ActionController::Assertions::SelectorAssertions","classes/ActionController/Assertions/SelectorAssertions.html#method-i-assert_select","(*args, &block)","<p>An assertion that selects elements and makes one or more equality tests.\n<p>If the first argument is an element, …\n"],["assert_select_email","ActionController::Assertions::SelectorAssertions","classes/ActionController/Assertions/SelectorAssertions.html#method-i-assert_select_email","(&block)","<p>Extracts the body of an email and runs nested assertions on it.\n<p>You must enable deliveries for this assertion …\n"],["assert_select_encoded","ActionController::Assertions::SelectorAssertions","classes/ActionController/Assertions/SelectorAssertions.html#method-i-assert_select_encoded","(element = nil, &block)","<p>Extracts the content of an element, treats it as encoded HTML and runs\nnested assertion on it.\n<p>You typically …\n"],["assert_select_rjs","ActionController::Assertions::SelectorAssertions","classes/ActionController/Assertions/SelectorAssertions.html#method-i-assert_select_rjs","(*args, &block)","<p>Selects content from the RJS response.\n<p>Narrowing down\n<p>With no arguments, asserts that one or more elements …\n"],["assert_tag","ActionController::Assertions::TagAssertions","classes/ActionController/Assertions/TagAssertions.html#method-i-assert_tag","(*opts)","<p>Asserts that there is a tag/node/element in the body of the response that\nmeets all of the given conditions. …\n"],["assert_template","ActionController::Assertions::ResponseAssertions","classes/ActionController/Assertions/ResponseAssertions.html#method-i-assert_template","(options = {}, message = nil)","<p>Asserts that the request was rendered with the appropriate template file or\npartials\n<p>Examples\n\n<pre># assert ...</pre>\n"],["assert_valid","ActionController::Assertions::ModelAssertions","classes/ActionController/Assertions/ModelAssertions.html#method-i-assert_valid","(record)","<p>Ensures that the passed record is valid by Active Record standards and\nreturns any error messages if …\n"],["assert_valid_keys","ActiveSupport::CoreExtensions::Hash::Keys","classes/ActiveSupport/CoreExtensions/Hash/Keys.html#method-i-assert_valid_keys","(*valid_keys)","<p>Validate all keys in a hash match *valid keys, raising ArgumentError on a\nmismatch. Note that keys are …\n"],["assign","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-assign","(variable, value)","<p>Assigns the JavaScript <code>variable</code> the given <code>value</code>.\n<p>Examples:\n\n<pre># Generates: my_string = &quot;This is mine!&quot;;\npage.assign ...</pre>\n"],["assign_default_content_type_and_charset!","ActionController::Response","classes/ActionController/Response.html#method-i-assign_default_content_type_and_charset-21","()",""],["assigns","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-assigns","(key = nil)",""],["assume_migrated_upto_version","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-assume_migrated_upto_version","(version, migrations_path = ActiveRecord::Migrator.migrations_path)",""],["at","ActiveSupport::CoreExtensions::String::Access","classes/ActiveSupport/CoreExtensions/String/Access.html#method-i-at","(position)","<p>Returns the character at the <code>position</code> treating the string as\nan array (where 0 is the first character). …\n"],["at","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-at","(secs)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from number of seconds …\n"],["at_beginning_of_day","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_month","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-at_beginning_of_month","()",""],["at_beginning_of_month","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-at_beginning_of_month","()",""],["at_beginning_of_quarter","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-at_beginning_of_quarter","()",""],["at_beginning_of_quarter","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-at_beginning_of_quarter","()",""],["at_beginning_of_week","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-at_beginning_of_week","()",""],["at_beginning_of_week","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-at_beginning_of_week","()",""],["at_beginning_of_year","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-at_beginning_of_year","()",""],["at_beginning_of_year","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-at_beginning_of_year","()",""],["at_end_of_month","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-at_end_of_month","()",""],["at_end_of_month","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-at_end_of_month","()",""],["at_end_of_quarter","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-at_end_of_quarter","()",""],["at_end_of_quarter","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-at_end_of_quarter","()",""],["at_end_of_week","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-at_end_of_week","()",""],["at_end_of_week","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-at_end_of_week","()",""],["at_end_of_year","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-at_end_of_year","()",""],["at_end_of_year","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-at_end_of_year","()",""],["at_midnight","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-at_midnight","()",""],["at_midnight","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-at_midnight","()",""],["at_midnight","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-at_midnight","()",""],["atom_feed","ActionView::Helpers::AtomFeedHelper","classes/ActionView/Helpers/AtomFeedHelper.html#method-i-atom_feed","(options = {}, &block)","<p>Full usage example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">config</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">routes</span>.<span class=\"ruby-identifier\">rb</span><span class=\"ruby-operator\">:</span>\n  <span class=\"ruby-constant\">ActionController</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Routing</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Routes</span>.<span class=\"ruby-identifier\">draw</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">map</span><span class=\"ruby-operator\">|</span>\n    <span class=\"ruby-identifier\">map</span>.<span class=\"ruby-identifier\">resources</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["atomic_write","ActiveSupport::CoreExtensions::File::Atomic","classes/ActiveSupport/CoreExtensions/File/Atomic.html#method-i-atomic_write","(file_name, temp_dir = Dir.tmpdir)","<p>Write to a file atomically.  Useful for situations where you don&#39;t want\nother processes or threads …\n"],["attr_accessible","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-attr_accessible","(*attributes)","<p>Specifies a white list of model attributes that can be set via\nmass-assignment, such as <code>new(attributes)</code> …\n"],["attr_accessor_with_default","Module","classes/Module.html#method-i-attr_accessor_with_default","(sym, default = nil, &block)","<p>Declare an attribute accessor with an initial default return value.\n<p>To give attribute <code>:age</code> the initial …\n"],["attr_internal","Module","classes/Module.html#method-i-attr_internal","(*attrs)",""],["attr_internal_accessor","Module","classes/Module.html#method-i-attr_internal_accessor","(*attrs)","<p>Declares an attribute reader and writer backed by an internally-named\ninstance variable.\n"],["attr_internal_reader","Module","classes/Module.html#method-i-attr_internal_reader","(*attrs)","<p>Declares an attribute reader backed by an internally-named instance\nvariable.\n"],["attr_internal_writer","Module","classes/Module.html#method-i-attr_internal_writer","(*attrs)","<p>Declares an attribute writer backed by an internally-named instance\nvariable.\n"],["attr_protected","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-attr_protected","(*attributes)","<p>Attributes named in this macro are protected from mass-assignment, such as\n<code>new(attributes)</code>, <code>update_attributes</code> …\n"],["attr_readonly","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-attr_readonly","(*attributes)","<p>Attributes listed as readonly can be set for a new record, but will be\nignored in database updates afterwards. …\n"],["attribute_for_inspect","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-attribute_for_inspect","(attr_name)","<p>Returns an <code>#inspect</code>-like string for the value of the attribute\n<code>attr_name</code>. String attributes are elided …\n"],["attribute_match","HTML::Selector","classes/HTML/Selector.html#method-i-attribute_match","(equality, value)","<p>Create a regular expression to match an attribute value based on the\nequality operator (=, ^=, |=, etc). …\n"],["attribute_method_suffix","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_method_suffix","(*suffixes)","<p>Declares a method available for all attributes with the given suffix. Uses\n<code>method_missing</code> and <code>respond_to</code> …\n"],["attribute_names","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-attribute_names","()","<p>Returns an array of names for the attributes available on this object\nsorted alphabetically.\n"],["attribute_present?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-attribute_present-3F","(attribute)","<p>Returns true if the specified <code>attribute</code> has been set by the\nuser or by a database load and is neither …\n"],["attributes","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-attributes","()","<p>Returns a hash of all the attributes with their names as keys and the\nvalues of the attributes as values. …\n"],["attributes","Rails::Generator::NamedBase","classes/Rails/Generator/NamedBase.html#method-i-attributes","()",""],["attributes=","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-attributes-3D","(new_attributes, guard_protected_attributes = true)","<p>Allows you to set all the attributes at once by passing in a hash with keys\nmatching the attribute names …\n"],["attributes_before_type_cast","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-attributes_before_type_cast","()","<p>Returns a hash of attributes before typecasting and deserialization.\n"],["authenticate","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-authenticate","(controller, &login_procedure)",""],["authenticate","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-authenticate","(controller, realm, &password_procedure)","<p>Returns false on a valid response, true otherwise\n"],["authenticate_or_request_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_or_request_with_http_basic","(realm = \"Application\", &login_procedure)",""],["authenticate_or_request_with_http_digest","ActionController::HttpAuthentication::Digest::ControllerMethods","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_or_request_with_http_digest","(realm = \"Application\", &password_procedure)",""],["authenticate_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_with_http_basic","(&login_procedure)",""],["authenticate_with_http_digest","ActionController::HttpAuthentication::Digest::ControllerMethods","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_with_http_digest","(realm = \"Application\", &password_procedure)","<p>Authenticate with HTTP Digest, returns true or false\n"],["authentication_header","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-authentication_header","(controller, realm)",""],["authentication_request","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-authentication_request","(controller, realm)",""],["authentication_request","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-authentication_request","(controller, realm, message = nil)",""],["authorization","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-authorization","(request)",""],["authorization","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-authorization","(request)",""],["auto_discovery_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-auto_discovery_link_tag","(type = :rss, url_options = {}, tag_options = {})","<p>Returns a link tag that browsers and news readers can use to auto-detect an\nRSS or ATOM feed. The <code>type</code> …\n"],["auto_flush","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-auto_flush","()",""],["auto_flushing=","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-auto_flushing-3D","(period)","<p>Set the auto-flush period. Set to true to flush after every log message, to\nan integer to flush every …\n"],["auto_link","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-auto_link","(text, *args, &block)","<p>Turns all URLs and e-mail addresses into clickable links. The\n<code>:link</code> option will limit what should be …\n"],["available_locales","I18n::Backend::ActiveRecord::Implementation","classes/I18n/Backend/ActiveRecord/Implementation.html#method-i-available_locales","()",""],["available_locales","I18n::Backend::ActiveRecord::Translation","classes/I18n/Backend/ActiveRecord/Translation.html#method-c-available_locales","()",""],["available_locales","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-available_locales","()","<p>Returns an array of locales for which translations are available ignoring\nthe reserved translation meta …\n"],["available_locales","I18n::Backend::Chain","classes/I18n/Backend/Chain.html#method-i-available_locales","()",""],["available_locales","I18n::Backend::KeyValue::Implementation","classes/I18n/Backend/KeyValue/Implementation.html#method-i-available_locales","()",""],["available_locales","I18n::Backend::Memoize","classes/I18n/Backend/Memoize.html#method-i-available_locales","()",""],["available_locales","I18n::Backend::Simple::Implementation","classes/I18n/Backend/Simple/Implementation.html#method-i-available_locales","()","<p>Get available locales from the translations hash\n"],["available_locales","I18n::Config","classes/I18n/Config.html#method-i-available_locales","()","<p>Returns an array of locales for which translations are available. Unless\nyou explicitely set the these …\n"],["available_locales=","I18n::Config","classes/I18n/Config.html#method-i-available_locales-3D","(locales)","<p>Sets the available locales.\n"],["average","ActiveRecord::Calculations::ClassMethods","classes/ActiveRecord/Calculations/ClassMethods.html#method-i-average","(column_name, options = {})","<p>Calculates the average value on a given column. The value is returned as a\nfloat, or <code>nil</code> if there&#39;s …\n"],["backend","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-backend","()",""],["backend","I18n::Config","classes/I18n/Config.html#method-i-backend","()","<p>Returns the current backend. Defaults to +Backend::Simple+.\n"],["backend=","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-backend-3D","(name)",""],["backend=","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-backend-3D","(name)",""],["backend=","I18n::Config","classes/I18n/Config.html#method-i-backend-3D","(backend)","<p>Sets the current backend. Used to set a custom backend.\n"],["backtrace_cleaner","Rails","classes/Rails.html#method-c-backtrace_cleaner","()",""],["bang?","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-i-bang-3F","()",""],["banner","Rails::Generator::Base","classes/Rails/Generator/Base.html#method-i-banner","()","<p>Override with your own usage banner.\n"],["banner","Rails::Generator::NamedBase","classes/Rails/Generator/NamedBase.html#method-i-banner","()","<p>Override with your own usage banner.\n"],["banner","Rails::Generator::Options","classes/Rails/Generator/Options.html#method-i-banner","()","<p>Override with your own usage banner.\n"],["banner","Rails::Generator::Scripts::Base","classes/Rails/Generator/Scripts/Base.html#method-i-banner","()","<p>Override with your own script usage banner.\n"],["base64","ActiveSupport::SecureRandom","classes/ActiveSupport/SecureRandom.html#method-c-base64","(n=nil)","<p>SecureRandom.base64 generates a random base64 string.\n<p>The argument n specifies the length of the random …\n"],["base_class","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-base_class","()","<p>Returns the base AR subclass that this class descends from. If A extends\nAR::Base, A.base_class will …\n"],["becomes","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-becomes","(klass)","<p>Returns an instance of the specified <code>klass</code> with the attributes\nof the current record. This is mostly …\n"],["before_create","ActiveRecord::Callbacks","classes/ActiveRecord/Callbacks.html#method-i-before_create","()","<p>Is called <em>before</em> <code>Base.save</code> on new objects that\nhaven&#39;t been saved yet (no record exists).\n"],["before_destroy","ActiveRecord::Callbacks","classes/ActiveRecord/Callbacks.html#method-i-before_destroy","()","<p>Is called <em>before</em> <code>Base.destroy</code>.\n<p>Note: If you need to <em>destroy</em> or <em>nullify</em> associated\nrecords first, use the …\n"],["before_filter","ActionController::Filters::ClassMethods","classes/ActionController/Filters/ClassMethods.html#method-i-before_filter","(*filters, &block)","<p>Shorthand for append_before_filter since it&#39;s the most common.\n"],["before_save","ActiveRecord::Callbacks","classes/ActiveRecord/Callbacks.html#method-i-before_save","()","<p>Is called <em>before</em> <code>Base.save</code> (regardless of whether\nit&#39;s a <code>create</code> or <code>update</code> save).\n"],["before_update","ActiveRecord::Callbacks","classes/ActiveRecord/Callbacks.html#method-i-before_update","()","<p>Is called <em>before</em> <code>Base.save</code> on existing objects that\nhave a record.\n"],["before_validation","ActiveRecord::Callbacks","classes/ActiveRecord/Callbacks.html#method-i-before_validation","()","<p>Is called <em>before</em> <code>Validations.validate</code> (which is part\nof the <code>Base.save</code> call).\n"],["before_validation_on_create","ActiveRecord::Callbacks","classes/ActiveRecord/Callbacks.html#method-i-before_validation_on_create","()","<p>Is called <em>before</em> <code>Validations.validate</code> (which is part\nof the <code>Base.save</code> call) on new objects that haven&#39;t …\n"],["before_validation_on_update","ActiveRecord::Callbacks","classes/ActiveRecord/Callbacks.html#method-i-before_validation_on_update","()","<p>Is called <em>before</em> <code>Validations.validate</code> (which is part\nof the <code>Base.save</code> call) on existing objects that …\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins the transaction (and turns off auto-committing).\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-begin_db_transaction","()","<p>Begins a transaction.\n"],["beginning_of_day","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-beginning_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["beginning_of_day","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-beginning_of_day","()","<p>Returns a new DateTime representing the start of the day (0:00)\n"],["beginning_of_day","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-beginning_of_day","()","<p>Returns a new Time representing the start of the day (0:00)\n"],["beginning_of_month","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-beginning_of_month","()","<p>Returns a new ; DateTime objects will have time set to 0:00DateTime\nrepresenting the start of the month …\n"],["beginning_of_month","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-beginning_of_month","()","<p>Returns a new Time representing the start of the month (1st of the month,\n0:00)\n"],["beginning_of_quarter","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-beginning_of_quarter","()","<p>Returns a new Date/DateTime representing the start of the quarter (1st of\njanuary, april, july, october; …\n"],["beginning_of_quarter","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-beginning_of_quarter","()","<p>Returns  a new Time representing the start of the quarter (1st of january,\napril, july, october, 0:00) …\n"],["beginning_of_week","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-beginning_of_week","()","<p>Returns a new Date/DateTime representing the “start” of this week (i.e,\nMonday; DateTime objects …\n"],["beginning_of_week","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-beginning_of_week","()","<p>Returns a new Time representing the “start” of this week (Monday, 0:00)\n"],["beginning_of_year","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-beginning_of_year","()","<p>Returns a new Date/DateTime representing the start of the year (1st of\njanuary; DateTime objects will …\n"],["beginning_of_year","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-beginning_of_year","()","<p>Returns  a new Time representing the start of the year (1st of january,\n0:00)\n"],["belongs_to","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to","(association_id, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if this class …\n"],["belongs_to","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-belongs_to","(*args)",""],["belongs_to","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-belongs_to","(*args)",""],["belongs_to?","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-belongs_to-3F","()","<p>Returns <code>true</code> if <code>self</code> is a <code>belongs_to</code>\nreflection.\n"],["benchmark","ActionController::Benchmarking::ClassMethods","classes/ActionController/Benchmarking/ClassMethods.html#method-i-benchmark","(title, log_level = Logger::DEBUG, use_silence = true)","<p>Log and benchmark the workings of a single block and silence whatever\nlogging that may have happened …\n"],["benchmark","ActionView::Helpers::BenchmarkHelper","classes/ActionView/Helpers/BenchmarkHelper.html#method-i-benchmark","(message = \"Benchmarking\", options = {})","<p>Allows you to measure the execution time of a block  in a template and\nrecords the result to the log. …\n"],["benchmark","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-benchmark","(title, log_level = Logger::DEBUG, use_silence = true)","<p>Log and benchmark multiple statements in a single block. Example:\n\n<pre>Project.benchmark(&quot;Creating project&quot;) ...</pre>\n"],["benchmark","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-benchmark","()",""],["best_install_method","RailsEnvironment","classes/RailsEnvironment.html#method-i-best_install_method","()",""],["between?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-between-3F","(min, max)",""],["binary_search","Continuum","classes/Continuum.html#method-c-binary_search","(ary, value, &block)","<p>Find the closest index in Continuum with value &lt;= the given value\n"],["binary_to_string","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-binary_to_string","(value)","<p>Used to convert from BLOBs to Strings\n"],["blank?","Object","classes/Object.html#method-i-blank-3F","()","<p>An object is blank if it&#39;s false, empty, or a whitespace string. For\nexample, “”, “ …\n"],["blank_slate_method_added","Kernel","classes/Kernel.html#method-c-blank_slate_method_added","(name)",""],["blank_slate_method_added","Object","classes/Object.html#method-c-blank_slate_method_added","(name)",""],["blankslate_original_append_features","Module","classes/Module.html#method-i-blankslate_original_append_features","(mod)",""],["body","ActionController::Request","classes/ActionController/Request.html#method-i-body","()","<p>The request body is an IO input stream. If the RAW_POST_DATA environment\nvariable is already set, wrap …\n"],["breakpoint","Kernel","classes/Kernel.html#method-i-breakpoint","()",""],["breakpoint_server","Rails::Configuration","classes/Rails/Configuration.html#method-i-breakpoint_server","(_ = nil)","<p>Deprecated options:\n"],["breakpoint_server=","Rails::Configuration","classes/Rails/Configuration.html#method-i-breakpoint_server-3D","(_ = nil)",""],["browser_generated?","Mime::Type","classes/Mime/Type.html#method-i-browser_generated-3F","()",""],["buffer","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-buffer","()",""],["build","ActionController::MiddlewareStack","classes/ActionController/MiddlewareStack.html#method-i-build","(app)",""],["build","ActionController::MiddlewareStack::Middleware","classes/ActionController/MiddlewareStack/Middleware.html#method-i-build","(app)",""],["build","ActiveSupport::Callbacks::CallbackChain","classes/ActiveSupport/Callbacks/CallbackChain.html#method-c-build","(kind, *methods, &block)",""],["build","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-build","(options={})",""],["build_callbacks","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-build_callbacks","(options)",""],["build_mem_cache","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-c-build_mem_cache","(*addresses)",""],["build_observer","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-build_observer","(klass, name, options = {})",""],["build_request_uri","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-build_request_uri","(action, parameters)",""],["built?","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-built-3F","()",""],["builtin_directories","Rails::Configuration","classes/Rails/Configuration.html#method-i-builtin_directories","()",""],["button_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-button_to","(name, options = {}, html_options = {})","<p>Generates a form containing a single button that submits to the URL created\nby the set of <code>options</code>. This …\n"],["button_to_function","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-button_to_function","(name, *args, &block)","<p>Returns a button with the given <code>name</code> text that&#39;ll trigger\na JavaScript <code>function</code> using the onclick …\n"],["button_to_remote","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-button_to_remote","(name, options = {}, html_options = {})","<p>Creates a button with an onclick event which calls a remote action via\nXMLHttpRequest The options for …\n"],["byte","ActiveSupport::CoreExtensions::Numeric::Bytes","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#method-i-byte","()",""],["bytes","ActiveSupport::CoreExtensions::Numeric::Bytes","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#method-i-bytes","()",""],["cache","ActionController::Caching","classes/ActionController/Caching.html#method-i-cache","(key, options = {}, &block)","<p>Convenience accessor\n"],["cache","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache","(name = {}, options = nil, &block)","<p>A method for caching fragments of a view rather than an entire action or\npage.  This technique is useful …\n"],["cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache","()","<p>Enable the query cache within the block.\n"],["cache","ActiveRecord::QueryCache::ClassMethods","classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-cache","(&block)","<p>Enable the query cache within the block if Active Record is configured.\n"],["cache","Rails","classes/Rails.html#method-c-cache","()",""],["cache_asset_timestamps","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-c-cache_asset_timestamps","()",""],["cache_asset_timestamps=","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-c-cache_asset_timestamps-3D","(value)","<p>You can enable or disable the asset tag timestamps cache. With the cache\nenabled, the asset tag helper …\n"],["cache_attribute?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-cache_attribute-3F","(attr_name)","<p>Returns <code>true</code> if the provided attribute is being cached.\n"],["cache_attributes","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-cache_attributes","(*attribute_names)","<p><code>cache_attributes</code> allows you to declare which converted\nattribute values should be cached. Usually caching …\n"],["cache_configured?","ActionController::Caching","classes/ActionController/Caching.html#method-c-cache_configured-3F","()",""],["cache_decr","MemCache","classes/MemCache.html#method-i-cache_decr","(server, cache_key, amount)","<p>Performs a raw decr for <code>cache_key</code> from <code>server</code>. \nReturns nil if not found.\n"],["cache_fixtures","Fixtures","classes/Fixtures.html#method-c-cache_fixtures","(connection, fixtures_map)",""],["cache_for_connection","Fixtures","classes/Fixtures.html#method-c-cache_for_connection","(connection)",""],["cache_format","ActionController::Request","classes/ActionController/Request.html#method-i-cache_format","()",""],["cache_get","MemCache","classes/MemCache.html#method-i-cache_get","(server, cache_key)","<p>Fetches the raw data for <code>cache_key</code> from <code>server</code>. \nReturns nil on cache miss.\n"],["cache_get_multi","MemCache","classes/MemCache.html#method-i-cache_get_multi","(server, cache_keys)","<p>Fetches <code>cache_keys</code> from <code>server</code> using a multi-get.\n"],["cache_incr","MemCache","classes/MemCache.html#method-i-cache_incr","(server, cache_key, amount)","<p>Performs a raw incr for <code>cache_key</code> from <code>server</code>. \nReturns nil if not found.\n"],["cache_key","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-cache_key","()","<p>Returns a cache key that can be used to identify this record.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Product</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">cache_key</span>     <span class=\"ruby-comment\"># =&gt; &quot;products/new&quot; ...</span>\n</pre>\n"],["cache_key","I18n::Backend::Cache","classes/I18n/Backend/Cache.html#method-i-cache_key","(*args)",""],["cache_namespace","I18n","classes/I18n.html#method-c-cache_namespace","()",""],["cache_namespace=","I18n","classes/I18n.html#method-c-cache_namespace-3D","(namespace)",""],["cache_page","ActionController::Caching::Pages","classes/ActionController/Caching/Pages.html#method-i-cache_page","(content = nil, options = nil)","<p>Manually cache the <code>content</code> in the key determined by\n<code>options</code>. If no content is provided, the contents …\n"],["cache_page","ActionController::Caching::Pages::ClassMethods","classes/ActionController/Caching/Pages/ClassMethods.html#method-i-cache_page","(content, path)","<p>Manually cache the <code>content</code> in the key determined by\n<code>path</code>. Example:\n\n<pre>cache_page &quot;I&#39;m the cached content&quot;, ...</pre>\n"],["cache_store","I18n","classes/I18n.html#method-c-cache_store","()",""],["cache_store=","ActionController::Caching","classes/ActionController/Caching.html#method-c-cache_store-3D","(store_option)","<p>Defines the storage option for cached fragments\n"],["cache_store=","I18n","classes/I18n.html#method-c-cache_store-3D","(store)",""],["cached_attributes","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-cached_attributes","()","<p>Returns the attributes which are cached. By default time related columns\nwith datatype <code>:datetime, :timestamp,</code> …\n"],["cached_fixtures","Fixtures","classes/Fixtures.html#method-c-cached_fixtures","(connection, keys_to_fetch = nil)",""],["caches_action","ActionController::Caching::Actions::ClassMethods","classes/ActionController/Caching/Actions/ClassMethods.html#method-i-caches_action","(*actions)","<p>Declares that <code>actions</code> should be cached. See\nActionController::Caching::Actions for details.\n"],["caches_page","ActionController::Caching::Pages::ClassMethods","classes/ActionController/Caching/Pages/ClassMethods.html#method-i-caches_page","(*actions)","<p>Caches the <code>actions</code> using the page-caching approach that&#39;ll\nstore the cache in a path within the  …\n"],["calculate","ActiveRecord::Calculations::ClassMethods","classes/ActiveRecord/Calculations/ClassMethods.html#method-i-calculate","(operation, column_name, options = {})","<p>This calculates aggregate values in the given column.  Methods for count,\nsum, average, minimum, and …\n"],["call","ActionController::Base","classes/ActionController/Base.html#method-c-call","(env)",""],["call","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-i-call","(env)",""],["call","ActionController::Failsafe","classes/ActionController/Failsafe.html#method-i-call","(env)",""],["call","ActionController::ParamsParser","classes/ActionController/ParamsParser.html#method-i-call","(env)",""],["call","ActionController::Session::AbstractStore","classes/ActionController/Session/AbstractStore.html#method-i-call","(env)",""],["call","ActionController::Session::CookieStore","classes/ActionController/Session/CookieStore.html#method-i-call","(env)",""],["call","ActionController::StringCoercion","classes/ActionController/StringCoercion.html#method-i-call","(env)",""],["call","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-call","(function, *arguments, &block)","<p>Calls the JavaScript <code>function</code>, optionally with the given\n<code>arguments</code>.\n<p>If a block is given, the block will …\n"],["call","ActionView::TemplateHandler","classes/ActionView/TemplateHandler.html#method-c-call","(template)",""],["call","ActionView::TemplateHandlers::Compilable::ClassMethods","classes/ActionView/TemplateHandlers/Compilable/ClassMethods.html#method-i-call","(template)",""],["call","ActiveRecord::ConnectionAdapters::ConnectionManagement","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html#method-i-call","(env)",""],["call","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-i-call","(env)",""],["call","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-call","(*args, &block)",""],["call","Logger::Formatter","classes/Logger/Formatter.html#method-i-call","(severity, time, progname, msg)",""],["call","Logger::SimpleFormatter","classes/Logger/SimpleFormatter.html#method-i-call","(severity, timestamp, progname, msg)","<p>This method is invoked when a log event occurs\n"],["camelcase","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-camelcase","(first_letter = :upper)",""],["camelize","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-camelize","(first_letter = :upper)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to camelize is set to <code>:lower</code> …\n"],["camelize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-camelize","(lower_case_and_underscored_word, first_letter_in_uppercase = true)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to <code>camelize</code> is set to <code>:lower</code> …\n"],["capitalize","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-capitalize","()","<p>Converts the first character to uppercase and the remainder to lowercase.\n<p>Example:\n\n<pre>&#39;über&#39;.mb_chars.capitalize.to_s ...</pre>\n"],["capture","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-capture","(*args, &block)","<p>The capture method allows you to extract part of a template into a \nvariable. You can then use this variable …\n"],["cas","MemCache","classes/MemCache.html#method-i-cas","(key, expiry=0, raw=false)","<p>“cas” is a check and set operation which means “store this data but only if\nno one else …\n"],["case_sensitive_equality_operator","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-case_sensitive_equality_operator","()",""],["case_sensitive_equality_operator","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-case_sensitive_equality_operator","()",""],["catch_schema_changes","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-catch_schema_changes","()",""],["cattr_accessor","Class","classes/Class.html#method-i-cattr_accessor","(*syms)",""],["cattr_reader","Class","classes/Class.html#method-i-cattr_reader","(*syms)",""],["cattr_writer","Class","classes/Class.html#method-i-cattr_writer","(*syms)",""],["cdata!","Builder::XmlMarkup","classes/Builder/XmlMarkup.html#method-i-cdata-21","(text)","<p>Insert a CDATA section into the XML markup.\n<p>For example:\n\n<pre>xml.cdata!(&quot;text to be included in cdata&quot;)\n   ...</pre>\n"],["cdata_block","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-cdata_block","(string)",""],["cdata_section","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-cdata_section","(content)","<p>Returns a CDATA section with the given <code>content</code>.  CDATA\nsections are used to escape blocks of text containing …\n"],["center","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-center","(integer, padstr=' ')","<p>Works just like <code>String#center</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.center(8).to_s ...</pre>\n"],["change","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change","(column_name, type, options = {})","<p>Changes the column&#39;s definition according to the new options. See\nTableDefinition#column for details …\n"],["change","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-change","(options)","<p>Returns a new Date where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-change","(options)","<p>Returns a new DateTime where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-change","(options)","<p>Returns a new Time where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column of a table.\n"],["change_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column&#39;s definition according to the new options. See\nTableDefinition#column for details …\n"],["change_column_default","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column_default","(table_name, column_name, default)","<p>Changes the default value of a table column.\n"],["change_column_default","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default)","<p>Sets a new default value for a column.  If you want to set the default\nvalue to <code>NULL</code>, you are out of …\n"],["change_column_null","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_default","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change_default","(column_name, default)","<p>Sets a new default value for a column. See\nSchemaStatements#change_column_default\n<p>Examples\n\n<pre>t.change_default(:qualification, ...</pre>\n"],["change_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table","(table_name)","<p>A block for changing columns in <code>table</code>.\n<p>Example\n\n<pre># change_table() yields a Table instance\nchange_table(:suppliers) ...</pre>\n"],["changed","ActiveRecord::Dirty","classes/ActiveRecord/Dirty.html#method-i-changed","()","<p>List of attributes with unsaved changes.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed</span> <span class=\"ruby-comment\"># =&gt; []</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> = <span class=\"ruby-string\">&#39;bob&#39;</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["changed?","ActiveRecord::Dirty","classes/ActiveRecord/Dirty.html#method-i-changed-3F","()","<p>Do any attributes have unsaved changes?\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> = <span class=\"ruby-string\">&#39;bob&#39;</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["changed_for_autosave?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-changed_for_autosave-3F","()","<p>Returns whether or not this record has been changed in any way (including\nwhether any of its nested autosave …\n"],["changes","ActiveRecord::Dirty","classes/ActiveRecord/Dirty.html#method-i-changes","()","<p>Map of changed attrs =&gt; [original value, new value].\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changes</span> <span class=\"ruby-comment\"># =&gt; {}</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> = <span class=\"ruby-string\">&#39;bob&#39;</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changes</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["characters","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-characters","(string)",""],["chars","ActiveSupport::CoreExtensions::String::Multibyte","classes/ActiveSupport/CoreExtensions/String/Multibyte.html#method-i-chars","()",""],["charset","ActionController::Response","classes/ActionController/Response.html#method-i-charset","()",""],["charset","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-charset","()","<p>Returns the database character set.\n"],["charset=","ActionController::Response","classes/ActionController/Response.html#method-i-charset-3D","(charset)","<p>Set the charset of the Content-Type header. Set to nil to remove it. If no\ncontent type is set, it defaults …\n"],["check_box","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-check_box","(object_name, method, options = {}, checked_value = \"1\", unchecked_value = \"0\")","<p>Returns a checkbox tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an object …\n"],["check_box_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-check_box_tag","(name, value = \"1\", checked = false, options = {})","<p>Creates a check box form input tag.\n<p>Options\n<p><code>:disabled</code> - If set to true, the user will not be able to use …\n"],["check_for_name_collision","Builder","classes/Builder.html#method-c-check_for_name_collision","(klass, method_name, defined_constant=nil)",""],["check_for_unbuilt_gems","Rails::Initializer","classes/Rails/Initializer.html#method-i-check_for_unbuilt_gems","()",""],["check_gem_dependencies","Rails::Initializer","classes/Rails/Initializer.html#method-i-check_gem_dependencies","()",""],["check_multithread_status!","MemCache","classes/MemCache.html#method-i-check_multithread_status-21","()",""],["check_ruby_version","Rails::Initializer","classes/Rails/Initializer.html#method-i-check_ruby_version","()","<p>Check for valid Ruby version This is done in an external file, so we can\nuse it from the `rails` program …\n"],["checkin","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkin","(conn)","<p>Check-in a database connection back into the pool, indicating that you no\nlonger need this connection. …\n"],["checkout","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout","()","<p>Check-out a database connection from the pool, indicating that you want to\nuse it. You should call #checkin …\n"],["class!","Builder::CSS","classes/Builder/CSS.html#method-i-class-21","(arg, &block)",""],["class_attribute","Class","classes/Class.html#method-i-class_attribute","(*attrs)","<p>Declare a class-level attribute whose value is inheritable and overwritable\nby subclasses:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["class_collisions","Rails::Generator::Commands::Base","classes/Rails/Generator/Commands/Base.html#method-i-class_collisions","(*class_names)","<p>Does nothing for all commands except Create.\n"],["class_collisions","Rails::Generator::Commands::Create","classes/Rails/Generator/Commands/Create.html#method-i-class_collisions","(*class_names)","<p>Check whether the given class names are already taken by Ruby or Rails.  In\nthe future, expand to check …\n"],["class_collisions","Rails::Generator::Commands::List","classes/Rails/Generator/Commands/List.html#method-i-class_collisions","(*class_names)",""],["class_eval","Kernel","classes/Kernel.html#method-i-class_eval","(*args, &block)","<p>class_eval on an object acts like singleton_class.class_eval.\n"],["class_eval","Object","classes/Object.html#method-i-class_eval","(*args, &block)","<p>class_eval on an object acts like singleton_class_eval.\n"],["class_file","Rails::Generator::Spec","classes/Rails/Generator/Spec.html#method-i-class_file","()",""],["class_name","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-class_name","()","<p>Returns the class name for the macro.  For example, <code>composed_of\n:balance, :class_name =&gt; &#39;Money&#39;</code> …\n"],["class_name","Rails::Generator::Spec","classes/Rails/Generator/Spec.html#method-i-class_name","()",""],["class_of_active_record_descendant","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-class_of_active_record_descendant","(klass)","<p>Returns the class descending directly from ActiveRecord::Base or an\nabstract class, if any, in the inheritance …\n"],["classify","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-classify","()","<p>Create a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],["classify","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-classify","(table_name)","<p>Create a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],["clean","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-clean","(backtrace)","<p>Returns the backtrace after all filters and silencers has been run against\nit. Filters run first, then …\n"],["clean_backtrace","ActionController::TestCase::Assertions","classes/ActionController/TestCase/Assertions.html#method-i-clean_backtrace","(&block)",""],["clean_within","ActiveSupport::CoreExtensions::Pathname::CleanWithin","classes/ActiveSupport/CoreExtensions/Pathname/CleanWithin.html#method-i-clean_within","(string)","<p>Clean the paths contained in the provided string.\n"],["cleanup_application","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-c-cleanup_application","()",""],["clear","ActionController::Session::AbstractStore::SessionHash","classes/ActionController/Session/AbstractStore/SessionHash.html#method-i-clear","()",""],["clear","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-clear","()","<p>Removes all errors that have been added.\n"],["clear","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-clear","()",""],["clear","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-clear","()",""],["clear","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-clear","()",""],["clear","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-clear","()",""],["clear","ActiveSupport::Cache::SynchronizedMemoryStore","classes/ActiveSupport/Cache/SynchronizedMemoryStore.html#method-i-clear","()",""],["clear","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-clear","(scope = :all)","<p>Clears the loaded inflections within a given scope (default is\n<code>:all</code>). Give the scope as a symbol of the …\n"],["clear_active_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_active_connections-21","()","<p>Returns any connections in use by the current thread back to the pool, and\nalso returns connections to …\n"],["clear_all_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_all_connections-21","()",""],["clear_buffer","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-clear_buffer","()",""],["clear_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-clear_query_cache","()","<p>Clears the query cache.\n<p>One reason you may wish to call this method explicitly is between queries\nthat …\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes\n"],["clear_stale_cached_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_stale_cached_connections-21","()","<p>Return any checked-out connections back to the pool by threads that are no\nlonger alive.\n"],["client_min_messages","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-client_min_messages","()","<p>Returns the current client message level.\n"],["client_min_messages=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-client_min_messages-3D","(level)","<p>Set the client message level.\n"],["clone","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-clone","()","<p>Returns a clone of the record that hasn&#39;t been assigned an id yet and\nis treated as a new record. …\n"],["clone","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-clone","()","<p>Returns a clone of the resource that hasn&#39;t been assigned an\n<code>id</code> yet and is treated as a new resource. …\n"],["close","ActionController::Reloader::BodyWrapper","classes/ActionController/Reloader/BodyWrapper.html#method-i-close","()",""],["close","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-close","()",""],["close","ActiveSupport::Gzip::Stream","classes/ActiveSupport/Gzip/Stream.html#method-i-close","()",""],["close","MemCache::Server","classes/MemCache/Server.html#method-i-close","()","<p>Close the connection to the memcached server targeted by this object.  The\nserver is not considered dead. …\n"],["close_connection","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-close_connection","(request)",""],["collation","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-collation","()","<p>Returns the database collation strategy.\n"],["collection_path","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-collection_path","(options = nil)",""],["collection_path","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-collection_path","(prefix_options = {}, query_options = nil)","<p>Gets the collection path for the REST resources.  If the\n<code>query_options</code> parameter is omitted, Rails will …\n"],["collection_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-collection_select","(method, collection, value_method, text_method, options = {}, html_options = {})",""],["collection_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select","(object, method, collection, value_method, text_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code> and <code>&lt;option&gt;</code> tags\nfor the collection of existing return values of <code>method</code> …\n"],["colorize_logging","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-colorize_logging","","<p>Determines whether to use ANSI codes to colorize the logging statements\ncommitted by the connection adapter. …\n"],["column","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column","(column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["column","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column","(name, type, options = {})","<p>Instantiates a new column for the table. The <code>type</code> parameter is\nnormally one of the migrations native …\n"],["column_for_attribute","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-column_for_attribute","(name)","<p>Returns the column object for the named attribute.\n"],["column_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-column_name_length","()","<p>the maximum length of a column name\n"],["column_names","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-column_names","()","<p>Returns an array of column names as strings.\n"],["columns","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-columns","()","<p>Returns an array of column objects for the table associated with this\nclass.\n"],["columns","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-columns","(table_name, name = nil)","<p>Returns the list of all column definitions for a table.\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns","(table_name, name = nil)","<p>Returns an array of Column objects for the table specified by\n<code>table_name</code>. See the concrete implementation …\n"],["columns_hash","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-columns_hash","()","<p>Returns a hash of column objects for the table associated with this class.\n"],["columns_per_multicolumn_index","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_multicolumn_index","()","<p>the maximum number of columns in a multicolumn index\n"],["columns_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_table","()","<p>the maximum number of columns per table\n"],["columns_with_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-columns_with_query_cache","(*args)",""],["comment!","Builder::CSS","classes/Builder/CSS.html#method-i-comment-21","(comment_text)","<p>Create a comment string in the output.\n"],["comment!","Builder::XmlMarkup","classes/Builder/XmlMarkup.html#method-i-comment-21","(comment_text)",""],["commit_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits the transaction (and turns on auto-committing).\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-commit_db_transaction","()","<p>Commits a transaction.\n"],["comparable_time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-comparable_time","()",""],["compare_with_coercion","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-compare_with_coercion","(other)","<p>Layers additional behavior on DateTime#&lt;=&gt; so that Time and\nActiveSupport::TimeWithZone instances …\n"],["compare_with_coercion","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-compare_with_coercion","(other)","<p>Layers additional behavior on Time#&lt;=&gt; so that DateTime and\nActiveSupport::TimeWithZone instances …\n"],["compile","ActionView::TemplateHandlers::Builder","classes/ActionView/TemplateHandlers/Builder.html#method-i-compile","(template)",""],["compile","ActionView::TemplateHandlers::Compilable","classes/ActionView/TemplateHandlers/Compilable.html#method-i-compile","(template)",""],["compile","ActionView::TemplateHandlers::ERB","classes/ActionView/TemplateHandlers/ERB.html#method-i-compile","(template)",""],["compile","ActionView::TemplateHandlers::RJS","classes/ActionView/TemplateHandlers/RJS.html#method-i-compile","(template)",""],["compile_all_strings_in","I18n::Backend::InterpolationCompiler","classes/I18n/Backend/InterpolationCompiler.html#method-i-compile_all_strings_in","(data)",""],["compile_if_an_interpolation","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#method-i-compile_if_an_interpolation","(string)",""],["compile_interpolation_token","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#method-i-compile_interpolation_token","(key)",""],["compiled_interpolation_body","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#method-i-compiled_interpolation_body","(str)",""],["complex_template","Rails::Generator::Commands::Create","classes/Rails/Generator/Commands/Create.html#method-i-complex_template","(relative_source, relative_destination, template_options = {})",""],["complex_template","Rails::Generator::Commands::Destroy","classes/Rails/Generator/Commands/Destroy.html#method-i-complex_template","(*args)",""],["complex_template","Rails::Generator::Commands::List","classes/Rails/Generator/Commands/List.html#method-i-complex_template","(relative_source, relative_destination, options = {})",""],["complex_template","Rails::Generator::Commands::Update","classes/Rails/Generator/Commands/Update.html#method-i-complex_template","(relative_source, relative_destination, template_options = {})",""],["compose","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-compose","()","<p>Performs composition on all the characters.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-comment\">#=&gt; 3</span>\n<span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">compose</span>.<span class=\"ruby-identifier\">to_s</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["compose_codepoints","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-compose_codepoints","(codepoints)","<p>Compose decomposed characters to the composed form.\n"],["composed_of","ActiveRecord::Aggregations::ClassMethods","classes/ActiveRecord/Aggregations/ClassMethods.html#method-i-composed_of","(part_id, options = {}, &block)","<p>Adds reader and writer methods for manipulating a value object:\n<code>composed_of :address</code> adds <code>address</code> and …\n"],["compress","ActiveSupport::Gzip","classes/ActiveSupport/Gzip.html#method-c-compress","(source)","<p>Compresses a string using gzip.\n"],["compute","I18n::Locale::Fallbacks","classes/I18n/Locale/Fallbacks.html#method-i-compute","(tags, include_defaults = true)",""],["compute_type","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-compute_type","(type_name)","<p>Returns the class type of the record using the current module as a prefix.\nSo descendants of MyApp::Business::Account …\n"],["concat","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-concat","(string, unused_binding = nil)","<p>The preferred method of outputting text in your views is to use the &lt;%=\n“text” %&gt; eRuby …\n"],["config","I18n","classes/I18n.html#method-c-config","()","<p>Gets I18n configuration object.\n"],["config=","I18n","classes/I18n.html#method-c-config-3D","(value)","<p>Sets I18n configuration object.\n"],["configuration","Rails","classes/Rails.html#method-c-configuration","()","<p>The Configuration instance used to configure the Rails environment\n"],["configuration=","Rails","classes/Rails.html#method-c-configuration-3D","(configuration)",""],["configurations","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-configurations","","<p>Contains the database configuration - as is typically stored in\nconfig/database.yml - as a Hash.\n<p>For example, …\n"],["connect","ActionController::Routing::RouteSet::Mapper","classes/ActionController/Routing/RouteSet/Mapper.html#method-i-connect","(path, options = {})","<p>Create an unnamed route with the provided <code>path</code> and\n<code>options</code>. See ActionController::Routing for an introduction …\n"],["connect_to","MemCache::Server","classes/MemCache/Server.html#method-i-connect_to","(host, port, timeout=nil)",""],["connected?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-connected-3F","()","<p>Returns true if <code>ActiveRecord</code> is connected.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connected-3F","(klass)","<p>Returns true if a connection that&#39;s accessible to this class has\nalready been opened.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connected-3F","()","<p>Returns true if a connection has already been opened.\n"],["connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connection","()","<p>Retrieve the connection associated with the current thread, or call\n#checkout to obtain one if necessary. …\n"],["connection","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-connection","()",""],["connection","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-connection","","<p>Use the ActiveRecord::Base.connection by default.\n"],["connection","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-connection","(refresh = false)","<p>An instance of ActiveResource::Connection that is the base connection to\nthe remote service. The <code>refresh</code> …\n"],["connection","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-connection","(refresh = false)",""],["connection_handler","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-connection_handler","","<p>The connection handler\n"],["connection_pool","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-connection_pool","()",""],["connection_pools","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pools","()",""],["constantize","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-constantize","()","<p><code>constantize</code> tries to find a declared constant with the name\nspecified in the string. It raises a NameError …\n"],["constantize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;Module&quot;</span>.<span class=\"ruby-identifier\">constantize</span>     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["construct_count_options_from_args","ActiveRecord::Calculations::ClassMethods","classes/ActiveRecord/Calculations/ClassMethods.html#method-i-construct_count_options_from_args","(*args)",""],["consumes?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-consumes-3F","(string)","<p>Returns <code>true</code> when the proxy class can handle the string.\nReturns <code>false</code> otherwise.\n"],["contains_bad_protocols?","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-contains_bad_protocols-3F","(attr_name, value)",""],["content_columns","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-content_columns","()","<p>Returns an array of column objects where the primary id, all columns ending\nin “_id” or “_count”, …\n"],["content_for","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-content_for","(name, content = nil, &block)","<p>Calling content_for stores a block of markup in an identifier for later\nuse. You can make subsequent …\n"],["content_length","ActionController::Request","classes/ActionController/Request.html#method-i-content_length","()","<p>Returns the content length of the request as an integer.\n"],["content_tag","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-content_tag","(name, content_or_options_with_block = nil, options = nil, escape = true, &block)","<p>Returns an HTML block tag of type <code>name</code> surrounding the\n<code>content</code>. Add HTML attributes by passing an attributes …\n"],["content_tag_for","ActionView::Helpers::RecordTagHelper","classes/ActionView/Helpers/RecordTagHelper.html#method-i-content_tag_for","(tag_name, record, *args, &block)","<p>content_tag_for creates an HTML element with id and class parameters that\nrelate to the specified Active …\n"],["content_type","ActionController::Request","classes/ActionController/Request.html#method-i-content_type","()","<p>The MIME type of the HTTP request, such as Mime::XML.\n<p>For backward compatibility, the post format is extracted …\n"],["content_type","ActionController::Response","classes/ActionController/Response.html#method-i-content_type","()","<p>Returns the response&#39;s content MIME type, or nil if content type has\nbeen set.\n"],["content_type","ActionView::Template","classes/ActionView/Template.html#method-i-content_type","()",""],["content_type=","ActionController::Response","classes/ActionController/Response.html#method-i-content_type-3D","(mime_type)","<p>Sets the HTTP response&#39;s content MIME type. For example, in the\ncontroller you could write this: …\n"],["controller_class","ActionController::TestCase","classes/ActionController/TestCase.html#method-c-controller_class","()",""],["controller_class=","ActionController::TestCase","classes/ActionController/TestCase.html#method-c-controller_class-3D","(new_class)",""],["controller_class_name","ActionController::Base","classes/ActionController/Base.html#method-c-controller_class_name","()","<p>Converts the class name from something like\n“OneModule::TwoModule::NeatController” to “NeatController”. …\n"],["controller_class_name","ActionController::Base","classes/ActionController/Base.html#method-i-controller_class_name","()","<p>Converts the class name from something like\n“OneModule::TwoModule::NeatController” to “NeatController”. …\n"],["controller_name","ActionController::Base","classes/ActionController/Base.html#method-c-controller_name","()","<p>Converts the class name from something like\n“OneModule::TwoModule::NeatController” to “neat”. …\n"],["controller_name","ActionController::Base","classes/ActionController/Base.html#method-i-controller_name","()","<p>Converts the class name from something like\n“OneModule::TwoModule::NeatController” to “neat”. …\n"],["controller_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-controller_name","()","<p>for ActionView compatibility\n"],["controller_path","ActionController::Base","classes/ActionController/Base.html#method-c-controller_path","()","<p>Converts the class name from something like\n“OneModule::TwoModule::NeatController” to “ …\n"],["controller_path","ActionController::Base","classes/ActionController/Base.html#method-i-controller_path","()","<p>Converts the class name from something like\n“OneModule::TwoModule::NeatController” to “ …\n"],["controller_path","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-controller_path","()",""],["controller_path","ActionView::TestCase::TestController","classes/ActionView/TestCase/TestController.html#method-c-controller_path","()",""],["controller_path","Rails::Plugin","classes/Rails/Plugin.html#method-i-controller_path","()",""],["controller_relative_to","ActionController::Routing","classes/ActionController/Routing.html#method-c-controller_relative_to","(controller, previous)","<p>Returns a controller path for a new <code>controller</code> based on a\n<code>previous</code> controller path. Handles 4 scenarios: …\n"],["convert_key","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_value","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-convert_value","(value)",""],["cookies","ActionController::Cookies","classes/ActionController/Cookies.html#method-i-cookies","()","<p>Returns the cookie container, which operates as described above.\n"],["cookies","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-cookies","()",""],["count","ActiveRecord::Calculations::ClassMethods","classes/ActiveRecord/Calculations/ClassMethods.html#method-i-count","(*args)","<p>Count operates using three different approaches.\n<p>Count all: By not passing any parameters to count, it …\n"],["count","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-count","()",""],["count","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-count","()",""],["count_by_sql","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-count_by_sql","(sql)","<p>Returns the result of an SQL statement that should only include a COUNT(*)\nin the SELECT part. The use …\n"],["create","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-create","(attributes = nil, &block)","<p>Creates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["create","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-create","(attributes = {})","<p>Creates a new resource instance and makes a request to the remote service\nthat it be saved, making it …\n"],["create","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-create","()","<p>Create (i.e., save to the remote service) the new resource.\n"],["create","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-create","(name, utc_offset = nil, tzinfo = nil)",""],["create!","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-create-21","(attributes = nil, &block)","<p>Creates an object just like Base.create but calls save! instead of save so\nan exception is raised if …\n"],["create_continuum_for","MemCache","classes/MemCache.html#method-i-create_continuum_for","(servers)",""],["create_database","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new MySQL database with optional <code>:charset</code> and\n<code>:collation</code>. Charset defaults to utf8.\n<p>Example: …\n"],["create_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new PostgreSQL database.  Options include <code>:owner</code>,\n<code>:template</code>, <code>:encoding</code>, <code>:tablespace</code>,\nand <code>:connection_limit</code> …\n"],["create_fixtures","Fixtures","classes/Fixtures.html#method-c-create_fixtures","(fixtures_directory, table_names, class_names = {})",""],["create_fixtures","Object","classes/Object.html#method-i-create_fixtures","(*table_names, &block)",""],["create_reflection","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-create_reflection","(macro, name, options, active_record)",""],["create_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-create_savepoint","()",""],["create_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table","(table_name, options = {})","<p>Creates a new table with the name <code>table_name</code>.\n<code>table_name</code> may either be a String or a Symbol.\n<p>There are …\n"],["create_table!","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-c-create_table-21","()",""],["create_table!","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-create_table-21","()",""],["csrf_meta_tag","ActionView::Helpers::CsrfHelper","classes/ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tag","()","<p>Returns a meta tag with the cross-site request forgery protection token for\nforms to use. Place this …\n"],["css_select","ActionController::Assertions::SelectorAssertions","classes/ActionController/Assertions/SelectorAssertions.html#method-i-css_select","(*args)","<p>Select and return all matching elements.\n<p>If called with a single argument, uses that argument as a selector …\n"],["current","ActiveSupport::CoreExtensions::Date::Calculations::ClassMethods","classes/ActiveSupport/CoreExtensions/Date/Calculations/ClassMethods.html#method-i-current","()","<p>Returns Time.zone.today when config.time_zone is set, otherwise just\nreturns Date.today.\n"],["current","ActiveSupport::CoreExtensions::DateTime::Calculations::ClassMethods","classes/ActiveSupport/CoreExtensions/DateTime/Calculations/ClassMethods.html#method-i-current","()",""],["current","ActiveSupport::CoreExtensions::Time::Zones::ClassMethods","classes/ActiveSupport/CoreExtensions/Time/Zones/ClassMethods.html#method-i-current","()","<p>Returns <code>Time.zone.now</code> when <code>config.time_zone</code> is\nset, otherwise just returns <code>Time.now</code>.\n"],["current_cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-current_cycle","(name = \"default\")","<p>Returns the current cycle string after a cycle has been started. Useful for\ncomplex table highlighing …\n"],["current_database","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-current_database","()",""],["current_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-current_database","()","<p>Returns the current database name.\n"],["current_hash","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-current_hash","()",""],["current_hash","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-current_hash","()",""],["current_migration_number","Rails::Generator::Commands::Base","classes/Rails/Generator/Commands/Base.html#method-i-current_migration_number","()",""],["current_page?","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-current_page-3F","(options)","<p>True if the current request URI was generated by the given\n<code>options</code>.\n<p>Examples\n<p>Let&#39;s say we&#39;re in …\n"],["current_period","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-current_period","()","<p>Returns the TimezonePeriod for the current time.\n"],["current_period_and_time","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-current_period_and_time","()","<p>Returns the current Time and TimezonePeriod as an array. The first element\nis the time, the second element …\n"],["current_savepoint_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-current_savepoint_name","()",""],["current_time_and_period","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-current_time_and_period","()",""],["custom_method_collection_url","ActiveResource::CustomMethods::ClassMethods","classes/ActiveResource/CustomMethods/ClassMethods.html#method-i-custom_method_collection_url","(method_name, options = {})",""],["cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-cycle","(first_value, *values)","<p>Creates a Cycle object whose <em>to_s</em> method cycles through elements\nof an array every time it is called. …\n"],["daemon","Process","classes/Process.html#method-c-daemon","(nochdir = nil, noclose = nil)",""],["daemonize","Kernel","classes/Kernel.html#method-i-daemonize","()","<p>Turns the current script into a daemon process that detaches from the\nconsole. It can be shut down with …\n"],["dasherize","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-dasherize","()","<p>Replaces underscores with dashes in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;puni_puni&quot;</span> <span class=\"ruby-comment\"># =&gt; &quot;puni-puni&quot;</span>\n</pre>\n"],["dasherize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-dasherize","(underscored_word)","<p>Replaces underscores with dashes in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;puni_puni&quot;</span> <span class=\"ruby-comment\"># =&gt; &quot;puni-puni&quot;</span>\n</pre>\n"],["data","ActionController::Session::AbstractStore::SessionHash","classes/ActionController/Session/AbstractStore/SessionHash.html#method-i-data","()",""],["data","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-i-data","()","<p>Lazy-unmarshal session state.\n"],["data","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-data","()","<p>Lazy-unmarshal session state.\n"],["data_column","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-data_column","","<p>The data field defaults to &#39;data&#39;.\n"],["data_column_name","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-c-data_column_name","","<p>Customizable data column name.  Defaults to &#39;data&#39;.\n"],["data_column_size_limit","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-c-data_column_size_limit","()",""],["database_configuration","Rails::Configuration","classes/Rails/Configuration.html#method-i-database_configuration","()","<p>Loads and returns the contents of the #database_configuration_file. The\ncontents of the file are processed …\n"],["date_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-date_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, and day) pre-selected\nfor accessing a specified date-based …\n"],["date_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-date_select","(method, options = {}, html_options = {})",""],["datetime_format","Logger","classes/Logger.html#method-i-datetime_format","()","<p>Get the logging datetime format. Returns nil if the formatter does not\nsupport datetime formatting.\n"],["datetime_format=","Logger","classes/Logger.html#method-i-datetime_format-3D","(datetime_format)","<p>Logging date-time format (string passed to <code>strftime</code>). Ignored\nif the formatter does not respond to datetime_format …\n"],["datetime_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-datetime_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, day, hour, and minute)\npre-selected for accessing …\n"],["datetime_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-datetime_select","(method, options = {}, html_options = {})",""],["day","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-day","()",""],["days","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-days","()",""],["days_in_month","ActiveSupport::CoreExtensions::Time::Calculations::ClassMethods","classes/ActiveSupport/CoreExtensions/Time/Calculations/ClassMethods.html#method-i-days_in_month","(month, year = now.year)","<p>Return the number of days in the given month. If no year is specified, it\nwill use the current year. …\n"],["debug","ActionView::Helpers::DebugHelper","classes/ActionView/Helpers/DebugHelper.html#method-i-debug","(object)","<p>Returns a YAML representation of <code>object</code> wrapped with\n&lt;pre&gt; and &lt;/pre&gt;. If the object cannot …\n"],["debug_rjs","ActionView::Base","classes/ActionView/Base.html#method-c-debug_rjs","","<p>Specify whether RJS responses should be wrapped in a try/catch block that\nalert()s the caught exception …\n"],["debugger","Kernel","classes/Kernel.html#method-i-debugger","()","<p>Starts a debugging session if ruby-debug has been loaded (call\nscript/server –debugger to do load it). …\n"],["declare!","Builder::XmlMarkup","classes/Builder/XmlMarkup.html#method-i-declare-21","(inst, *args, &block)","<p>Insert an XML declaration into the XML markup.\n<p>For example:\n\n<pre>xml.declare! :ELEMENT, :blah, &quot;yada&quot;\n    # ...</pre>\n"],["decode","ActiveResource::Formats::JsonFormat","classes/ActiveResource/Formats/JsonFormat.html#method-i-decode","(json)",""],["decode","ActiveResource::Formats::XmlFormat","classes/ActiveResource/Formats/XmlFormat.html#method-i-decode","(xml)",""],["decode","ActiveSupport::JSON::Backends::JSONGem","classes/ActiveSupport/JSON/Backends/JSONGem.html#method-i-decode","(json)","<p>Converts a JSON string into a Ruby object.\n"],["decode","ActiveSupport::JSON::Backends::OkJson","classes/ActiveSupport/JSON/Backends/OkJson.html#method-i-decode","(json)","<p>Parses a JSON string or IO and convert it into an object\n"],["decode","ActiveSupport::JSON::Backends::Yajl","classes/ActiveSupport/JSON/Backends/Yajl.html#method-i-decode","(json)","<p>Parses a JSON string or IO and convert it into an object\n"],["decode","ActiveSupport::JSON::Backends::Yaml","classes/ActiveSupport/JSON/Backends/Yaml.html#method-i-decode","(json)",""],["decode","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-decode","(s)","<p>Decodes a json document in string s and returns the corresponding ruby\nvalue. String s must be valid …\n"],["decode64","ActiveSupport::Base64","classes/ActiveSupport/Base64.html#method-c-decode64","(data)","<p>Decodes a base 64 encoded string to its original representation.\n\n<pre>ActiveSupport::Base64.decode64(&quot;T3JpZ2luYWwgdW5lbmNvZGVkIHN0cmluZw==&quot;) ...</pre>\n"],["decode_credentials","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-decode_credentials","(request)",""],["decode_credentials","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials","(header)",""],["decode_credentials_header","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials_header","(request)",""],["decompose","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-decompose","()","<p>Performs canonical decomposition on all the characters.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-comment\">#=&gt; 2</span>\n<span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">decompose</span>.<span class=\"ruby-identifier\">to_s</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["decompose_codepoints","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-decompose_codepoints","(type, codepoints)","<p>Decompose composed characters to the decomposed form.\n"],["decompress","ActiveSupport::Gzip","classes/ActiveSupport/Gzip.html#method-c-decompress","(source)","<p>Decompresses a gzipped string.\n"],["decr","MemCache","classes/MemCache.html#method-i-decr","(key, amount = 1)","<p>Decrements the value for <code>key</code> by <code>amount</code> and\nreturns the new value. <code>key</code> must already exist.  If\n<code>key</code> is …\n"],["decrement","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-decrement","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and\nsubtracts the value passed as <code>by</code> (default is 1). The decrement\n…\n"],["decrement","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-decrement","(key, amount = 1)",""],["decrement","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-decrement","(key, amount = 1)",""],["decrement","ActiveSupport::Cache::SynchronizedMemoryStore","classes/ActiveSupport/Cache/SynchronizedMemoryStore.html#method-i-decrement","(key, amount = 1)",""],["decrement!","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-decrement-21","(attribute, by = 1)","<p>Wrapper around <code>decrement</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["decrement_counter","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-decrement_counter","(counter_name, id)","<p>Decrement a number field by one, usually representing a count.\n<p>This works the same as increment_counter …\n"],["decrement_open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-decrement_open_transactions","()",""],["decrypt","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-decrypt","(encrypted_message)",""],["decrypt_and_verify","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-decrypt_and_verify","(value)",""],["deep_merge","ActiveSupport::CoreExtensions::Hash::DeepMerge","classes/ActiveSupport/CoreExtensions/Hash/DeepMerge.html#method-i-deep_merge","(other_hash)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code>\nmerged recursively.\n"],["deep_merge!","ActiveSupport::CoreExtensions::Hash::DeepMerge","classes/ActiveSupport/CoreExtensions/Hash/DeepMerge.html#method-i-deep_merge-21","(other_hash)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code>\nmerged recursively. Modifies the receiver in place.\n"],["deep_merge!","Hash","classes/Hash.html#method-i-deep_merge-21","(data)",""],["deep_munge","ActionController::Request","classes/ActionController/Request.html#method-i-deep_munge","(hash)","<p>Remove nils from the params hash\n"],["deep_symbolize_keys","Hash","classes/Hash.html#method-i-deep_symbolize_keys","()",""],["default","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-default","(key = nil)",""],["default","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-default","(locale, object, subject, options = {})","<p>Evaluates defaults. If given subject is an Array, it walks the array and\nreturns the first translation …\n"],["default","Rails::Generator::GeneratedAttribute","classes/Rails/Generator/GeneratedAttribute.html#method-i-default","()",""],["default","RailsEnvironment","classes/RailsEnvironment.html#method-c-default","()",""],["default=","RailsEnvironment","classes/RailsEnvironment.html#method-c-default-3D","(rails_env)",""],["default_error_messages","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-c-default_error_messages","()",""],["default_locale","I18n::Config","classes/I18n/Config.html#method-i-default_locale","()","<p>Returns the current default locale. Defaults to :&#39;en&#39;\n"],["default_locale=","I18n::Config","classes/I18n/Config.html#method-i-default_locale-3D","(locale)","<p>Sets the current default locale. Used to set a custom default locale.\n"],["default_options","ActiveRecord::Error","classes/ActiveRecord/Error.html#method-i-default_options","()","<p>Return user options with default options.\n"],["default_options","Rails::Generator::Options","classes/Rails/Generator/Options.html#method-i-default_options","()","<p>Convenient access to class default options.\n"],["default_options","Rails::Generator::Options::ClassMethods","classes/Rails/Generator/Options/ClassMethods.html#method-i-default_options","(options = nil)",""],["default_primary_key_type","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-default_primary_key_type","()",""],["default_scope","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-default_scope","(options = {})","<p>Sets the default options for the model. The format of the\n<code>options</code> argument is the same as in find.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["default_separator","I18n::Config","classes/I18n/Config.html#method-i-default_separator","()","<p>Returns the current default scope separator. Defaults to &#39;.&#39;\n"],["default_separator=","I18n::Config","classes/I18n/Config.html#method-i-default_separator-3D","(separator)","<p>Sets the current default scope separator.\n"],["default_sequence_name","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-default_sequence_name","(table, column)",""],["default_timezone","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-default_timezone","","<p>Determines whether to use Time.local (using :local) or Time.utc (using\n:utc) when pulling dates and times …\n"],["default_url_options","ActionController::Base","classes/ActionController/Base.html#method-i-default_url_options","(options = nil)","<p>Overwrite to implement a number of default options that all url_for-based\nmethods will use. The default …\n"],["defaults","Repositories","classes/Repositories.html#method-i-defaults","()",""],["defaults=","I18n::Locale::Fallbacks","classes/I18n/Locale/Fallbacks.html#method-i-defaults-3D","(defaults)",""],["define","ActiveRecord::Schema","classes/ActiveRecord/Schema.html#method-c-define","(info={}, &block)","<p>Eval the given block. All methods available to the current connection\nadapter are available within the …\n"],["define_around_helper","Logger","classes/Logger.html#method-c-define_around_helper","(level)",""],["define_attribute_methods","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods","()","<p>Generates all the attribute related methods for columns in the database\naccessors, mutators and query …\n"],["define_callbacks","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-define_callbacks","(*callbacks)",""],["define_dispatcher_callbacks","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-c-define_dispatcher_callbacks","(cache_classes)",""],["define_read_methods","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-define_read_methods","()",""],["delay","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-delay","(seconds = 1)","<p>Executes the content of the block after a delay of <code>seconds</code>.\nExample:\n\n<pre># Generates:\n#     setTimeout(function() ...</pre>\n"],["delegate","Module","classes/Module.html#method-i-delegate","(*methods)","<p>Provides a delegate class method to easily expose contained objects&#39;\nmethods as your own. Pass one …\n"],["delete","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-delete","(path, parameters = nil, headers = nil)","<p>Performs a DELETE request with the given parameters. See get() for more\ndetails.\n"],["delete","ActionController::Session::AbstractStore::SessionHash","classes/ActionController/Session/AbstractStore/SessionHash.html#method-i-delete","(key)",""],["delete","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-delete","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating DELETE HTTP method and set/volley the\nresponse\n"],["delete","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-delete","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["delete","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-delete","(id)","<p>Deletes the row with a primary key matching the <code>id</code> argument,\nusing a SQL <code>DELETE</code> statement, and returns …\n"],["delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete","(sql, name = nil)","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-delete","(id, options = {})","<p>Deletes the resources with the ID in the <code>id</code> parameter.\n<p>Options\n<p>All options specify prefix and query parameters. …\n"],["delete","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-delete","(path, headers = {})","<p>Execute a DELETE request (see HTTP protocol documentation if unfamiliar).\nUsed to delete resources.\n"],["delete","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-c-delete","(custom_method_name, options = {})",""],["delete","ActiveResource::CustomMethods::InstanceMethods","classes/ActiveResource/CustomMethods/InstanceMethods.html#method-i-delete","(method_name, options = {})",""],["delete","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-delete","(name, options = nil)",""],["delete","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-delete","(name, options = nil)",""],["delete","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-delete","(key, options = nil)",""],["delete","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-delete","(key, options = nil)",""],["delete","ActiveSupport::Cache::SynchronizedMemoryStore","classes/ActiveSupport/Cache/SynchronizedMemoryStore.html#method-i-delete","(name, options = nil)",""],["delete","ActiveSupport::Callbacks::CallbackChain","classes/ActiveSupport/Callbacks/CallbackChain.html#method-i-delete","(callback)",""],["delete","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes a specified key from the hash.\n"],["delete","MemCache","classes/MemCache.html#method-i-delete","(key, expiry = 0)","<p>Removes <code>key</code> from the cache in <code>expiry</code> seconds.\n"],["delete?","ActionController::Request","classes/ActionController/Request.html#method-i-delete-3F","()","<p>Is this a DELETE request?  Equivalent to <code>request.method ==\n:delete</code>.\n"],["delete_all","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-delete_all","(conditions = nil)","<p>Deletes the records matching <code>conditions</code> without instantiating\nthe records first, and hence not calling …\n"],["delete_existing_fixtures","Fixtures","classes/Fixtures.html#method-i-delete_existing_fixtures","()",""],["delete_matched","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::SynchronizedMemoryStore","classes/ActiveSupport/Cache/SynchronizedMemoryStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete_sql","(sql, name = nil)","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete_via_redirect","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-delete_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a DELETE request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["deliver","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-deliver","(mail)","<p>Deliver the given mail object directly. This can be used to deliver a\npreconstructed mail object, like: …\n"],["deliver!","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-deliver-21","(mail = @mail)","<p>Delivers a TMail::Mail object. By default, it delivers the cached mail\nobject (from the <code>create!</code> method). …\n"],["demodulize","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-demodulize","()","<p>Removes the module part from the constant expression in the string.\n\n<pre>&quot;ActiveRecord::CoreExtensions::String::Inflections&quot;.demodulize ...</pre>\n"],["demodulize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-demodulize","(class_name_in_module)","<p>Removes the module part from the expression in the string.\n<p>Examples:\n\n<pre>&quot;ActiveRecord::CoreExtensions::String::Inflections&quot;.demodulize ...</pre>\n"],["dependencies","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-dependencies","()",""],["dependency","Rails::Generator::Commands::Base","classes/Rails/Generator/Commands/Base.html#method-i-dependency","(generator_name, args, runtime_options = {})",""],["dependency","Rails::Generator::Commands::List","classes/Rails/Generator/Commands/List.html#method-i-dependency","(generator_name, args, options = {})",""],["descends_from_active_record?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-descends_from_active_record-3F","()","<p>True if this isn&#39;t a concrete subclass needing a STI type condition.\n"],["destination_path","Rails::Generator::Base","classes/Rails/Generator/Base.html#method-i-destination_path","(relative_destination)","<p>Return the full path from the destination root for the given path. Example\nfor destination_root = &#39;/dest&#39;: …\n"],["destroy","ActionController::Session::AbstractStore::SessionHash","classes/ActionController/Session/AbstractStore/SessionHash.html#method-i-destroy","()",""],["destroy","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-destroy","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-destroy","(id)","<p>Destroy an object (or multiple objects) that has the given id, the object\nis instantiated first, therefore …\n"],["destroy","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-destroy","()",""],["destroy","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-destroy","()","<p>Deletes the resource from the remote service.\n<p>Examples\n\n<pre>my_id = 3\nmy_person = Person.find(my_id)\nmy_person.destroy ...</pre>\n"],["destroy_all","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-destroy_all","(conditions = nil)","<p>Destroys the records matching <code>conditions</code> by instantiating each\nrecord and calling its <code>destroy</code> method. …\n"],["destroyed?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-destroyed-3F","()","<p>Returns <code>true</code> if the record has been destroyed.\n"],["detect_type","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-detect_type","(object, options)",""],["determine_default_controller_class","ActionController::TestCase","classes/ActionController/TestCase.html#method-c-determine_default_controller_class","(name)",""],["determine_default_helper_class","ActionView::TestCase","classes/ActionView/TestCase.html#method-c-determine_default_helper_class","(name)",""],["determine_install_method","Commands::Install","classes/Commands/Install.html#method-i-determine_install_method","()",""],["diff","ActiveSupport::CoreExtensions::Hash::Diff","classes/ActiveSupport/CoreExtensions/Hash/Diff.html#method-i-diff","(h2)","<p>Returns a hash that represents the difference between two hashes.\n<p>Examples:\n\n<pre class=\"ruby\">{<span class=\"ruby-value\">1</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>}.<span class=\"ruby-identifier\">diff</span>(<span class=\"ruby-value\">1</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>)      <span class=\"ruby-operator\">...</span>\n</pre>\n"],["direct_key","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#method-i-direct_key","(key)",""],["directory","Rails::Generator::Commands::Create","classes/Rails/Generator/Commands/Create.html#method-i-directory","(relative_path)","<p>Create a directory including any missing parent directories. Always skips\ndirectories which exist.\n"],["directory","Rails::Generator::Commands::Destroy","classes/Rails/Generator/Commands/Destroy.html#method-i-directory","(relative_path)","<p>Remove each directory in the given path from right to left. Remove each\nsubdirectory if it exists and …\n"],["directory","Rails::Generator::Commands::List","classes/Rails/Generator/Commands/List.html#method-i-directory","(relative_path)",""],["directory","Rails::Generator::Commands::Update","classes/Rails/Generator/Commands/Update.html#method-i-directory","(relative_path)",""],["dirname","ActiveSupport::Multibyte::UnicodeDatabase","classes/ActiveSupport/Multibyte/UnicodeDatabase.html#method-c-dirname","()","<p>Returns the directory in which the data files are stored\n"],["dirties_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-dirties_query_cache","(base, *method_names)",""],["disable_dependency_loading","Rails::Initializer","classes/Rails/Initializer.html#method-i-disable_dependency_loading","()",""],["disable_referential_integrity","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_referential_integrity","(&block)","<p>Override to turn off referential integrity while executing\n<code>&amp;block</code>.\n"],["discard","ActionController::Flash::FlashHash","classes/ActionController/Flash/FlashHash.html#method-i-discard","(k = nil)","<p>Marks the entire flash or a single flash entry to be discarded by the end\nof the current action:\n\n<pre>flash.discard ...</pre>\n"],["disconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect-21","()","<p>Disconnects all connections in the pool, and clears the pool.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-disconnect-21","()",""],["disconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disconnect-21","()","<p>Close the connection.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-disconnect-21","()",""],["dispatch","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-c-dispatch","(cgi = nil, session_options = CgiRequest::DEFAULT_SESSION_OPTIONS, output = $stdout)","<p>DEPRECATE: Remove CGI support\n"],["dispatch","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-i-dispatch","()",""],["dispatch","DispatchServlet","classes/DispatchServlet.html#method-c-dispatch","(options = {})","<p>Start the WEBrick server with the given options, mounting the\nDispatchServlet at <code>/</code>.\n"],["dispatch_cgi","ActionController::CGIHandler","classes/ActionController/CGIHandler.html#method-c-dispatch_cgi","(app, cgi, out = $stdout)",""],["dispatch_cgi","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-i-dispatch_cgi","(cgi, session_options)","<p>DEPRECATE: Remove CGI support\n"],["dispatcher_error","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-dispatcher_error","(e, msg = \"\")",""],["dispatcher_log","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-dispatcher_log","(level, msg)",""],["display","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-display","(results, options={})","<p>Prints the mapping from filenames to annotations in <code>results</code>\nordered by filename. The <code>options</code> hash is …\n"],["distance_of_time_in_words","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words","(from_time, to_time = 0, include_seconds = false, options = {})","<p>Reports the approximate distance in time between two Time or Date objects\nor integers as seconds. Set …\n"],["distance_of_time_in_words_to_now","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words_to_now","(from_time, include_seconds = false)",""],["distinct","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-distinct","(columns, order_by)","<p>SELECT DISTINCT clause for a given set of columns and a given ORDER BY\nclause. Both PostgreSQL and Oracle …\n"],["div_for","ActionView::Helpers::RecordTagHelper","classes/ActionView/Helpers/RecordTagHelper.html#method-i-div_for","(record, *args, &block)","<p>Produces a wrapper DIV element with id and class parameters that relate to\nthe specified Active Record …\n"],["dom_class","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-dom_class","(record_or_class, prefix = nil)","<p>The DOM class convention is to use the singular form of an object or class.\nExamples:\n\n<pre>dom_class(post) ...</pre>\n"],["dom_class","ActionView::Helpers::RecordIdentificationHelper","classes/ActionView/Helpers/RecordIdentificationHelper.html#method-i-dom_class","(*args, &block)","<p>See ActionController::RecordIdentifier.dom_class – this is just a delegate\nto that for convenient access …\n"],["dom_id","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-dom_id","(record, prefix = nil)","<p>The DOM id convention is to use the singular form of an object or class\nwith the id following an underscore. …\n"],["dom_id","ActionView::Helpers::RecordIdentificationHelper","classes/ActionView/Helpers/RecordIdentificationHelper.html#method-i-dom_id","(*args, &block)","<p>See ActionController::RecordIdentifier.dom_id – this is just a delegate to\nthat for convenient access …\n"],["domain","ActionController::Request","classes/ActionController/Request.html#method-i-domain","(tld_length = 1)","<p>Returns the domain part of a host, such as “rubyonrails.org” in\n“www.rubyonrails.org”. …\n"],["downcase","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-downcase","()","<p>Convert characters in the string to lowercase.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;VĚDA A VÝZKUM&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">downcase</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\">#=&gt; &quot;věda ...</span>\n</pre>\n"],["download","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-download","(link)",""],["draggable","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-draggable","(id, options = {})","<p>Creates a script.aculo.us draggable element. See\nActionView::Helpers::ScriptaculousHelper for more information. …\n"],["draggable_element","ActionView::Helpers::ScriptaculousHelper","classes/ActionView/Helpers/ScriptaculousHelper.html#method-i-draggable_element","(element_id, options = {})","<p>Makes the element with the DOM ID specified by <code>element_id</code>\ndraggable.\n<p>Example:\n\n<pre>&lt;%= draggable_element(&quot;my_image&quot;, ...</pre>\n"],["drop_receiving","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-drop_receiving","(id, options = {})","<p>Creates a script.aculo.us drop receiving element. See\nActionView::Helpers::ScriptaculousHelper for more …\n"],["drop_receiving_element","ActionView::Helpers::ScriptaculousHelper","classes/ActionView/Helpers/ScriptaculousHelper.html#method-i-drop_receiving_element","(element_id, options = {})","<p>Makes the element with the DOM ID specified by <code>element_id</code>\nreceive dropped draggable elements (created …\n"],["drop_table","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-drop_table","(table_name, options = {})",""],["drop_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_table","(table_name, options = {})","<p>Drops a table from the database.\n"],["drop_table!","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-c-drop_table-21","()",""],["drop_table!","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-drop_table-21","()",""],["dst?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-dst-3F","()",""],["dst?","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-dst-3F","()","<p>true if daylight savings is in effect for this period; otherwise false.\n"],["dup","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-dup","()","<p>Duplicate the current resource without saving it.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">my_invoice</span> = <span class=\"ruby-constant\">Invoice</span>.<span class=\"ruby-identifier\">create</span>(:<span class=\"ruby-identifier\">customer</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;That ...\n</span></pre>\n"],["dup","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-dup","()",""],["dup","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns an exact copy of the hash.\n"],["duplicable?","Object","classes/Object.html#method-i-duplicable-3F","()","<p>Can you safely .dup this object? False for nil, false, true, symbols, and\nnumbers; true otherwise.\n"],["each","ActionController::CGIHandler::ProperStream","classes/ActionController/CGIHandler/ProperStream.html#method-i-each","()",""],["each","ActionController::Response","classes/ActionController/Response.html#method-i-each","(&callback)",""],["each","ActionController::StringCoercion::UglyBody","classes/ActionController/StringCoercion/UglyBody.html#method-i-each","()",""],["each","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-each","()","<p>Yields each attribute and associated message per error added.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Company</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">validates_presence_of</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-each","()","<p>Yields each attribute and associated message per error added.\n<p>Examples\n\n<pre>my_person = Person.new(params[:person]) ...</pre>\n"],["each","Rails::Generator::GemGeneratorSource","classes/Rails/Generator/GemGeneratorSource.html#method-i-each","()","<p>Yield latest versions of generator gems.\n"],["each","Rails::Generator::GemPathSource","classes/Rails/Generator/GemPathSource.html#method-i-each","()","<p>Yield each generator within rails_generator subdirectories.\n"],["each","Rails::Generator::PathSource","classes/Rails/Generator/PathSource.html#method-i-each","()","<p>Yield each eligible subdirectory.\n"],["each","Rails::Generator::Source","classes/Rails/Generator/Source.html#method-i-each","()","<p>The each method must be implemented in subclasses. The base implementation\nraises an error.\n"],["each","Rails::VendorGemSourceIndex","classes/Rails/VendorGemSourceIndex.html#method-i-each","(&block)",""],["each","Repositories","classes/Repositories.html#method-c-each","(&block)",""],["each","Repositories","classes/Repositories.html#method-i-each","(&block)",""],["each","Repository","classes/Repository.html#method-i-each","(&block)",""],["each_char","ActiveSupport::CoreExtensions::String::Iterators","classes/ActiveSupport/CoreExtensions/String/Iterators.html#method-i-each_char","()","<p>Yields a single-character string for each character in the string. When\n$KCODE = &#39;UTF8&#39;, multi-byte …\n"],["each_error","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-each_error","()","<p>Yields each attribute and associated error per error added.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Company</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">validates_presence_of</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_full","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-each_full","()","<p>Yields each full error message added. So\n<code>Person.errors.add(&quot;first_name&quot;, &quot;can&#39;t be</code> …\n"],["each_full","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-each_full","()","<p>Yields each full error message added. So Person.errors.add(“first_name”,\n“can&#39;t be …\n"],["each_with_hack","RackLintPatch::AllowStringSubclass","classes/RackLintPatch/AllowStringSubclass.html#method-i-each_with_hack","()",""],["each_with_object","Enumerable","classes/Enumerable.html#method-i-each_with_object","(memo, &block)","<p>Iterates over a collection, passing the current element\n<strong>and</strong> the <code>memo</code> to the block. Handy for building\n…\n"],["eat","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-eat","(typ, ts)",""],["element_path","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-element_path","(options = nil)",""],["element_path","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-element_path","(id, prefix_options = {}, query_options = nil)","<p>Gets the element path for the given ID in <code>id</code>.  If the\n<code>query_options</code> parameter is omitted, Rails will …\n"],["empty?","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-empty-3F","()","<p>Returns true if no errors have been added.\n"],["empty?","ActiveRecord::NamedScope::Scope","classes/ActiveRecord/NamedScope/Scope.html#method-i-empty-3F","()",""],["empty_insert_statement","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-empty_insert_statement","(table_name)",""],["empty_insert_statement","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-empty_insert_statement","(table_name)",""],["emulate_booleans","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-c-emulate_booleans","","<p>By default, the MysqlAdapter will consider all columns of type\n<code>tinyint(1)</code> as boolean. If you wish to …\n"],["enable_warnings","Kernel","classes/Kernel.html#method-i-enable_warnings","()","<p>Sets $VERBOSE to true for the duration of the block and back to its\noriginal value afterwards.\n"],["encode","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-encode","(options={})","<p>Returns the serialized string representation of the resource in the\nconfigured serialization format specified …\n"],["encode","ActiveResource::Formats::JsonFormat","classes/ActiveResource/Formats/JsonFormat.html#method-i-encode","(hash, options = nil)",""],["encode","ActiveResource::Formats::XmlFormat","classes/ActiveResource/Formats/XmlFormat.html#method-i-encode","(hash, options={})",""],["encode","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-encode","(x)","<p>Encodes x into a json text. It may contain only Array, Hash, String,\nNumeric, true, false, nil. (Note …\n"],["encode64","ActiveSupport::Base64","classes/ActiveSupport/Base64.html#method-c-encode64","(data)","<p>Encodes a string to its base 64 representation. Each 60 characters of\noutput is separated by a newline …\n"],["encode64s","ActiveSupport::CoreExtensions::Base64::Encoding","classes/ActiveSupport/CoreExtensions/Base64/Encoding.html#method-i-encode64s","(value)","<p>Encodes the value as base64 without the newline breaks. This makes the\nbase64 encoding readily usable …\n"],["encode_credentials","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-encode_credentials","(user_name, password)",""],["encode_credentials","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-encode_credentials","(http_method, credentials, password, password_is_ha1)",""],["encoding","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-encoding","()","<p>Returns the current database encoding format.\n"],["encrypt","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-encrypt","(value)",""],["encrypt_and_sign","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-encrypt_and_sign","(value)",""],["end_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_document","()",""],["end_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_element","(name)",""],["end_of_day","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-end_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the end of the day (23:59:59) …\n"],["end_of_day","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-end_of_day","()","<p>Returns a new DateTime representing the end of the day (23:59:59)\n"],["end_of_day","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-end_of_day","()","<p>Returns a new Time representing the end of the day, 23:59:59.999999\n(.999999999 in ruby1.9)\n"],["end_of_month","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-end_of_month","()","<p>Returns a new Date/DateTime representing the end of the month (last day of\nthe month; DateTime objects …\n"],["end_of_month","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-end_of_month","()","<p>Returns a new Time representing the end of the month (end of the last day\nof the month)\n"],["end_of_quarter","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-end_of_quarter","()","<p>Returns a new Date/DateTime representing the end of the quarter (last day\nof march, june, september, …\n"],["end_of_quarter","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-end_of_quarter","()","<p>Returns a new Time representing the end of the quarter (end of the last day\nof march, june, september, …\n"],["end_of_week","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-end_of_week","()","<p>Returns a new Date/DateTime representing the end of this week (Sunday,\nDateTime objects will have time …\n"],["end_of_week","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-end_of_week","()","<p>Returns a new Time representing the end of this week (Sunday, 23:59:59)\n"],["end_of_year","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-end_of_year","()","<p>Returns a new Time representing the end of the year (31st of december;\nDateTime objects will have time …\n"],["end_of_year","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-end_of_year","()","<p>Returns a new Time representing the end of the year (end of the 31st of\ndecember)\n"],["ends_with?","ActiveSupport::CoreExtensions::String::StartsEndsWith","classes/ActiveSupport/CoreExtensions/String/StartsEndsWith.html#method-i-ends_with-3F","(suffix)","<p>Does the string end with the specified <code>suffix</code>?\n"],["engine?","Rails::Plugin","classes/Rails/Plugin.html#method-i-engine-3F","()","<p>Engines are plugins with an app/ directory.\n"],["entity_expansion_limit=","REXML::Document","classes/REXML/Document.html#method-c-entity_expansion_limit-3D","(val)",""],["entry","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-i-entry","(record, options = {})","<p>Creates an entry tag for a specific record and prefills the id using class\nand id.\n<p>Options:\n<p><code>:published</code> …\n"],["entry_count_for","MemCache","classes/MemCache.html#method-i-entry_count_for","(server, total_servers, total_weight)",""],["enumerate","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-c-enumerate","(tag, options={})","<p>Prints all annotations with tag <code>tag</code> under the root directories\n<code>app</code>, <code>lib</code>, and <code>test</code> (recursively).\nOnly …\n"],["env","Rails","classes/Rails.html#method-c-env","()",""],["environment","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-environment","()",""],["environment","Rails::Configuration","classes/Rails/Configuration.html#method-i-environment","()","<p>Return the currently selected environment. By default, it returns the value\nof the RAILS_ENV constant. …\n"],["environment=","Commands::Plugin","classes/Commands/Plugin.html#method-i-environment-3D","(value)",""],["environment_path","Rails::Configuration","classes/Rails/Configuration.html#method-i-environment_path","()","<p>The path to the current environment&#39;s file\n(<code>development.rb</code>, etc.). By default the file is at\n<code>config/environments/</code> …\n"],["eql?","ActionView::Template::Path","classes/ActionView/Template/Path.html#method-i-eql-3F","(path)",""],["eql?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-eql-3F","(comparison_object)","<p>Delegates to ==\n"],["eql?","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-eql-3F","(other)","<p>Tests for equality (delegates to ==).\n"],["eql?","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-eql-3F","(other)",""],["eql?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-eql-3F","(other)",""],["eql?","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-eql-3F","(tz)","<p>Returns true if and only if the identifier of tz is equal to the \nidentifier of this Timezone.\n"],["eql?","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-eql-3F","(p)","<p>Returns true if this TimezonePeriods is equal to p. This compares the\nstart_transition, end_transition …\n"],["erase","Rails::Generator::Manifest","classes/Rails/Generator/Manifest.html#method-i-erase","()","<p>Erase recorded actions.\n"],["erb_trim_mode","ActionView::TemplateHandlers::ERB","classes/ActionView/TemplateHandlers/ERB.html#method-c-erb_trim_mode","","<p>Specify trim mode for the ERB compiler. Defaults to &#39;-&#39;. See ERb\ndocumentation for suitable values. …\n"],["error","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-error","(error_message)",""],["error_message_on","ActionView::Helpers::ActiveRecordHelper","classes/ActionView/Helpers/ActiveRecordHelper.html#method-i-error_message_on","(object, method, *args)","<p>Returns a string containing the error message attached to the\n<code>method</code> on the <code>object</code> if one exists. This …\n"],["error_messages_for","ActionView::Helpers::ActiveRecordHelper","classes/ActionView/Helpers/ActiveRecordHelper.html#method-i-error_messages_for","(*params)","<p>Returns a string with a <code>DIV</code> containing all of the error\nmessages for the objects located as instance …\n"],["errors","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-errors","()","<p>Returns the Errors object that holds all information about attribute error\nmessages.\n"],["errors","ActiveResource::Validations","classes/ActiveResource/Validations.html#method-i-errors","()","<p>Returns the Errors object that holds all information about attribute error\nmessages.\n"],["escape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-escape_bytea","(original_value)","<p>Escapes binary strings for bytea input to the database.\n"],["escape_javascript","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-escape_javascript","(javascript)","<p>Escape carrier returns and single and double quotes for JavaScript\nsegments.\n"],["escape_key_sym","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#method-i-escape_key_sym","(key)",""],["escape_once","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-escape_once","(html)","<p>Returns an escaped version of <code>html</code> without affecting existing\nescaped entities.\n<p>Examples\n\n<pre>escape_once(&quot;1 ...</pre>\n"],["escape_plain_str","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#method-i-escape_plain_str","(str)",""],["establish_connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-establish_connection","(spec = nil)","<p>Establishes the connection to the database. Accepts a hash as input where\nthe <code>:adapter</code> key must be specified …\n"],["establish_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-establish_connection","(name, spec)",""],["etag","ActionController::Response","classes/ActionController/Response.html#method-i-etag","()",""],["etag=","ActionController::Response","classes/ActionController/Response.html#method-i-etag-3D","(etag)",""],["etag?","ActionController::Response","classes/ActionController/Response.html#method-i-etag-3F","()",""],["etag_matches?","ActionController::Request","classes/ActionController/Request.html#method-i-etag_matches-3F","(etag)",""],["evaluate_remote_response","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-evaluate_remote_response","()","<p>Returns &#39;<code>eval(request.responseText)</code>&#39; which is the\nJavaScript function that <code>form_remote_tag</code> can …\n"],["even?","ActiveSupport::CoreExtensions::Integer::EvenOdd","classes/ActiveSupport/CoreExtensions/Integer/EvenOdd.html#method-i-even-3F","()",""],["exabyte","ActiveSupport::CoreExtensions::Numeric::Bytes","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#method-i-exabyte","()",""],["exabytes","ActiveSupport::CoreExtensions::Numeric::Bytes","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#method-i-exabytes","()",""],["except","ActiveSupport::CoreExtensions::Hash::Except","classes/ActiveSupport/CoreExtensions/Hash/Except.html#method-i-except","(*keys)","<p>Returns a new hash without the given keys.\n"],["except","Hash","classes/Hash.html#method-i-except","(*less_keys)",""],["except!","ActiveSupport::CoreExtensions::Hash::Except","classes/ActiveSupport/CoreExtensions/Hash/Except.html#method-i-except-21","(*keys)","<p>Replaces the hash without the given keys.\n"],["exception_handler","I18n::Config","classes/I18n/Config.html#method-i-exception_handler","()","<p>Return the current exception handler. Defaults to\n:default_exception_handler.\n"],["exception_handler=","I18n::Config","classes/I18n/Config.html#method-i-exception_handler-3D","(exception_handler)","<p>Sets the exception handler.\n"],["excerpt","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-excerpt","(text, phrase, *args)","<p>Extracts an excerpt from <code>text</code> that matches the first instance\nof <code>phrase</code>. The <code>:radius</code> option expands the …\n"],["exclude?","Enumerable","classes/Enumerable.html#method-i-exclude-3F","(object)","<p>The negative of the Enumerable#include?. Returns true if the collection\ndoes not include the object. …\n"],["execute","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-execute","(sql, name = nil, skip_logging = false)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-execute","(sql, name = nil)","<p>Executes an SQL statement, returning a PGresult object on success or\nraising a PGError exception otherwise. …\n"],["exempt_from_layout","ActionView::Template","classes/ActionView/Template.html#method-c-exempt_from_layout","(*extensions)","<p>Don&#39;t render layouts for templates with the given extensions.\n"],["exempt_from_layout?","ActionView::Template","classes/ActionView/Template.html#method-i-exempt_from_layout-3F","()",""],["exist","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-exist","(key, options = nil)",""],["exist?","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-exist-3F","(name, options = nil)",""],["exist?","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-exist-3F","(name, options = nil)",""],["exist?","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-exist-3F","(key, options = nil)",""],["exist?","ActiveSupport::Cache::SynchronizedMemoryStore","classes/ActiveSupport/Cache/SynchronizedMemoryStore.html#method-i-exist-3F","(name,options = nil)",""],["exist?","Repositories","classes/Repositories.html#method-i-exist-3F","(uri)",""],["existing_migrations","Rails::Generator::Commands::Base","classes/Rails/Generator/Commands/Base.html#method-i-existing_migrations","(file_name)",""],["exists?","ActionController::Session::AbstractStore::SessionHash","classes/ActionController/Session/AbstractStore/SessionHash.html#method-i-exists-3F","()",""],["exists?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-exists-3F","(id_or_conditions = {})","<p>Returns true if a record exists in the table that matches the\n<code>id</code> or conditions given, or false otherwise. …\n"],["exists?","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-exists-3F","()","<p>Evaluates to <code>true</code> if this resource is not <code>new?</code>\nand is found on the remote service.  Using this method, …\n"],["exists?","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-exists-3F","(id, options = {})","<p>Asserts the existence of a resource, returning <code>true</code> if the\nresource is found.\n<p>Examples\n\n<pre>Note.create(:title ...</pre>\n"],["exit_handler","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-exit_handler","(signal)",""],["exit_now_handler","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-exit_now_handler","(signal)",""],["expand_cache_key","ActiveSupport::Cache","classes/ActiveSupport/Cache.html#method-c-expand_cache_key","(key, namespace = nil)",""],["expand_hash_conditions_for_aggregates","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-expand_hash_conditions_for_aggregates","(attrs)","<p>Accepts a hash of SQL conditions and replaces those attributes that\ncorrespond to a <code>composed_of</code> relationship …\n"],["expand_keys","I18n::Backend::ActiveRecord::Implementation","classes/I18n/Backend/ActiveRecord/Implementation.html#method-i-expand_keys","(key)","<p>For a key :&#39;foo.bar.baz&#39; return [&#39;foo&#39;, &#39;foo.bar&#39;,\n&#39;foo.bar.baz&#39;]\n"],["expected_response","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-expected_response","(http_method, uri, credentials, password, password_is_ha1=true)","<p>Returns the expected response for a request of <code>http_method</code> to\n<code>uri</code> with the decoded <code>credentials</code> and the …\n"],["expire_action","ActionController::Caching::Actions","classes/ActionController/Caching/Actions.html#method-i-expire_action","(options = {})",""],["expire_fragment","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-expire_fragment","(key, options = nil)","<p>Removes fragments from the cache.\n<p><code>key</code> can take one of three forms:\n<p>String - This would normally take the …\n"],["expire_page","ActionController::Caching::Pages","classes/ActionController/Caching/Pages.html#method-i-expire_page","(options = {})","<p>Expires the page that was cached with the <code>options</code> as a key.\nExample:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expire_page</span> :<span class=\"ruby-identifier\">controller</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;lists&quot;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["expire_page","ActionController::Caching::Pages::ClassMethods","classes/ActionController/Caching/Pages/ClassMethods.html#method-i-expire_page","(path)","<p>Expires the page that was cached with the <code>path</code> as a key.\nExample:\n\n<pre>expire_page &quot;/lists/show&quot;</pre>\n"],["expires_in","ActionController::Base","classes/ActionController/Base.html#method-i-expires_in","(seconds, options = {})","<p>Sets a HTTP 1.1 Cache-Control header. Defaults to issuing a “private”\ninstruction, so that …\n"],["expires_now","ActionController::Base","classes/ActionController/Base.html#method-i-expires_now","()","<p>Sets a HTTP 1.1 Cache-Control header of “no-cache” so no caching should\noccur by the browser …\n"],["extended","ActionController::UploadedFile","classes/ActionController/UploadedFile.html#method-c-extended","(object)",""],["extended","ActiveRecord::Dirty::ClassMethods","classes/ActiveRecord/Dirty/ClassMethods.html#method-c-extended","(base)",""],["extended","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-c-extended","(base)",""],["extension","ActiveResource::Formats::JsonFormat","classes/ActiveResource/Formats/JsonFormat.html#method-i-extension","()",""],["extension","ActiveResource::Formats::XmlFormat","classes/ActiveResource/Formats/XmlFormat.html#method-i-extension","()",""],["externals","RailsEnvironment","classes/RailsEnvironment.html#method-i-externals","()",""],["externals=","RailsEnvironment","classes/RailsEnvironment.html#method-i-externals-3D","(items)",""],["extract_annotations_from","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-extract_annotations_from","(file, pattern)","<p>If <code>file</code> is the filename of a file that contains annotations\nthis method returns a hash with a single …\n"],["extract_default","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-extract_default","(default)",""],["extract_options!","ActiveSupport::CoreExtensions::Array::ExtractOptions","classes/ActiveSupport/CoreExtensions/Array/ExtractOptions.html#method-i-extract_options-21","()","<p>Extracts options from a set of arguments. Removes and returns the last\nelement in the array if it&#39;s …\n"],["extract_repository_uri","Commands::Discover","classes/Commands/Discover.html#method-i-extract_repository_uri","(uri)",""],["extract_scope","I18n::Gettext","classes/I18n/Gettext.html#method-c-extract_scope","(msgid, separator)",""],["extract_string_default!","I18n::Backend::Fallbacks","classes/I18n/Backend/Fallbacks.html#method-i-extract_string_default-21","(options)",""],["extract_value","ActionController::Routing::OptionalFormatSegment","classes/ActionController/Routing/OptionalFormatSegment.html#method-i-extract_value","()",""],["fallback_string_to_date","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-fallback_string_to_date","(string)",""],["fallback_string_to_time","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-fallback_string_to_time","(string)",""],["fallbacks","I18n","classes/I18n.html#method-c-fallbacks","()","<p>Returns the current fallbacks implementation. Defaults to\n+I18n::Locale::Fallbacks+.\n"],["fallbacks=","I18n","classes/I18n.html#method-c-fallbacks-3D","(fallbacks)","<p>Sets the current fallbacks implementation. Use this to set a different\nfallbacks implementation.\n"],["falsetok","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-falsetok","(s)",""],["fast_string_to_date","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-fast_string_to_date","(string)",""],["fast_string_to_time","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-fast_string_to_time","(string)","<p>Doesn&#39;t handle time zones.\n"],["fetch","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-fetch","(key, options = {})","<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],["fetch","ActiveSupport::Cache::SynchronizedMemoryStore","classes/ActiveSupport/Cache/SynchronizedMemoryStore.html#method-i-fetch","(key, options = {})",""],["fetch","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Fetches the value for the specified key, same as doing hash\n"],["fetch","I18n::Backend::Cache","classes/I18n/Backend/Cache.html#method-i-fetch","(*args, &block)",""],["fetch","MemCache","classes/MemCache.html#method-i-fetch","(key, expiry = 0, raw = false)","<p>Performs a <code>get</code> with the given <code>key</code>.  If  the value\ndoes not exist and a block was given, the block will …\n"],["fetch","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-fetch","(links = @urls_to_fetch)",""],["fetch_dir","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-fetch_dir","(url)",""],["field_set_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-field_set_tag","(legend = nil, options = nil, &block)","<p>Creates a field set for grouping HTML form elements.\n<p><code>legend</code> will become the fieldset&#39;s title (optional …\n"],["field_type","Rails::Generator::GeneratedAttribute","classes/Rails/Generator/GeneratedAttribute.html#method-i-field_type","()",""],["fields_for","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-fields_for","(record_or_name_or_array, *args, &block)","<p>Creates a scope around a specific model object like form_for, but\ndoesn&#39;t create the form tags themselves. …\n"],["fifth","ActiveSupport::CoreExtensions::Array::Access","classes/ActiveSupport/CoreExtensions/Array/Access.html#method-i-fifth","()","<p>Equal to <code>self[4]</code>.\n"],["file","Rails::Generator::Commands::Create","classes/Rails/Generator/Commands/Create.html#method-i-file","(relative_source, relative_destination, file_options = {}, &block)","<p>Copy a file from source to destination with collision checking.\n<p>The file_options hash accepts :chmod and …\n"],["file","Rails::Generator::Commands::Destroy","classes/Rails/Generator/Commands/Destroy.html#method-i-file","(relative_source, relative_destination, file_options = {})","<p>Remove a file if it exists and is a file.\n"],["file","Rails::Generator::Commands::List","classes/Rails/Generator/Commands/List.html#method-i-file","(relative_source, relative_destination, options = {})",""],["file","Rails::Generator::Commands::Update","classes/Rails/Generator/Commands/Update.html#method-i-file","(relative_source, relative_destination, options = {})",""],["file_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-file_field","(object_name, method, options = {})","<p>Returns an file upload input tag tailored for accessing a specified\nattribute (identified by <code>method</code>) …\n"],["file_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-file_field_tag","(name, options = {})","<p>Creates a file upload field.  If you are using file uploads then you will\nalso need to set the multipart …\n"],["filename","ActionView::Template","classes/ActionView/Template.html#method-i-filename","()",""],["filename","ActiveSupport::Multibyte::UnicodeDatabase","classes/ActiveSupport/Multibyte/UnicodeDatabase.html#method-c-filename","()","<p>Returns the filename for the data file for this version\n"],["filter_chain","ActionController::Filters::ClassMethods","classes/ActionController/Filters/ClassMethods.html#method-i-filter_chain","()","<p>Returns an array of Filter objects for this controller.\n"],["filter_parameter_logging","ActionController::Base","classes/ActionController/Base.html#method-c-filter_parameter_logging","(*filter_words, &block)","<p>Replace sensitive parameter data from the request log. Filters parameters\nthat have any of the arguments …\n"],["find","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-find","(*args)","<p>Find operates with four different retrieval approaches:\n<p>Find by id - This can either be a specific id …\n"],["find","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-find","(*arguments)","<p>Core method for finding resources.  Used similarly to Active Record&#39;s\n<code>find</code> method.\n<p>Arguments\n<p>The first …\n"],["find","ActiveSupport::Callbacks::CallbackChain","classes/ActiveSupport/Callbacks/CallbackChain.html#method-i-find","(callback, &block)",""],["find","Plugin","classes/Plugin.html#method-c-find","(name)",""],["find","RailsEnvironment","classes/RailsEnvironment.html#method-c-find","(dir=nil)",""],["find","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-find","(dirs=%w(app lib test))","<p>Returns a hash that maps filenames under <code>dirs</code> (recursively) to\narrays with their annotations. Only files …\n"],["find_all_tag","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-find_all_tag","(conditions)",""],["find_by_session_id","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-c-find_by_session_id","(session_id)","<p>Hook to set up sessid compatibility.\n"],["find_by_session_id","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-find_by_session_id","(session_id)","<p>Look up a session by id and unmarshal its data if found.\n"],["find_by_sql","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-find_by_sql","(sql)","<p>Executes a custom SQL query against your database and returns all the\nresults.  The results will be returned …\n"],["find_cmd","Object","classes/Object.html#method-i-find_cmd","(*commands)",""],["find_each","ActiveRecord::Batches::ClassMethods","classes/ActiveRecord/Batches/ClassMethods.html#method-i-find_each","(options = {})","<p>Yields each record that was found by the find <code>options</code>. The\nfind is performed by find_in_batches with …\n"],["find_first_string_default","I18n::Backend::Fallbacks","classes/I18n/Backend/Fallbacks.html#method-i-find_first_string_default","(defaults)",""],["find_hidden_method","BlankSlate","classes/BlankSlate.html#method-c-find_hidden_method","(name)",""],["find_hidden_method","BlankSlate","classes/BlankSlate.html#method-c-find_hidden_method","(name)",""],["find_hidden_method","Object","classes/Object.html#method-c-find_hidden_method","(name)",""],["find_home","Repositories","classes/Repositories.html#method-i-find_home","()",""],["find_in","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-find_in","(dir)","<p>Returns a hash that maps filenames under <code>dir</code> (recursively) to\narrays with their annotations. Only files …\n"],["find_in_batches","ActiveRecord::Batches::ClassMethods","classes/ActiveRecord/Batches/ClassMethods.html#method-i-find_in_batches","(options = {})","<p>Yields each batch of records that was found by the find\n<code>options</code> as an array. The size of each batch is …\n"],["find_name","Rails::VendorGemSourceIndex","classes/Rails/VendorGemSourceIndex.html#method-i-find_name","(*args)",""],["find_plugin","Repositories","classes/Repositories.html#method-i-find_plugin","(name)",""],["find_tag","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-find_tag","(conditions)",""],["find_tzinfo","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-find_tzinfo","(name)","<p>TODO: Preload instead of lazy load for thread safety\n"],["finder?","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-i-finder-3F","()",""],["first","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-first","(*args)","<p>A convenience wrapper for <code>find(:first, *args)</code>. You can pass in\nall the same arguments to this method …\n"],["first","ActiveRecord::NamedScope::Scope","classes/ActiveRecord/NamedScope/Scope.html#method-i-first","(*args)",""],["first","ActiveSupport::CoreExtensions::String::Access","classes/ActiveSupport/CoreExtensions/String/Access.html#method-i-first","(limit = 1)","<p>Returns the first character of the string or the first <code>limit</code>\ncharacters.\n<p>Examples:\n\n<pre>&quot;hello&quot;.first     # ...</pre>\n"],["fixture_file_upload","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-fixture_file_upload","(path, mime_type = nil, binary = false)","<p>Shortcut for\n<code>ActionController::TestUploadedFile.new(ActionController::TestCase.fixture_path\n+ path, type)</code> …\n"],["fixture_is_cached?","Fixtures","classes/Fixtures.html#method-c-fixture_is_cached-3F","(connection, table_name)",""],["fixtures","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-fixtures","(*table_names)",""],["flash","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-flash","()",""],["flatten_keys","I18n::Backend::Flatten","classes/I18n/Backend/Flatten.html#method-i-flatten_keys","(hash, escape, prev_key=nil, &block)","<p>Flatten keys for nested Hashes by chaining up keys:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> { <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> { <span class=\"ruby-string\">&quot;c&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;d&quot;</span>, <span class=\"ruby-string\">&quot;e&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;f&quot;</span> }, <span class=\"ruby-string\">&quot;g&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["flatten_translations","I18n::Backend::Flatten","classes/I18n/Backend/Flatten.html#method-i-flatten_translations","(locale, data, escape, subtree)","<p>Receives a hash of translations (where the key is a locale and the value is\nanother hash) and return …\n"],["flush","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-flush","()",""],["flush_all","MemCache","classes/MemCache.html#method-i-flush_all","(delay=0)","<p>Flush the cache from all memcache servers. A non-zero value for\n<code>delay</code> will ensure that the flush is propogated …\n"],["flush_cache","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-flush_cache","(*syms, &block)",""],["flush_logger","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-i-flush_logger","()",""],["follow_redirect!","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-follow_redirect-21","()","<p>Follow a single redirect response. If the last response was not a redirect,\nan exception will be raised. …\n"],["for_class","HTML::Selector","classes/HTML/Selector.html#method-c-for_class","(cls)","<p>Creates a new selector for the given class name.\n"],["for_id","HTML::Selector","classes/HTML/Selector.html#method-c-for_id","(id)","<p>Creates a new selector for the given id.\n"],["foreign_key","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-foreign_key","(separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["foreign_key","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-foreign_key","(class_name, separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["form","ActionView::Helpers::ActiveRecordHelper","classes/ActionView/Helpers/ActiveRecordHelper.html#method-i-form","(record_name, options = {})","<p>Returns an entire form with all needed input tags for a specified Active\nRecord object. For example, …\n"],["form_authenticity_param","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-form_authenticity_param","()",""],["form_authenticity_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-form_authenticity_token","()","<p>Sets the token value for the current session.  Pass a <code>:secret</code>\noption in <code>protect_from_forgery</code> to add a …\n"],["form_data?","ActionController::Request","classes/ActionController/Request.html#method-i-form_data-3F","()",""],["form_for","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-form_for","(record_or_name_or_array, *args, &proc)","<p>Creates a form and a scope around a specific model object that is used as a\nbase for questioning about …\n"],["form_remote_for","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-form_remote_for","(record_or_name_or_array, *args, &proc)",""],["form_remote_tag","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-form_remote_tag","(options = {}, &block)","<p>Returns a form tag that will submit using XMLHttpRequest in the background\ninstead of the regular reloading …\n"],["form_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag","(url_for_options = {}, options = {}, *parameters_for_url, &block)","<p>Starts a form tag that points the action to an url configured with\n<code>url_for_options</code> just like ActionController::Base#url_for …\n"],["format","ActionController::Request","classes/ActionController/Request.html#method-i-format","()","<p>Returns the Mime type for the format used in the request.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GET</span> <span class=\"ruby-regexp\">/posts/</span><span class=\"ruby-value\">5</span>.<span class=\"ruby-identifier\">xml</span>   <span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">format</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">Mime</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["format","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-format","()","<p>Returns the current format, default is ActiveResource::Formats::XmlFormat.\n"],["format","ActiveSupport::Testing::Performance::Metrics::GcRuns","classes/ActiveSupport/Testing/Performance/Metrics/GcRuns.html#method-i-format","(measurement)",""],["format","ActiveSupport::Testing::Performance::Metrics::GcTime","classes/ActiveSupport/Testing/Performance/Metrics/GcTime.html#method-i-format","(measurement)",""],["format","ActiveSupport::Testing::Performance::Metrics::Memory","classes/ActiveSupport/Testing/Performance/Metrics/Memory.html#method-i-format","(measurement)",""],["format","ActiveSupport::Testing::Performance::Metrics::Objects","classes/ActiveSupport/Testing/Performance/Metrics/Objects.html#method-i-format","(measurement)",""],["format","ActiveSupport::Testing::Performance::Metrics::Time","classes/ActiveSupport/Testing/Performance/Metrics/Time.html#method-i-format","(measurement)",""],["format=","ActionController::Request","classes/ActionController/Request.html#method-i-format-3D","(extension)","<p>Sets the format by string extension, which can be used to force custom\nformats that are not controlled …\n"],["format=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-format-3D","(mime_type_reference_or_format)","<p>Sets the format that attributes are sent and received in from a mime type\nreference:\n\n<pre>Person.format = :json ...</pre>\n"],["format_and_extension","ActionView::Template","classes/ActionView/Template.html#method-i-format_and_extension","()",""],["format_currency","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-format_currency","(locale, object, format = :default, options = {})",""],["format_date","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-format_date","(locale, object, format = :default, options = {})",""],["format_datetime","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-format_datetime","(locale, object, format = :default, options = {})",""],["format_decimal","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-format_decimal","(locale, object, format = :default, options = {})",""],["format_integer","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-format_integer","(locale, object, format = :default, options = {})",""],["format_log_entry","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-format_log_entry","(message, dump = nil)",""],["format_percent","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-format_percent","(locale, object, format = :default, options = {})",""],["format_time","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-format_time","(locale, object, format = :default, options = {})",""],["formatted_offset","ActiveSupport::CoreExtensions::DateTime::Conversions","classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns the <code>utc_offset</code> as an +HH:MM formatted string.\nExamples:\n\n<pre>datetime = DateTime.civil(2000, 1, 1, ...</pre>\n"],["formatted_offset","ActiveSupport::CoreExtensions::Time::Conversions","classes/ActiveSupport/CoreExtensions/Time/Conversions.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns the UTC offset as an +HH:MM formatted string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">formatted_offset</span>         <span class=\"ruby-comment\"># =&gt; &quot;-06:00&quot; ...</span>\n</pre>\n"],["formatted_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)",""],["formatted_offset","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-formatted_offset","(colon=true, alternate_utc_string = nil)","<p>Returns the offset of this time zone as a formatted string, of the format\n“+HH:MM”.\n"],["formatted_polymorphic_path","ActionController::PolymorphicRoutes","classes/ActionController/PolymorphicRoutes.html#method-i-formatted_polymorphic_path","(record_or_hash, options = {})",""],["formatted_polymorphic_url","ActionController::PolymorphicRoutes","classes/ActionController/PolymorphicRoutes.html#method-i-formatted_polymorphic_url","(record_or_hash, options = {})",""],["formatter","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-formatter","(locale, type, format)",""],["formatter","Logger","classes/Logger.html#method-i-formatter","()","<p>Get the current formatter. The default formatter is a SimpleFormatter which\nonly displays the log message …\n"],["fortnight","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-fortnight","()",""],["fortnights","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-fortnights","()",""],["forty_two","ActiveSupport::CoreExtensions::Array::Access","classes/ActiveSupport/CoreExtensions/Array/Access.html#method-i-forty_two","()","<p>Equal to <code>self[41]</code>. Also known as accessing “the reddit”.\n"],["fourth","ActiveSupport::CoreExtensions::Array::Access","classes/ActiveSupport/CoreExtensions/Array/Access.html#method-i-fourth","()","<p>Equal to <code>self[3]</code>.\n"],["fragment_cache_key","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-fragment_cache_key","(key)","<p>Given a key (as described in <code>expire_fragment</code>), returns a key\nsuitable for use in reading, writing, or …\n"],["fragment_exist?","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-fragment_exist-3F","(key, options = nil)","<p>Check if a cached fragment from the location signified by <code>key</code>\nexists (see <code>expire_fragment</code> for acceptable …\n"],["framework_gem?","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-framework_gem-3F","()",""],["framework_paths","Rails::Configuration","classes/Rails/Configuration.html#method-i-framework_paths","()",""],["freeze","ActionView::ReloadableTemplate::Unfreezable","classes/ActionView/ReloadableTemplate/Unfreezable.html#method-i-freeze","()",""],["freeze","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-freeze","()","<p>Freeze the attributes hash such that associations are still accessible,\neven on destroyed records.\n"],["freeze","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-freeze","()",""],["freeze_with_memoizable","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-freeze_with_memoizable","()",""],["fresh?","ActionController::Request","classes/ActionController/Request.html#method-i-fresh-3F","(response)","<p>Check response freshness (Last-Modified and ETag) against request\nIf-Modified-Since and If-None-Match …\n"],["fresh_when","ActionController::Base","classes/ActionController/Base.html#method-i-fresh_when","(options)","<p>Sets the etag, last_modified, or both on the response and renders a “304\nNot Modified” response …\n"],["friendly_identifier","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-friendly_identifier","(skip_first_part = false)","<p>Returns a friendlier version of the identifier. Set skip_first_part to \nomit the first part of the identifier …\n"],["from","ActiveSupport::CoreExtensions::Array::Access","classes/ActiveSupport/CoreExtensions/Array/Access.html#method-i-from","(position)","<p>Returns the tail of the array from <code>position</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">from</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; %w( a b c d )</span>\n<span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">from</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["from","ActiveSupport::CoreExtensions::String::Access","classes/ActiveSupport/CoreExtensions/String/Access.html#method-i-from","(position)","<p>Returns the remaining of the string from the <code>position</code> treating\nthe string as an array (where 0 is the …\n"],["from_array","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-from_array","(messages)","<p>Grabs errors from an array of messages (like ActiveRecord::Validations)\n"],["from_directory_name","Rails::GemDependency","classes/Rails/GemDependency.html#method-c-from_directory_name","(directory_name, load_spec=true)",""],["from_json","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-from_json","(json)",""],["from_json","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-from_json","(json)","<p>Grabs errors from the json response.\n"],["from_now","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-from_now","(time = ::Time.now)","<p>Reads best without arguments:  10.minutes.from_now\n"],["from_now","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-from_now","(time = ::Time.current)",""],["from_trusted_xml","ActiveSupport::CoreExtensions::Hash::Conversions::ClassMethods","classes/ActiveSupport/CoreExtensions/Hash/Conversions/ClassMethods.html#method-i-from_trusted_xml","(xml)",""],["from_xml","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-from_xml","(xml)",""],["from_xml","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-from_xml","(xml)","<p>Grabs errors from the XML response.\n"],["from_xml","ActiveSupport::CoreExtensions::Hash::Conversions::ClassMethods","classes/ActiveSupport/CoreExtensions/Hash/Conversions/ClassMethods.html#method-i-from_xml","(xml, disallowed_types = nil)",""],["frozen?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-frozen-3F","()","<p>Returns <code>true</code> if the attributes hash has been frozen.\n"],["frozen?","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-frozen-3F","()",""],["full_message","ActiveRecord::Error","classes/ActiveRecord/Error.html#method-i-full_message","()",""],["full_messages","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-full_messages","(options = {})","<p>Returns all the full error messages in an array.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Company</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">validates_presence_of</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["full_messages","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-full_messages","()","<p>Returns all the full error messages in an array.\n<p>Examples\n\n<pre>my_person = Person.new(params[:person])\n\nmy_person.errors.add(&#39;login&#39;, ...</pre>\n"],["full_options","Rails::Generator::Options","classes/Rails/Generator/Options.html#method-i-full_options","(runtime_options = {})","<p>Merge together our instance options.  In increasing precedence:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">default_options</span>   (<span class=\"ruby-keyword\">class</span> <span class=\"ruby-identifier\">default</span> <span class=\"ruby-identifier\">options</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["full_options","Rails::Generator::Options::ClassMethods","classes/Rails/Generator/Options/ClassMethods.html#method-i-full_options","(runtime_options = {})","<p>Merge together our class options.  In increasing precedence:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">default_options</span>   (<span class=\"ruby-keyword\">class</span> <span class=\"ruby-identifier\">default</span> <span class=\"ruby-identifier\">options</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["full_test_name","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-full_test_name","()",""],["future?","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-future-3F","()","<p>Tells whether the Date object&#39;s date lies in the future\n"],["future?","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-future-3F","()","<p>Tells whether the DateTime object&#39;s datetime lies in the future\n"],["future?","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-future-3F","()","<p>Tells whether the Time object&#39;s time lies in the future\n"],["future?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-future-3F","()",""],["g_length","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-g_length","()","<p>Returns the number of grapheme clusters in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;क्षि&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-comment\">#=&gt; 4</span>\n<span class=\"ruby-string\">&#39;क्षि&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">g_length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["g_pack","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-g_pack","(unpacked)","<p>Reverse operation of g_unpack.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Chars</span>.<span class=\"ruby-identifier\">g_pack</span>(<span class=\"ruby-constant\">Chars</span>.<span class=\"ruby-identifier\">g_unpack</span>(<span class=\"ruby-string\">&#39;क्षि&#39;</span>)) <span class=\"ruby-comment\">#=&gt; &#39;क्षि&#39;</span>\n</pre>\n"],["g_unpack","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-g_unpack","(string)","<p>Unpack the string at grapheme boundaries. Returns a list of character\nlists.\n<p>Example:\n\n<pre>Chars.g_unpack(&#39;क्षि&#39;) ...</pre>\n"],["gc_countdown","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-gc_countdown","()",""],["gem","Rails::Configuration","classes/Rails/Configuration.html#method-i-gem","(name, options = {})","<p>Adds a single Gem dependency to the rails application. By default, it will\nrequire the library with the …\n"],["generate","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-i-generate","(value)",""],["generate_code","ActionController::Routing::RouteSet","classes/ActionController/Routing/RouteSet.html#method-i-generate_code","(list, padding=' ', level = 0)",""],["generate_full_message","ActiveRecord::Error","classes/ActiveRecord/Error.html#method-i-generate_full_message","(options = {})","<p>Wraps an error message into a full_message format.\n<p>The default full_message format for any locale is  …\n"],["generate_message","ActiveRecord::Error","classes/ActiveRecord/Error.html#method-i-generate_message","(options = {})","<p>Translates an error message in it&#39;s default scope\n(<code>activerecord.errrors.messages</code>). Error messages …\n"],["generate_message","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-generate_message","(attribute, message = :invalid, options = {})",""],["generate_optimisation_block","ActionController::Routing::Optimisation","classes/ActionController/Routing/Optimisation.html#method-i-generate_optimisation_block","(route, kind)",""],["generate_secret","Rails::SecretKeyGenerator","classes/Rails/SecretKeyGenerator.html#method-i-generate_secret","()","<p>Generate a random secret key with the best possible method available on the\ncurrent platform.\n"],["generated_methods?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-generated_methods-3F","()",""],["generation_code","ActionController::Routing::Optimisation::Optimiser","classes/ActionController/Routing/Optimisation/Optimiser.html#method-i-generation_code","()",""],["generation_code","ActionController::Routing::Optimisation::PositionalArguments","classes/ActionController/Routing/Optimisation/PositionalArguments.html#method-i-generation_code","()",""],["generation_code","ActionController::Routing::Optimisation::PositionalArgumentsWithAdditionalParams","classes/ActionController/Routing/Optimisation/PositionalArgumentsWithAdditionalParams.html#method-i-generation_code","()","<p>This case uses almost the same code as positional arguments, but add a\nquestion mark and args.last.to_query …\n"],["get","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-get","(path, parameters = nil, headers = nil)","<p>Performs a GET request with the given parameters.\n<p><code>path</code>: The URI (as a String) on which you want to perform …\n"],["get","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-get","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating GET HTTP method and set/volley the response\n"],["get","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-get","(path, headers = {})","<p>Execute a GET request. Used to get (find) resources.\n"],["get","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-c-get","(custom_method_name, options = {})","<p>Invokes a GET to a given custom REST method. For example:\n\n<pre>Person.get(:active)  # GET /people/active.xml ...</pre>\n"],["get","ActiveResource::CustomMethods::InstanceMethods","classes/ActiveResource/CustomMethods/InstanceMethods.html#method-i-get","(method_name, options = {})",""],["get","I18n::Backend::Transliterator","classes/I18n/Backend/Transliterator.html#method-c-get","(rule = nil)","<p>Get a transliterator instance.\n"],["get","MemCache","classes/MemCache.html#method-i-get","(key, raw = false)","<p>Retrieves <code>key</code> from memcache.  If <code>raw</code> is false,\nthe value will be unmarshalled.\n"],["get","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-c-get","(identifier)","<p>Returns a timezone by its identifier (e.g. “Europe/London”, \n“America/Chicago” or …\n"],["get?","ActionController::Request","classes/ActionController/Request.html#method-i-get-3F","()","<p>Is this a GET (or HEAD) request?  Equivalent to <code>request.method ==\n:get</code>.\n"],["get_multi","MemCache","classes/MemCache.html#method-i-get_multi","(*keys)","<p>Retrieves multiple values from memcached in parallel, if possible.\n<p>The memcached protocol supports the …\n"],["get_proxy","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-c-get_proxy","(identifier)","<p>Returns a proxy for the Timezone with the given identifier. The proxy will\ncause the real timezone to …\n"],["get_server_for_key","MemCache","classes/MemCache.html#method-i-get_server_for_key","(key, options = {})","<p>Pick a server to handle the request based on a hash of the key.\n"],["get_via_redirect","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-get_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a GET request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["getgm","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getgm","()",""],["getlocal","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getlocal","()",""],["gets","MemCache","classes/MemCache.html#method-i-gets","(key, raw = false)",""],["gettext","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#method-i-gettext","(msgid, options = {})",""],["getutc","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-getutc","()",""],["getutc","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getutc","()",""],["gigabyte","ActiveSupport::CoreExtensions::Numeric::Bytes","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#method-i-gigabyte","()",""],["gigabytes","ActiveSupport::CoreExtensions::Numeric::Bytes","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#method-i-gigabytes","()",""],["git_url?","Plugin","classes/Plugin.html#method-i-git_url-3F","()",""],["gmt?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmt-3F","()",""],["gmt_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmt_offset","()",""],["gmtime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmtime","()",""],["gmtoff","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmtoff","()",""],["group!","Builder::CSS","classes/Builder/CSS.html#method-i-group-21","(*args, &block)",""],["group_by","Enumerable","classes/Enumerable.html#method-i-group_by","()","<p>Collect an enumerable into sets, grouped by the result of a block. Useful,\nfor example, for grouping …\n"],["grouped_collection_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-grouped_collection_select","(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})",""],["grouped_collection_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_collection_select","(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code>, <code>&lt;optgroup&gt;</code> and\n<code>&lt;option&gt;</code> tags for the collection of existing return …\n"],["grouped_options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_options_for_select","(grouped_options, selected_key = nil, prompt = nil)","<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_for_select</code>, but wraps them with\n<code>&lt;optgroup&gt;</code> …\n"],["gsub_file","Rails::Generator::Commands::Base","classes/Rails/Generator/Commands/Base.html#method-i-gsub_file","(relative_destination, regexp, *args, &block)",""],["guard_conditions","ActionController::Routing::Optimisation::Optimiser","classes/ActionController/Routing/Optimisation/Optimiser.html#method-i-guard_conditions","()",""],["guard_conditions","ActionController::Routing::Optimisation::PositionalArguments","classes/ActionController/Routing/Optimisation/PositionalArguments.html#method-i-guard_conditions","()",""],["guard_conditions","ActionController::Routing::Optimisation::PositionalArgumentsWithAdditionalParams","classes/ActionController/Routing/Optimisation/PositionalArgumentsWithAdditionalParams.html#method-i-guard_conditions","()",""],["h","ERB::Util","classes/ERB/Util.html#method-c-h","(s)",""],["ha1","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-ha1","(credentials, password)",""],["handle_error","MemCache","classes/MemCache.html#method-i-handle_error","(server, error)","<p>Handles <code>error</code> from <code>server</code>.\n"],["handle_interpolation_token","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#method-i-handle_interpolation_token","(interpolation, matchdata)",""],["handle_unverified_request","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-handle_unverified_request","()",""],["handler_for_rescue","ActiveSupport::Rescuable","classes/ActiveSupport/Rescuable.html#method-i-handler_for_rescue","(exception)",""],["has_and_belongs_to_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_and_belongs_to_many","(association_id, options = {}, &extension)","<p>Specifies a many-to-many relationship with another class. This associates\ntwo classes via an intermediate …\n"],["has_attribute?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-has_attribute-3F","(attr_name)","<p>Returns true if the given attribute is in the attributes hash\n"],["has_default?","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-has_default-3F","()",""],["has_key?","ActionController::Session::AbstractStore::SessionHash","classes/ActionController/Session/AbstractStore/SessionHash.html#method-i-has_key-3F","(key)",""],["has_key?","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["has_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many","(association_id, options = {}, &extension)","<p>Specifies a one-to-many association. The following methods for retrieval\nand query of collections of …\n"],["has_one","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_one","(association_id, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if the other class …\n"],["hash","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-hash","()","<p>Delegates to id in order to allow two records of the same type and id to\nwork with something like:\n\n<pre>[ Person.find(1), ...</pre>\n"],["hash","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-hash","()","<p>Delegates to id in order to allow two resources of the same type and id to\nwork with something like: …\n"],["hash","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-i-hash","()",""],["hash","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-hash","()",""],["hash","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-hash","()","<p>Returns a hash of this Timezone.\n"],["hash","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-hash","()","<p>Returns a hash of this TimezonePeriod.\n"],["hash_for","MemCache","classes/MemCache.html#method-i-hash_for","(key)","<p>Returns an interoperable hash value for <code>key</code>.  (I think, docs\nare sketchy for down servers).\n"],["head","ActionController::Base","classes/ActionController/Base.html#method-i-head","(*args)","<p>Return a response that has no content (merely headers). The options\nargument is interpreted to be a hash …\n"],["head","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-head","(path, parameters = nil, headers = nil)","<p>Performs a HEAD request with the given parameters. See get() for more\ndetails.\n"],["head","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-head","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating HEAD HTTP method and set/volley the response\n"],["head","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-head","(path, headers = {})","<p>Execute a HEAD request. Used to obtain meta-information about resources,\nsuch as whether they exist and …\n"],["head?","ActionController::Request","classes/ActionController/Request.html#method-i-head-3F","()","<p>Is this a HEAD request? Since <code>request.method</code> sees HEAD as\n<code>:get</code>, this method checks the actual HTTP m …\n"],["headers","ActionController::Request","classes/ActionController/Request.html#method-i-headers","()","<p>Provides access to the request&#39;s HTTP headers, for example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">headers</span>[<span class=\"ruby-string\">&quot;Content-Type&quot;</span>] <span class=\"ruby-comment\"># =&gt; &quot;text/plain&quot;</span>\n</pre>\n"],["headers","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-headers","()",""],["helper","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-helper","(*args, &block)","<p>The <code>helper</code> class method can take a series of helper module\nnames, a block, or both.\n<p><code>*args</code>: One or more …\n"],["helper","Object","classes/Object.html#method-i-helper","()",""],["helper_attr","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-helper_attr","(*attrs)","<p>Declares helper accessors for controller attributes. For example, the\nfollowing adds new <code>name</code> and <code>name=</code> …\n"],["helper_class","ActionView::TestCase","classes/ActionView/TestCase.html#method-c-helper_class","()",""],["helper_method","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-helper_method","(*methods)","<p>Declare a controller method as a helper. For example, the following makes\nthe <code>current_user</code> controller …\n"],["helper_method","ActionView::TestCase","classes/ActionView/TestCase.html#method-c-helper_method","(*methods)",""],["helpers","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-helpers","()","<p>Provides a proxy to access helpers methods from outside the view.\n"],["hex","ActiveSupport::SecureRandom","classes/ActiveSupport/SecureRandom.html#method-c-hex","(n=nil)","<p>SecureRandom.hex generates a random hex string.\n<p>The argument n specifies the length of the random length. …\n"],["hexdec4","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-hexdec4","(s)",""],["hidden_actions","ActionController::Base","classes/ActionController/Base.html#method-c-hidden_actions","()","<p>Return an array containing the names of public methods that have been\nmarked hidden from the action processor. …\n"],["hidden_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-hidden_field","(object_name, method, options = {})","<p>Returns a hidden input tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an …\n"],["hidden_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-hidden_field_tag","(name, value = nil, options = {})","<p>Creates a hidden form input field used to transmit data that would be lost\ndue to HTTP&#39;s statelessness …\n"],["hide","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-hide","(*ids)","<p>Hides the visible DOM elements with the given <code>ids</code>.\n<p>Example:\n\n<pre># Hide a few people\n# Generates: [&quot;person_29&quot;, ...</pre>\n"],["hide","BlankSlate","classes/BlankSlate.html#method-c-hide","(name)","<p>Hide the method named <code>name</code> in the BlankSlate class.  Don&#39;t\nhide <code>instance_eval</code> or any method beginning …\n"],["hide","BlankSlate","classes/BlankSlate.html#method-c-hide","(name)","<p>Hide the method named <code>name</code> in the BlankSlate class.  Don&#39;t\nhide <code>instance_eval</code> or any method beginning …\n"],["hide_action","ActionController::Base","classes/ActionController/Base.html#method-c-hide_action","(*names)","<p>Hide each of the given methods from being callable as actions.\n"],["highlight","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-highlight","(text, phrases, *args)","<p>Highlights one or more <code>phrases</code> everywhere in <code>text</code>\nby inserting it into a <code>:highlighter</code> string. The highlighter …\n"],["host","ActionController::Request","classes/ActionController/Request.html#method-i-host","()","<p>Returns the host for this request, such as example.com.\n"],["host!","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-host-21","(name)","<p>Set the host name to use in the next request.\n\n<pre>session.host! &quot;www.example.com&quot;</pre>\n"],["host_with_port","ActionController::Request","classes/ActionController/Request.html#method-i-host_with_port","()","<p>Returns a host:port string for this request, such as “example.com” or\n“example.com:8080”. …\n"],["hour","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-hour","()",""],["hours","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-hours","()",""],["html?","Mime::Type","classes/Mime/Type.html#method-i-html-3F","()",""],["html_document","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-html_document","()",""],["html_escape","ERB::Util","classes/ERB/Util.html#method-c-html_escape","(s)","<p>A utility method for escaping HTML tag characters. This method is also\naliased as <code>h</code>.\n<p>In your ERB templates, …\n"],["html_safe","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-html_safe","()",""],["html_safe","String","classes/String.html#method-i-html_safe","()",""],["html_safe?","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-html_safe-3F","()",""],["html_safe?","Fixnum","classes/Fixnum.html#method-i-html_safe-3F","()",""],["html_safe?","Object","classes/Object.html#method-i-html_safe-3F","()",""],["html_safe?","String","classes/String.html#method-i-html_safe-3F","()",""],["http_only=","CGI::Cookie","classes/CGI/Cookie.html#method-i-http_only-3D","(val)","<p>Sets whether the Cookie is an HTTP only cookie or not.\n"],["httpdate","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-httpdate","()",""],["https!","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-https-21","(flag = true)","<p>Specify whether or not the session should mimic a secure HTTPS request.\n\n<pre>session.https!\nsession.https!(false)</pre>\n"],["https?","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-https-3F","()","<p>Return <code>true</code> if the session is mimicking a secure HTTPS\nrequest.\n\n<pre>if session.https?\n  ...\nend</pre>\n"],["human","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-human","(rule, replacement)","<p>Specifies a humanized form of a string by a regular expression rule or by a\nstring mapping. When using …\n"],["human_attribute_name","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-human_attribute_name","(attribute_key_name, options = {})","<p>Transforms attribute key names into a more humane format, such as “First\nname” instead of “ …\n"],["human_name","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-human_name","(options = {})","<p>Transform the modelname into a more humane format, using I18n. Defaults to\nthe basic humanize method. …\n"],["human_name","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-human_name","()","<p>Returns the human name of the column name.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Column</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;sales_stage&#39;</span>, <span class=\"ruby-operator\">...</span>).<span class=\"ruby-identifier\">human_name</span> <span class=\"ruby-comment\"># =&gt; &#39;Sales ...</span>\n</pre>\n"],["humanize","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-humanize","()","<p>Capitalizes the first word, turns underscores into spaces, and strips\n&#39;_id&#39;. Like <code>titleize</code>, this …\n"],["humanize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-humanize","(lower_case_and_underscored_word)","<p>Capitalizes the first word and turns underscores into spaces and strips a\ntrailing “_id”, if …\n"],["id","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-id","()","<p>A model instance&#39;s primary key is always available as model.id whether\nyou name it the default &#39;id&#39; …\n"],["id","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-id","()","<p>Gets the <code>\\id</code> attribute of the resource.\n"],["id","NilClass","classes/NilClass.html#method-i-id","()","<p>Raises a RuntimeError when you attempt to call <code>id</code> on\n<code>nil</code>.\n"],["id!","Builder::CSS","classes/Builder/CSS.html#method-i-id-21","(arg, &block)",""],["id=","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-id-3D","(value)","<p>Sets the primary ID.\n"],["id=","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-id-3D","(id)","<p>Sets the <code>\\id</code> attribute of the resource.\n"],["id_from_response","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-id_from_response","(response)","<p>Takes a response from a typical create post and pulls the ID out\n"],["identical?","Rails::Generator::Commands::Create","classes/Rails/Generator/Commands/Create.html#method-i-identical-3F","(source, destination, &block)","<p>Checks if the source and the destination file are identical. If passed a\nblock then the source file is …\n"],["identifier","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-identifier","()","<p>The identifier of the timezone, e.g. “Europe/Paris”.\n"],["identify","Fixtures","classes/Fixtures.html#method-c-identify","(label)","<p>Returns a consistent, platform-independent identifier for\n<code>label</code>. Identifiers are positive integers less …\n"],["if_modified_since","ActionController::Request","classes/ActionController/Request.html#method-i-if_modified_since","()",""],["if_none_match","ActionController::Request","classes/ActionController/Request.html#method-i-if_none_match","()",""],["image_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-image_path","(source)","<p>Computes the path to an image asset in the public images directory. Full\npaths from the document root …\n"],["image_submit_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-image_submit_tag","(source, options = {})","<p>Displays an image which when clicked will submit the form.\n<p><code>source</code> is passed to AssetTagHelper#image_path …\n"],["image_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-image_tag","(source, options = {})","<p>Returns an html image tag for the <code>source</code>. The\n<code>source</code> can be a full path or a file that exists in your …\n"],["implementation","I18n::Locale::Tag","classes/I18n/Locale/Tag.html#method-c-implementation","()","<p>Returns the current locale tag implementation. Defaults to\n+I18n::Locale::Tag::Simple+.\n"],["implementation=","I18n::Locale::Tag","classes/I18n/Locale/Tag.html#method-c-implementation-3D","(implementation)","<p>Sets the current locale tag implementation. Use this to set a different\nlocale tag implementation.\n"],["in","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-in","(seconds)",""],["in","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-in","(seconds)",""],["in","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-in","(seconds)",""],["in_char_class?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-in_char_class-3F","(codepoint, classes)","<p>Detect whether the codepoint is in a certain character class. Returns\n<code>true</code> when it&#39;s in the specified …\n"],["in_clause_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-in_clause_length","()","<p>the maximum number of elements in an IN (x,y,z) clause\n"],["in_groups","ActiveSupport::CoreExtensions::Array::Grouping","classes/ActiveSupport/CoreExtensions/Array/Grouping.html#method-i-in_groups","(number, fill_with = nil)","<p>Splits or iterates over the array in <code>number</code> of groups, padding\nany remaining slots with <code>fill_with</code> unless …\n"],["in_groups_of","ActiveSupport::CoreExtensions::Array::Grouping","classes/ActiveSupport/CoreExtensions/Array/Grouping.html#method-i-in_groups_of","(number, fill_with = nil)","<p>Splits or iterates over the array in groups of size <code>number</code>,\npadding any remaining slots with <code>fill_with</code> …\n"],["in_time_zone","ActiveSupport::CoreExtensions::Time::Zones","classes/ActiveSupport/CoreExtensions/Time/Zones.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span> = <span class=\"ruby-string\">&#39;Hawaii&#39;</span>         <span class=\"ruby-comment\"># =&gt; &#39;Hawaii&#39;</span>\n<span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">in_time_zone</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["in_time_zone","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-in_time_zone","(new_zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>, or the specified\nzone.\n"],["include","ActionView::Base::ProxyModule","classes/ActionView/Base/ProxyModule.html#method-i-include","(*args)",""],["include?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-include-3F","(other)","<p>Returns <code>true</code> if contained string contains <em>other</em>.\nReturns <code>false</code> otherwise.\n<p>Example:\n\n<pre>&#39;Café&#39;.mb_chars.include?(&#39;é&#39;) ...</pre>\n"],["include?","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["include_with_range?","ActiveSupport::CoreExtensions::Range::IncludeRange","classes/ActiveSupport/CoreExtensions/Range/IncludeRange.html#method-i-include_with_range-3F","(value)","<p>Extends the default Range#include? to support range comparisons.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>) <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["included","ActionController::CgiExt::Stdinput","classes/ActionController/CgiExt/Stdinput.html#method-c-included","(base)",""],["included","ActionController::Cookies","classes/ActionController/Cookies.html#method-c-included","(base)",""],["included","ActionController::Flash","classes/ActionController/Flash.html#method-c-included","(base)",""],["included","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-c-included","(base)",""],["included","ActionController::TestCase::RaiseActionExceptions","classes/ActionController/TestCase/RaiseActionExceptions.html#method-c-included","(base)",""],["included","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-c-included","(base)",""],["included","ActionController::UploadedFile","classes/ActionController/UploadedFile.html#method-c-included","(base)",""],["included","ActionView::TemplateHandlers::Compilable","classes/ActionView/TemplateHandlers/Compilable.html#method-c-included","(base)",""],["included","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-c-included","(base)",""],["included","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-included","(base)",""],["included","ActiveRecord::Dirty","classes/ActiveRecord/Dirty.html#method-c-included","(base)",""],["included","ActiveRecord::NamedScope","classes/ActiveRecord/NamedScope.html#method-c-included","(base)","<p>All subclasses of ActiveRecord::Base have one named scope:\n<p><code>scoped</code> - which allows for the creation of anonymous …\n\n"],["included","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-c-included","(base)",""],["included","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-c-included","(base)",""],["included","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-c-included","(base)",""],["included","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-c-included","(base)",""],["included","ActiveSupport::Callbacks","classes/ActiveSupport/Callbacks.html#method-c-included","(base)",""],["included","ActiveSupport::CoreExtensions::Hash::Conversions","classes/ActiveSupport/CoreExtensions/Hash/Conversions.html#method-c-included","(klass)",""],["included","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-c-included","(base)",""],["included","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-c-included","(base)",""],["included","ActiveSupport::Testing::SetupAndTeardown","classes/ActiveSupport/Testing/SetupAndTeardown.html#method-c-included","(base)",""],["included","I18n::Backend::Metadata","classes/I18n/Backend/Metadata.html#method-c-included","(base)",""],["included","RackLintPatch::AllowStringSubclass","classes/RackLintPatch/AllowStringSubclass.html#method-c-included","(base)",""],["included","Rails::Generator::Commands","classes/Rails/Generator/Commands.html#method-c-included","(base)","<p>Even more convenient access to commands.  Include Commands in the generator\nBase class to get a nice …\n"],["included","Rails::Generator::Lookup","classes/Rails/Generator/Lookup.html#method-c-included","(base)",""],["included","Rails::Generator::Options","classes/Rails/Generator/Options.html#method-c-included","(base)",""],["included_in_classes","Module","classes/Module.html#method-i-included_in_classes","()","<p>Returns the classes in the current ObjectSpace where this module has been\nmixed in according to Module#included_modules …\n"],["incr","MemCache","classes/MemCache.html#method-i-incr","(key, amount = 1)","<p>Increments the value for <code>key</code> by <code>amount</code> and\nreturns the new value. <code>key</code> must already exist.  If\n<code>key</code> is …\n"],["increment","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-increment","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and adds the\nvalue passed as <code>by</code> (default is 1). The increment is …\n"],["increment","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-increment","(key, amount = 1)",""],["increment","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-increment","(key, amount = 1)",""],["increment","ActiveSupport::Cache::SynchronizedMemoryStore","classes/ActiveSupport/Cache/SynchronizedMemoryStore.html#method-i-increment","(key, amount = 1)",""],["increment!","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-increment-21","(attribute, by = 1)","<p>Wrapper around <code>increment</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["increment_counter","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-increment_counter","(counter_name, id)","<p>Increment a number field by one, usually representing a count.\n<p>This is used for caching aggregate values, …\n"],["increment_open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-increment_open_transactions","()",""],["index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index","(column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols. See SchemaStatements#add_index …\n"],["index","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-index","(needle, offset=0)","<p>Returns the position <em>needle</em> in the string, counting in codepoints.\nReturns <code>nil</code> if <em>needle</em> isn&#39;t found. …\n"],["index_by","Enumerable","classes/Enumerable.html#method-i-index_by","()","<p>Convert an enumerable to a hash. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">people</span>.<span class=\"ruby-identifier\">index_by</span>(&amp;:<span class=\"ruby-identifier\">login</span>)\n  =<span class=\"ruby-operator\">&gt;</span> { <span class=\"ruby-string\">&quot;nextangle&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">&lt;</span><span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span><span class=\"ruby-operator\">&gt;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_exists-3F","(table_name, index_name, default)","<p>Verify the existence of an index.\n<p>The default argument is returned if the underlying implementation does …\n"],["index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-index_name_length","()","<p>the maximum length of an index name\n"],["index_name_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-index_name_length","()",""],["indexes","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-indexes","(table_name, name = nil)","<p>Returns the list of all indexes for a table.\n"],["indexes_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-indexes_per_table","()","<p>the maximum number of indexes per table\n"],["inflections","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-inflections","()","<p>Yields a singleton instance of Inflector::Inflections so you can specify\nadditional inflector rules. …\n"],["inflections_with_route_reloading","ActionController::Routing","classes/ActionController/Routing.html#method-i-inflections_with_route_reloading","(&block)","<p>Ensures that routes are reloaded when Rails inflections are updated.\n"],["info","Plugin","classes/Plugin.html#method-i-info","()",""],["inheritance_column","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-inheritance_column","()","<p>Defines the column name for use with single table inheritance – can be set\nin subclasses like so: self.inheritance_column …\n"],["inheritance_column=","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-inheritance_column-3D","(value = nil, &block)",""],["inherited","ActiveRecord::Observing::ClassMethods","classes/ActiveRecord/Observing/ClassMethods.html#method-i-inherited","(subclass)","<p>Notify observers when the observed class is subclassed.\n"],["inherited_with_options","Rails::Generator::Options::ClassMethods","classes/Rails/Generator/Options/ClassMethods.html#method-i-inherited_with_options","(sub)",""],["init_path","Rails::GemPlugin","classes/Rails/GemPlugin.html#method-i-init_path","()",""],["init_translations","I18n::Backend::Simple::Implementation","classes/I18n/Backend/Simple/Implementation.html#method-i-init_translations","()",""],["initialize_cache","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_cache","()",""],["initialize_database","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_database","()","<p>This initialization routine does nothing unless <code>:active_record</code>\nis one of the frameworks to load (Configuration#frameworks …\n"],["initialize_database_middleware","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_database_middleware","()",""],["initialize_dependency_mechanism","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_dependency_mechanism","()","<p>Sets the dependency loading mechanism based on the value of\nConfiguration#cache_classes.\n"],["initialize_encoding","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_encoding","()","<p>For Ruby 1.8, this initialization sets $KCODE to &#39;u&#39; to enable the\nmultibyte safe operations. …\n"],["initialize_framework_caches","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_framework_caches","()",""],["initialize_framework_logging","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_framework_logging","()","<p>Sets the logger for Active Record, Action Controller, and Action Mailer\n(but only for those frameworks …\n"],["initialize_framework_settings","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_framework_settings","()","<p>Initializes framework-specific settings for each of the loaded frameworks\n(Configuration#frameworks). …\n"],["initialize_framework_views","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_framework_views","()","<p>Sets +ActionController::Base#view_paths+ and\n+ActionMailer::Base#template_root+ (but only for those frameworks …\n"],["initialize_i18n","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_i18n","()","<p>Set the i18n configuration from config.i18n but special-case for the\nload_path which should be appended …\n"],["initialize_logger","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_logger","()","<p>If the RAILS_DEFAULT_LOGGER constant is already set, this initialization\nroutine does nothing. If the …\n"],["initialize_metal","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_metal","()",""],["initialize_query","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-initialize_query","()","<p>Neuter CGI parameter parsing.\n"],["initialize_routing","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_routing","()","<p>If Action Controller is not one of the loaded frameworks\n(Configuration#frameworks) this does nothing. …\n"],["initialize_schema_migrations_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-initialize_schema_migrations_table","()","<p>Should not be called normally, but this operation is non-destructive. The\nmigrations module handles this …\n"],["initialize_time_zone","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_time_zone","()","<p>Sets the default value for Time.zone, and turns on\nActiveRecord::Base#time_zone_aware_attributes. If …\n"],["initialize_whiny_nils","Rails::Initializer","classes/Rails/Initializer.html#method-i-initialize_whiny_nils","()","<p>Loads support for “whiny nil” (noisy warnings when methods are invoked on\n<code>nil</code> values) if Configuration#whiny_nils …\n"],["initialize_with_stdinput","ActionController::CgiExt::Stdinput","classes/ActionController/CgiExt/Stdinput.html#method-i-initialize_with_stdinput","(type = nil, stdinput = $stdin)",""],["initialize_without_template_tracking","ActionView::Base","classes/ActionView/Base.html#method-i-initialize_without_template_tracking","(*args)",""],["initialized=","Rails","classes/Rails.html#method-c-initialized-3D","(initialized)",""],["initialized?","I18n::Backend::Simple::Implementation","classes/I18n/Backend/Simple/Implementation.html#method-i-initialized-3F","()",""],["initialized?","Rails","classes/Rails.html#method-c-initialized-3F","()",""],["input","ActionView::Helpers::ActiveRecordHelper","classes/ActionView/Helpers/ActiveRecordHelper.html#method-i-input","(record_name, method, options = {})","<p>Returns a default input tag for the type of object returned by the method.\nFor example, if <code>@post</code> has …\n"],["insert","ActionController::MiddlewareStack","classes/ActionController/MiddlewareStack.html#method-i-insert","(index, *args, &block)",""],["insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Returns the last auto-generated ID from the affected table.\n"],["insert","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-insert","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Executes an INSERT query and returns the new record&#39;s ID\n"],["insert","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-insert","(offset, fragment)","<p>Inserts the passed string at specified codepoint offsets.\n<p>Example:\n\n<pre>&#39;Café&#39;.mb_chars.insert(4, &#39; périferôl&#39;).to_s ...</pre>\n"],["insert_after","ActionController::MiddlewareStack","classes/ActionController/MiddlewareStack.html#method-i-insert_after","(index, *args, &block)",""],["insert_before","ActionController::MiddlewareStack","classes/ActionController/MiddlewareStack.html#method-i-insert_before","(index, *args, &block)",""],["insert_fixture","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_fixture","(fixture, table_name)","<p>Inserts the given fixture into the table. Overridden in adapters that\nrequire something beyond a simple …\n"],["insert_fixtures","Fixtures","classes/Fixtures.html#method-i-insert_fixtures","()",""],["insert_html","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-insert_html","(position, id, *options_for_render)","<p>Inserts HTML at the specified <code>position</code> relative to the DOM\nelement identified by the given <code>id</code>.\n<p><code>position</code> …\n"],["insert_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Returns the last auto-generated ID from the affected table.\n"],["inspect","ActionController::MiddlewareStack::Middleware","classes/ActionController/MiddlewareStack/Middleware.html#method-i-inspect","()",""],["inspect","ActionController::Session::AbstractStore::SessionHash","classes/ActionController/Session/AbstractStore/SessionHash.html#method-i-inspect","()",""],["inspect","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-inspect","()","<p>Returns a string like &#39;Post id:integer, title:string, body:text&#39;\n"],["inspect","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-inspect","()","<p>Returns the contents of the record as a nicely formatted string.\n"],["inspect","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-inspect","()",""],["inspect","Continuum::Entry","classes/Continuum/Entry.html#method-i-inspect","()",""],["inspect","MemCache","classes/MemCache.html#method-i-inspect","()","<p>Returns a string representation of the cache object.\n"],["inspect","MemCache::Server","classes/MemCache/Server.html#method-i-inspect","()","<p>Return a string representation of the server object.\n"],["inspect","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["install","Plugin","classes/Plugin.html#method-i-install","(method=nil, options = {})",""],["install","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-install","()",""],["install","RailsEnvironment","classes/RailsEnvironment.html#method-i-install","(name_uri_or_plugin)",""],["install_gem_spec_stubs","Rails::Initializer","classes/Rails/Initializer.html#method-i-install_gem_spec_stubs","()","<p>If Rails is vendored and RubyGems is available, install stub GemSpecs for\nRails, Active Support, Active …\n"],["install_signal_handler","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-install_signal_handler","(signal, handler = nil)",""],["install_signal_handlers","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-install_signal_handlers","()",""],["installed?","Plugin","classes/Plugin.html#method-i-installed-3F","()",""],["installed?","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-installed-3F","()",""],["instance","Rails::Generator::Commands","classes/Rails/Generator/Commands.html#method-c-instance","(command, generator)","<p>Here&#39;s a convenient way to get a handle on generator commands.\nCommand.instance(&#39;destroy&#39;, …\n"],["instance","Rails::Generator::Lookup","classes/Rails/Generator/Lookup.html#method-i-instance","(generator_name, args, runtime_options = {})","<p>Convenience method to instantiate another generator.\n"],["instance","Rails::Generator::Lookup::ClassMethods","classes/Rails/Generator/Lookup/ClassMethods.html#method-i-instance","(generator_name, args = [], runtime_options = {})","<p>Convenience method to lookup and instantiate a generator.\n"],["instance","Repositories","classes/Repositories.html#method-c-instance","()",""],["instance_exec","Object","classes/Object.html#method-i-instance_exec","(*args, &block)","<p>Evaluate the block with the given arguments within the context of this\nobject, so self is set to the …\n"],["instance_method_already_implemented?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)","<p>Checks whether the method is defined in the model or any of its subclasses\nthat also derive from Active …\n"],["instance_variable_defined?","Object","classes/Object.html#method-i-instance_variable_defined-3F","(variable)",""],["instance_variable_names","Object","classes/Object.html#method-i-instance_variable_names","()",""],["instantiate_all_loaded_fixtures","Fixtures","classes/Fixtures.html#method-c-instantiate_all_loaded_fixtures","(object, load_instances = true)",""],["instantiate_fixtures","Fixtures","classes/Fixtures.html#method-c-instantiate_fixtures","(object, table_name, fixtures, load_instances = true)",""],["instantiate_observers","ActiveRecord::Observing::ClassMethods","classes/ActiveRecord/Observing/ClassMethods.html#method-i-instantiate_observers","()","<p>Instantiate the global Active Record observers.\n"],["instantiator?","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-i-instantiator-3F","()",""],["instruct!","Builder::XmlMarkup","classes/Builder/XmlMarkup.html#method-i-instruct-21","(directive_tag=:xml, attrs={})","<p>Insert a processing instruction into the XML markup.  E.g.\n<p>For example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">instruct!</span>\n    <span class=\"ruby-comment\">#=&gt; &lt;?xml version=&quot;1.0&quot; ...</span>\n</pre>\n"],["interpolate","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-interpolate","(locale, string, values = {})","<p>Interpolates values into a given string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">interpolate</span> <span class=\"ruby-string\">&quot;file %{file} opened by %%{user}&quot;</span>, :<span class=\"ruby-identifier\">file</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;test.txt&#39;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["interpolate","I18n::Backend::InterpolationCompiler","classes/I18n/Backend/InterpolationCompiler.html#method-i-interpolate","(locale, string, values)",""],["interpolate","I18n::Backend::Metadata","classes/I18n/Backend/Metadata.html#method-i-interpolate","(locale, entry, values = {})",""],["interpolate_key","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#method-i-interpolate_key","(key)",""],["interpolate_lambda?","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-interpolate_lambda-3F","(object, string, key)","<p>returns true when the given value responds to :call and the key is an\ninterpolation placeholder in the …\n"],["interpolate_or_raise_missing","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#method-i-interpolate_or_raise_missing","(key)",""],["interpolate_without_ruby_19_syntax","String","classes/String.html#method-i-interpolate_without_ruby_19_syntax","(args)",""],["interpolated_str?","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#method-i-interpolated_str-3F","(str)",""],["interpolates?","I18n::Backend::ActiveRecord::Translation","classes/I18n/Backend/ActiveRecord/Translation.html#method-i-interpolates-3F","(key)",""],["interpolation_chunk","ActionController::Routing::OptionalFormatSegment","classes/ActionController/Routing/OptionalFormatSegment.html#method-i-interpolation_chunk","()",""],["invalid?","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-invalid-3F","(attribute)","<p>Returns true if the specified <code>attribute</code> has errors associated\nwith it.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Company</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["invalid?","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-invalid-3F","()","<p>Performs the opposite of <code>valid?</code>. Returns true if errors were\nadded, false otherwise.\n"],["invalid?","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-invalid-3F","(attribute)","<p>Returns true if the specified <code>attribute</code> has errors associated\nwith it.\n<p>Examples\n\n<pre>my_resource = Disk.find(1) ...</pre>\n"],["invoke!","Rails::Generator::Commands::Base","classes/Rails/Generator/Commands/Base.html#method-i-invoke-21","()","<p>Replay action manifest.  RewindBase subclass rewinds manifest.\n"],["invoke!","Rails::Generator::Commands::RewindBase","classes/Rails/Generator/Commands/RewindBase.html#method-i-invoke-21","()","<p>Rewind action manifest.\n"],["irregular","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-irregular","(singular, plural)","<p>Specifies a new irregular that applies to both pluralization and\nsingularization at the same time. This …\n"],["is_a?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-is_a-3F","(klass)","<p>Say we&#39;re a Time to thwart type checking.\n"],["is_utf8?","ActiveSupport::CoreExtensions::String::Multibyte","classes/ActiveSupport/CoreExtensions/String/Multibyte.html#method-i-is_utf8-3F","()","<p>Returns true if the string has UTF-8 semantics (a String used for purely\nbyte resources is unlikely to …\n"],["isdst","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-isdst","()",""],["iso8601","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-iso8601","(fraction_digits = 0)",""],["j","ERB::Util","classes/ERB/Util.html#method-c-j","(s)",""],["javascript_include_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-javascript_include_tag","(*sources)","<p>Returns an html script tag for each of the <code>sources</code> provided.\nYou can pass in the filename (.js extension …\n"],["javascript_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-javascript_path","(source)","<p>Computes the path to a javascript asset in the public javascripts\ndirectory. If the <code>source</code> filename has …\n"],["javascript_tag","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-javascript_tag","(content_or_options_with_block = nil, html_options = {}, &block)","<p>Returns a JavaScript tag with the <code>content</code> inside. Example:\n\n<pre>javascript_tag &quot;alert(&#39;All is good&#39;)&quot;</pre>\n<p>Returns: …\n"],["joins_per_query","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-joins_per_query","()","<p>maximum number of joins in a single query\n"],["json_escape","ERB::Util","classes/ERB/Util.html#method-c-json_escape","(s)","<p>A utility method for escaping HTML entities in JSON strings. This method is\nalso aliased as <code>j</code>.\n<p>In your …\n"],["keep","ActionController::Flash::FlashHash","classes/ActionController/Flash/FlashHash.html#method-i-keep","(k = nil)","<p>Keeps either the entire current flash or a specific flash entry available\nfor the next action:\n\n<pre>flash.keep ...</pre>\n"],["key?","ActionController::Request","classes/ActionController/Request.html#method-i-key-3F","(key)",""],["key?","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[&quot;key&quot;] ...</pre>\n"],["keyenc","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-keyenc","(k)",""],["kilobyte","ActiveSupport::CoreExtensions::Numeric::Bytes","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#method-i-kilobyte","()",""],["kilobytes","ActiveSupport::CoreExtensions::Numeric::Bytes","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#method-i-kilobytes","()",""],["kind_of?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-kind_of-3F","(klass)",""],["klass","ActionController::MiddlewareStack::Middleware","classes/ActionController/MiddlewareStack/Middleware.html#method-i-klass","()",""],["klass","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-klass","()","<p>Returns the Ruby class that corresponds to the abstract data type.\n"],["klass","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-klass","()","<p>Returns the class for the macro.  For example, <code>composed_of :balance,\n:class_name =&gt; &#39;Money&#39;</code> …\n"],["klass","Rails::Generator::Spec","classes/Rails/Generator/Spec.html#method-i-klass","()","<p>Look up the generator class.  Require its class file, find the class in\nObjectSpace, tag it with this …\n"],["l","ActionController::Translation","classes/ActionController/Translation.html#method-i-l","(*args)",""],["l","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-l","(*args)",""],["l","I18n","classes/I18n.html#method-c-l","(object, options = {})",""],["label","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-label","(object_name, method, text = nil, options = {})","<p>Returns a label tag tailored for labelling an input field for a specified\nattribute (identified by <code>method</code> …\n"],["label_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-label_tag","(name, text = nil, options = {})","<p>Creates a label field\n<p>Options  \n<p>Creates standard HTML attributes for the tag.\n"],["last","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-last","(*args)","<p>A convenience wrapper for <code>find(:last, *args)</code>. You can pass in\nall the same arguments to this method as …\n"],["last","ActiveRecord::NamedScope::Scope","classes/ActiveRecord/NamedScope/Scope.html#method-i-last","(*args)",""],["last","ActiveSupport::CoreExtensions::String::Access","classes/ActiveSupport/CoreExtensions/String/Access.html#method-i-last","(limit = 1)","<p>Returns the last character of the string or the last <code>limit</code>\ncharacters.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">last</span>     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["last_modified","ActionController::Response","classes/ActionController/Response.html#method-i-last_modified","()",""],["last_modified=","ActionController::Response","classes/ActionController/Response.html#method-i-last_modified-3D","(utc_time)",""],["last_modified?","ActionController::Response","classes/ActionController/Response.html#method-i-last_modified-3F","()",""],["layout","ActionController::Layout::ClassMethods","classes/ActionController/Layout/ClassMethods.html#method-i-layout","(template_name, conditions = {}, auto = false)","<p>If a layout is specified, all rendered actions will have their result\nrendered when the layout <code>yield</code> …\n"],["length","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-length","()",""],["length","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-length","()",""],["length","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-length","()",""],["lex","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-lex","(s)","<p>Scans s and returns a list of json tokens, excluding white space (as\ndefined in RFC 4627).\n"],["limited_update_conditions","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["limited_update_conditions","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["link_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to","(*args, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code>. See the valid options …\n"],["link_to_function","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-link_to_function","(name, *args, &block)","<p>Returns a link of the given <code>name</code> that will trigger a\nJavaScript <code>function</code> using the onclick handler and …\n"],["link_to_if","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_if","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> if <code>condition</code> is true, …\n"],["link_to_remote","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-link_to_remote","(name, options = {}, html_options = nil)","<p>Returns a link to a remote action defined by <code>options[:url]</code>\n(using the url_for format) that&#39;s called …\n"],["link_to_unless","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless <code>condition</code> is true, …\n"],["link_to_unless_current","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless_current","(name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless the current request …\n"],["links","I18n::Backend::Flatten","classes/I18n/Backend/Flatten.html#method-i-links","()","<p>Store flattened links.\n"],["links","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-links","(base_url, contents)",""],["literal","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-literal","(code)","<p>Returns an object whose <code>to_json</code> evaluates to\n<code>code</code>. Use this to pass a literal JavaScript expression as …\n"],["ljust","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-ljust","(integer, padstr=' ')","<p>Works just like <code>String#ljust</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.rjust(8).to_s ...</pre>\n"],["load","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-load","(attributes)","<p>A method to manually load attributes from a hash. Recursively loads\ncollections of resources.  This method …\n"],["load","ActiveSupport::Multibyte::UnicodeDatabase","classes/ActiveSupport/Multibyte/UnicodeDatabase.html#method-i-load","()","<p>Loads the Unicode database and returns all the internal objects of\nUnicodeDatabase.\n"],["load","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-load","()",""],["load","Rails::Plugin","classes/Rails/Plugin.html#method-i-load","(initializer)","<p>Evaluates a plugin&#39;s init.rb file.\n"],["load!","ActionView::ReloadableTemplate::ReloadablePath","classes/ActionView/ReloadableTemplate/ReloadablePath.html#method-i-load-21","()",""],["load!","ActionView::Template","classes/ActionView/Template.html#method-i-load-21","()",""],["load!","ActionView::Template::EagerPath","classes/ActionView/Template/EagerPath.html#method-i-load-21","()",""],["load!","ActionView::Template::Path","classes/ActionView/Template/Path.html#method-i-load-21","()",""],["load!","Repositories","classes/Repositories.html#method-i-load-21","()",""],["load_application_classes","Rails::Initializer","classes/Rails/Initializer.html#method-i-load_application_classes","()","<p>Eager load application classes\n"],["load_application_initializers","Rails::Initializer","classes/Rails/Initializer.html#method-i-load_application_initializers","()",""],["load_attributes_from_response","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-load_attributes_from_response","(response)",""],["load_environment","Rails::Initializer","classes/Rails/Initializer.html#method-i-load_environment","()","<p>Loads the environment specified by Configuration#environment_path, which is\ntypically one of development, …\n"],["load_file","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-load_file","(filename)","<p>Loads a single translations file by delegating to #load_rb or #load_yml\ndepending on the file extension …\n"],["load_gems","Rails::Initializer","classes/Rails/Initializer.html#method-i-load_gems","()",""],["load_observers","Rails::Initializer","classes/Rails/Initializer.html#method-i-load_observers","()",""],["load_once_paths","Rails::Configuration","classes/Rails/Configuration.html#method-i-load_once_paths","()","<p>Deprecated, use autoload_once_paths.\n"],["load_once_paths=","Rails::Configuration","classes/Rails/Configuration.html#method-i-load_once_paths-3D","(paths)","<p>Deprecated, use autoload_once_paths=.\n"],["load_path","I18n::Config","classes/I18n/Config.html#method-i-load_path","()","<p>Allow clients to register paths providing translation data sources. The\nbackend defines acceptable sources. …\n"],["load_path=","I18n::Config","classes/I18n/Config.html#method-i-load_path-3D","(load_path)","<p>Sets the load path instance. Custom implementations are expected to behave\nlike a Ruby Array.\n"],["load_paths","Rails::Configuration","classes/Rails/Configuration.html#method-i-load_paths","()","<p>Deprecated, use autoload_paths.\n"],["load_paths","Rails::Plugin","classes/Rails/Plugin.html#method-i-load_paths","()","<p>Returns a list of paths this plugin wishes to make available in\n<code>$LOAD_PATH</code>.\n"],["load_paths=","Rails::Configuration","classes/Rails/Configuration.html#method-i-load_paths-3D","(paths)","<p>Deprecated, use autoload_paths=.\n"],["load_paths_added?","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-load_paths_added-3F","()",""],["load_plugins","Rails::Initializer","classes/Rails/Initializer.html#method-i-load_plugins","()","<p>Loads all plugins in <code>config.plugin_paths</code>. \n<code>plugin_paths</code> defaults to <code>vendor/plugins</code> but may\nalso be set …\n"],["load_po","I18n::Backend::Gettext","classes/I18n/Backend/Gettext.html#method-i-load_po","(filename)",""],["load_rb","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-load_rb","(filename)","<p>Loads a plain Ruby translations file. eval&#39;ing the file must yield a\nHash containing translation …\n"],["load_specification","Rails::VendorGemSourceIndex","classes/Rails/VendorGemSourceIndex.html#method-i-load_specification","(gem_dir)",""],["load_translations","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-load_translations","(*filenames)","<p>Accepts a list of paths to translation files. Loads translations from plain\nRuby (*.rb) or YAML files …\n"],["load_view_paths","Rails::Initializer","classes/Rails/Initializer.html#method-i-load_view_paths","()",""],["load_yml","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-load_yml","(filename)","<p>Loads a YAML translations file. The data must have locales as toplevel\nkeys.\n"],["loaded?","ActionController::Session::AbstractStore::SessionHash","classes/ActionController/Session/AbstractStore/SessionHash.html#method-i-loaded-3F","()",""],["loaded?","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-i-loaded-3F","()","<p>Has the session been loaded yet?\n"],["loaded?","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-loaded-3F","()",""],["loaded?","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-loaded-3F","()",""],["loaded?","Rails::Plugin","classes/Rails/Plugin.html#method-i-loaded-3F","()",""],["local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-local","(*args)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from given values. …\n"],["local_after_start?","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-local_after_start-3F","(local)","<p>true if the given local DateTime is after the start of the period \n(inclusive); otherwise false.\n"],["local_before_end?","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-local_before_end-3F","(local)","<p>true if the given local DateTime is before the end of the period \n(exclusive); otherwise false.\n"],["local_constant_names","ActiveSupport::CoreExtensions::Module","classes/ActiveSupport/CoreExtensions/Module.html#method-i-local_constant_names","()","<p>Returns the names of the constants defined locally rather than the\nconstants themselves. See <code>local_constants</code> …\n"],["local_constants","ActiveSupport::CoreExtensions::Module","classes/ActiveSupport/CoreExtensions/Module.html#method-i-local_constants","()","<p>Returns the constants that have been defined locally by this object and not\nin an ancestor. This method …\n"],["local_end","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-local_end","()","<p>The end time of the period in local time as a DateTime. May be nil if \nunbounded.\n"],["local_offset","ActiveSupport::CoreExtensions::DateTime::Calculations::ClassMethods","classes/ActiveSupport/CoreExtensions/DateTime/Calculations/ClassMethods.html#method-i-local_offset","()","<p>DateTimes aren&#39;t aware of DST rules, so use a consistent non-DST offset\nwhen creating a DateTime …\n"],["local_request?","ActionController::Rescue","classes/ActionController/Rescue.html#method-i-local_request-3F","()","<p>True if the request came from localhost, 127.0.0.1. Override this method if\nyou wish to redefine the …\n"],["local_start","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-local_start","()","<p>The start time of the period in local time as a DateTime. May be nil if \nunbounded.\n"],["local_time","ActiveSupport::CoreExtensions::Time::Calculations::ClassMethods","classes/ActiveSupport/CoreExtensions/Time/Calculations/ClassMethods.html#method-i-local_time","(*args)","<p>Wraps class method <code>time_with_datetime_fallback</code> with\n<code>utc_or_local</code> set to <code>:local</code>.\n"],["local_to_utc","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-local_to_utc","(time, dst=true)","<p>Adjust the given time to the simultaneous time in UTC. Returns a Time.utc()\ninstance.\n"],["local_to_utc","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-local_to_utc","(local, dst = nil)","<p>Converts a time in the local timezone to UTC. local can either be a\nDateTime, Time or timestamp (Time.to_i …\n"],["locale","I18n::Config","classes/I18n/Config.html#method-i-locale","()","<p>The only configuration value that is not global and scoped to thread is\n:locale. It defaults to the  …\n"],["locale=","I18n::Config","classes/I18n/Config.html#method-i-locale-3D","(locale)","<p>Sets the current locale pseudo-globally, i.e. in the Thread.current hash.\n"],["locale_files","Rails::Plugin","classes/Rails/Plugin.html#method-i-locale_files","()",""],["locale_path","Rails::Plugin","classes/Rails/Plugin.html#method-i-locale_path","()",""],["localize","ActionController::Translation","classes/ActionController/Translation.html#method-i-localize","(*args)",""],["localize","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-localize","(*args)","<p>Delegates to I18n.localize with no additional functionality.\n"],["localize","I18n","classes/I18n.html#method-c-localize","(object, options = {})","<p>Localizes certain objects, such as dates and numbers to local formatting.\n"],["localize","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-localize","(locale, object, format = :default, options = {})","<p>Acts the same as <code>strftime</code>, but uses a localized version of the\nformat string. Takes a key from the date/time …\n"],["localize","I18n::Backend::Chain","classes/I18n/Backend/Chain.html#method-i-localize","(locale, object, format = :default, options = {})",""],["localize","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-localize","(locale, object, format = :default, options = {})",""],["localized?","Rails::Plugin","classes/Rails/Plugin.html#method-i-localized-3F","()","<p>Returns true if there is any localization file in locale_path\n"],["localtime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-localtime","()","<p>Returns a <code>Time.local()</code> instance of the simultaneous time in\nyour system&#39;s <code>ENV['TZ']</code> zone\n"],["location","ActionController::Response","classes/ActionController/Response.html#method-i-location","()",""],["location=","ActionController::Response","classes/ActionController/Response.html#method-i-location-3D","(url)",""],["lock!","ActiveRecord::Locking::Pessimistic","classes/ActiveRecord/Locking/Pessimistic.html#method-i-lock-21","(lock = true)","<p>Obtain a row lock on this record. Reloads the record to obtain the\nrequested lock. Pass an SQL locking …\n"],["locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column","()","<p>The version column used for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_enabled?","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_enabled-3F","()","<p>Is optimistic locking enabled for this table? Returns true if the\n<code>lock_optimistically</code> flag is set to …\n"],["log","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-log","(sql, name)",""],["log_error","ActionController::Rescue","classes/ActionController/Rescue.html#method-i-log_error","(exception)","<p>Overwrite to implement custom logging of errors. By default logs as fatal.\n"],["log_info","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-log_info","(sql, name, ms)",""],["logger","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-logger","","<p>The logger for diagnosing and tracing Active Resource calls.\n"],["logger","Rails","classes/Rails.html#method-c-logger","()",""],["logger","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-logger","()",""],["lookup","I18n::Backend::ActiveRecord::Implementation","classes/I18n/Backend/ActiveRecord/Implementation.html#method-i-lookup","(locale, key, scope = [], options = {})",""],["lookup","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-lookup","(locale, key, scope = [], options = {})","<p>The method which actually looks up for the translation in the store.\n"],["lookup","I18n::Backend::Cascade","classes/I18n/Backend/Cascade.html#method-i-lookup","(locale, key, scope = [], options = {})",""],["lookup","I18n::Backend::KeyValue::Implementation","classes/I18n/Backend/KeyValue/Implementation.html#method-i-lookup","(locale, key, scope = [], options = {})",""],["lookup","I18n::Backend::Memoize","classes/I18n/Backend/Memoize.html#method-i-lookup","(locale, key, scope = nil, options = {})",""],["lookup","I18n::Backend::Simple::Implementation","classes/I18n/Backend/Simple/Implementation.html#method-i-lookup","(locale, key, scope = [], options = {})","<p>Looks up a translation from the translations hash. Returns nil if eiher key\nis nil, or locale, scope …\n"],["lookup","Mime::Type","classes/Mime/Type.html#method-c-lookup","(string)",""],["lookup","Rails::Generator::Lookup::ClassMethods","classes/Rails/Generator/Lookup/ClassMethods.html#method-i-lookup","(generator_name)","<p>Lookup knows how to find generators&#39; Specs from a list of Sources.\nSearches the sources, in order, …\n"],["lookup_by_extension","Mime::Type","classes/Mime/Type.html#method-c-lookup_by_extension","(extension)",""],["lookup_currency","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-lookup_currency","(locale, currency, count)",""],["lookup_format","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-lookup_format","(locale, type, format)",""],["lookup_format_data","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-lookup_format_data","(locale, type)",""],["lookup_missing_generator","Object","classes/Object.html#method-c-lookup_missing_generator","(class_id)","<p>Lookup missing generators using const_missing.  This allows any generator\nto reference another without …\n"],["lookup_store","ActiveSupport::Cache","classes/ActiveSupport/Cache.html#method-c-lookup_store","(*store_option)","<p>Creates a new CacheStore object according to the given options.\n<p>If no arguments are passed to this method, …\n"],["ls","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-ls","()",""],["lstrip","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-lstrip","()","<p>Strips entire range of Unicode whitespace from the left of the string.\n"],["macro","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-macro","()","<p>Returns the macro type. For example, <code>composed_of :balance,\n:class_name =&gt; &#39;Money&#39;</code> will return …\n"],["mail_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-mail_to","(email_address, name = nil, html_options = {})","<p>Creates a mailto link tag to the specified <code>email_address</code>,\nwhich is also used as the name of the link …\n"],["mailer_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-mailer_name","()",""],["mailer_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mailer_name","(value = nil)","<p>Override the mailer name, which defaults to an inflected version of the\nmailer&#39;s class name. If you …\n"],["mailer_name=","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mailer_name-3D","(value)",""],["make_cache_key","MemCache","classes/MemCache.html#method-i-make_cache_key","(key)","<p>Create a key for the cache, incorporating the namespace qualifier if\nrequested.\n"],["mandatory_options","Rails::Generator::Options","classes/Rails/Generator/Options.html#method-i-mandatory_options","()","<p>Convenient access to class mandatory options.\n"],["mandatory_options","Rails::Generator::Options::ClassMethods","classes/Rails/Generator/Options/ClassMethods.html#method-i-mandatory_options","(options = nil)",""],["manifest","Rails::Generator::Base","classes/Rails/Generator/Base.html#method-i-manifest","()","<p>Generators must provide a manifest.  Use the <code>record</code> method to\ncreate a new manifest and record your generator&#39;s …\n"],["many?","Enumerable","classes/Enumerable.html#method-i-many-3F","(&block)","<p>Returns true if the collection has more than 1 element. Functionally\nequivalent to collection.size &gt; …\n"],["map","I18n::Locale::Fallbacks","classes/I18n/Locale/Fallbacks.html#method-i-map","(mappings)",""],["mark_dead","MemCache::Server","classes/MemCache/Server.html#method-i-mark_dead","(error)","<p>Mark the server as dead and close its socket.\n"],["mark_features!","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-mark_features-21","()","<p>Make a note of $“ so we can safely reload this instance.\n"],["mark_for_destruction","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-mark_for_destruction","()","<p>Marks this record to be destroyed as part of the parents save transaction.\nThis does <em>not</em> actually destroy …\n"],["markdown","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-markdown","(text)","<p>Returns the text with all the Markdown codes turned into HTML tags.\n<em>This method requires BlueCloth or</em> …\n"],["marked_for_destruction?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-marked_for_destruction-3F","()","<p>Returns whether or not this record will be destroyed as part of the parents\nsave transaction.\n<p>Only useful …\n"],["marshal","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-c-marshal","(data)",""],["marshal","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-marshal","(data)",""],["marshal_dump","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-marshal_dump","()",""],["marshal_load","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-marshal_load","(variables)",""],["match","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-c-match","(method)",""],["match","ActiveRecord::DynamicScopeMatch","classes/ActiveRecord/DynamicScopeMatch.html#method-c-match","(method)",""],["match","HTML::Selector","classes/HTML/Selector.html#method-i-match","(element, first_only = false)","<p>Matches an element against the selector.\n<p>For a simple selector this method returns an array with the element …\n"],["match","I18n::Locale::Tag::Rfc4646::Parser","classes/I18n/Locale/Tag/Rfc4646/Parser.html#method-c-match","(tag)",""],["match_attribute_method?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-match_attribute_method-3F","(method_name)","<p>Returns MatchData if method_name is an attribute method.\n"],["match_extraction","ActionController::Routing::OptionalFormatSegment","classes/ActionController/Routing/OptionalFormatSegment.html#method-i-match_extraction","(next_capture)","<p>the value should not include the period (.)\n"],["mattr_accessor","Module","classes/Module.html#method-i-mattr_accessor","(*syms)",""],["mattr_reader","Module","classes/Module.html#method-i-mattr_reader","(*syms)",""],["mattr_writer","Module","classes/Module.html#method-i-mattr_writer","(*syms)",""],["maximum","ActiveRecord::Calculations::ClassMethods","classes/ActiveRecord/Calculations/ClassMethods.html#method-i-maximum","(column_name, options = {})","<p>Calculates the maximum value on a given column. The value is returned with\nthe same data type of the …\n"],["mb_chars","ActiveSupport::CoreExtensions::String::Multibyte","classes/ActiveSupport/CoreExtensions/String/Multibyte.html#method-i-mb_chars","()","<p>Multibyte proxy\n<p><code>mb_chars</code> is a multibyte safe proxy for string methods.\n<p>In Ruby 1.8 and older it creates …\n"],["measure","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::CpuTime","classes/ActiveSupport/Testing/Performance/Metrics/CpuTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::GcRuns","classes/ActiveSupport/Testing/Performance/Metrics/GcRuns.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::GcTime","classes/ActiveSupport/Testing/Performance/Metrics/GcTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Memory","classes/ActiveSupport/Testing/Performance/Metrics/Memory.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Objects","classes/ActiveSupport/Testing/Performance/Metrics/Objects.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::ProcessTime","classes/ActiveSupport/Testing/Performance/Metrics/ProcessTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Time","classes/ActiveSupport/Testing/Performance/Metrics/Time.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::WallTime","classes/ActiveSupport/Testing/Performance/Metrics/WallTime.html#method-i-measure","()",""],["measure_mode","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-measure_mode","()",""],["media_type","ActionController::Request","classes/ActionController/Request.html#method-i-media_type","()",""],["megabyte","ActiveSupport::CoreExtensions::Numeric::Bytes","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#method-i-megabyte","()",""],["megabytes","ActiveSupport::CoreExtensions::Numeric::Bytes","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#method-i-megabytes","()",""],["member?","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["memoize","ActiveSupport::Memoizable","classes/ActiveSupport/Memoizable.html#method-i-memoize","(*symbols)",""],["memoize_all","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-memoize_all","()",""],["memoized_ivar_for","ActiveSupport::Memoizable","classes/ActiveSupport/Memoizable.html#method-c-memoized_ivar_for","(symbol)",""],["memoized_lookup","I18n::Backend::Memoize","classes/I18n/Backend/Memoize.html#method-i-memoized_lookup","()",""],["merge","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-merge","(hash)","<p>Merges the instantized and the specified hashes together, giving precedence\nto the values from the second …\n"],["merge!","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-merge-21","(other_hash)",""],["merge_conditions","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-merge_conditions","(*conditions)","<p>Merges conditions so that the result is a valid <code>condition</code>\n"],["metaclass","Object","classes/Object.html#method-i-metaclass","()","<p>Get object&#39;s meta (ghost, eigenclass, singleton) class.\n<p>Deprecated in favor of Object#singleton_class …\n"],["metal_path","Rails::Plugin","classes/Rails/Plugin.html#method-i-metal_path","()",""],["method","ActionController::Request","classes/ActionController/Request.html#method-i-method","()","<p>Returns the HTTP request method used for action processing as a lowercase\nsymbol, such as <code>:post</code>. (Unlike …\n"],["method_added","Kernel","classes/Kernel.html#method-c-method_added","(name)","<p>Detect method additions to Kernel and remove them in the BlankSlate class.\n"],["method_added","Object","classes/Object.html#method-c-method_added","(name)","<p>Detect method additions to Object and remove them in the BlankSlate class.\n"],["method_missing","ActionController::Integration::Runner","classes/ActionController/Integration/Runner.html#method-i-method_missing","(sym, *args, &block)","<p>Delegate unhandled messages to the current session instance.\n"],["method_missing","ActionController::Reloader::BodyWrapper","classes/ActionController/Reloader/BodyWrapper.html#method-i-method_missing","(*args, &block)",""],["method_missing","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-method_missing","(selector, *args, &block)",""],["method_missing","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-method_missing","(symbol, *args)","<p>Handles non supported datatypes - e.g. XML\n"],["method_missing","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-method_missing","(method, *arguments, &block)",""],["method_missing","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-method_missing","(method, *args, &block)","<p>Forward all undefined methods to the wrapped string.\n"],["method_missing","ActiveSupport::StringInquirer","classes/ActiveSupport/StringInquirer.html#method-i-method_missing","(method_name, *arguments)",""],["method_missing","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-method_missing","(sym, *args, &block)","<p>Send the missing method to <code>time</code> instance, and wrap result in a\nnew TimeWithZone with the existing <code>time_zone</code> …\n"],["method_missing","Builder::CSS","classes/Builder/CSS.html#method-i-method_missing","(sym, *args, &block)",""],["method_missing","Builder::XmlBase","classes/Builder/XmlBase.html#method-i-method_missing","(sym, *args, &block)","<p>Create XML markup based on the name of the method.  This method is never\ninvoked directly, but is called …\n"],["method_missing","Rails::Generator::Manifest","classes/Rails/Generator/Manifest.html#method-i-method_missing","(action, *args, &block)","<p>Record an action.\n"],["method_option_to_s","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-method_option_to_s","(method)",""],["method_segment","ActionView::Template","classes/ActionView/Template.html#method-i-method_segment","()",""],["microseconds","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-microseconds","(time)","<p>&#39;0.123456&#39; -&gt; 123456 &#39;1.123456&#39; -&gt; 123456\n"],["middleware","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-middleware","()",""],["middleware","Rails::Configuration","classes/Rails/Configuration.html#method-i-middleware","()",""],["midnight","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-midnight","()",""],["midnight","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-midnight","()",""],["midnight","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-midnight","()",""],["migrate","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-migrate","(direction)","<p>Execute this migration in the named direction\n"],["migration_directory","Rails::Generator::Commands::Base","classes/Rails/Generator/Commands/Base.html#method-i-migration_directory","(relative_path)",""],["migration_exists?","Rails::Generator::Commands::Base","classes/Rails/Generator/Commands/Base.html#method-i-migration_exists-3F","(file_name)",""],["migration_template","Rails::Generator::Commands::Create","classes/Rails/Generator/Commands/Create.html#method-i-migration_template","(relative_source, relative_destination, template_options = {})","<p>When creating a migration, it knows to find the first available file in\ndb/migrate and use the migration.rb …\n"],["migration_template","Rails::Generator::Commands::Destroy","classes/Rails/Generator/Commands/Destroy.html#method-i-migration_template","(relative_source, relative_destination, template_options = {})","<p>When deleting a migration, it knows to delete every file named\n“[0-9]*_#{file_name}”.\n"],["migration_template","Rails::Generator::Commands::List","classes/Rails/Generator/Commands/List.html#method-i-migration_template","(relative_source, relative_destination, options = {})",""],["migrations_path","ActiveRecord::Schema","classes/ActiveRecord/Schema.html#method-c-migrations_path","()",""],["mime_type","ActionView::Template","classes/ActionView/Template.html#method-i-mime_type","()",""],["mime_type","ActiveResource::Formats::JsonFormat","classes/ActiveResource/Formats/JsonFormat.html#method-i-mime_type","()",""],["mime_type","ActiveResource::Formats::XmlFormat","classes/ActiveResource/Formats/XmlFormat.html#method-i-mime_type","()",""],["minimum","ActiveRecord::Calculations::ClassMethods","classes/ActiveRecord/Calculations/ClassMethods.html#method-i-minimum","(column_name, options = {})","<p>Calculates the minimum value on a given column.  The value is returned with\nthe same data type of the …\n"],["minus_with_coercion","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-minus_with_coercion","(other)","<p>Time#- can also be used to determine the number of seconds between two Time\ninstances. We&#39;re layering …\n"],["minute","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-minute","()",""],["minutes","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-minutes","()",""],["missing_key","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#method-i-missing_key","(key)",""],["model_name","ActiveSupport::CoreExtensions::Module","classes/ActiveSupport/CoreExtensions/Module.html#method-i-model_name","()","<p>Returns an ActiveSupport::ModelName object for module. It can be used to\nretrieve all kinds of naming-related …\n"],["monday","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-monday","()",""],["monday","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-monday","()",""],["month","ActiveSupport::CoreExtensions::Float::Time","classes/ActiveSupport/CoreExtensions/Float/Time.html#method-i-month","()",""],["month","ActiveSupport::CoreExtensions::Integer::Time","classes/ActiveSupport/CoreExtensions/Integer/Time.html#method-i-month","()",""],["months","ActiveSupport::CoreExtensions::Float::Time","classes/ActiveSupport/CoreExtensions/Float/Time.html#method-i-months","()",""],["months","ActiveSupport::CoreExtensions::Integer::Time","classes/ActiveSupport/CoreExtensions/Integer/Time.html#method-i-months","()",""],["months_ago","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-months_ago","(months)","<p>Returns a new Date/DateTime representing the time a number of specified\nmonths ago\n"],["months_ago","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-months_ago","(months)","<p>Returns a new Time representing the time a number of specified months ago\n"],["months_since","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-months_since","(months)","<p>Returns a new Date/DateTime representing the time a number of specified\nmonths in the future\n"],["months_since","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-months_since","(months)","<p>Returns a new Time representing the time a number of specified months in\nthe future\n"],["months_without_deprecation","ActiveSupport::CoreExtensions::Float::Time","classes/ActiveSupport/CoreExtensions/Float/Time.html#method-i-months_without_deprecation","()",""],["ms","Benchmark","classes/Benchmark.html#method-c-ms","()",""],["mtime","ActionView::ReloadableTemplate","classes/ActionView/ReloadableTemplate.html#method-i-mtime","()",""],["multipart?","ActionView::Template","classes/ActionView/Template.html#method-i-multipart-3F","()",""],["multiple_of?","ActiveSupport::CoreExtensions::Integer::EvenOdd","classes/ActiveSupport/CoreExtensions/Integer/EvenOdd.html#method-i-multiple_of-3F","(number)",""],["mute","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-mute","()",""],["n_","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#method-i-n_","(msgid, msgid_plural, n = 1)",""],["name","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-name","()","<p>Returns the name of the macro.  For example, <code>composed_of :balance,\n:class_name =&gt; &#39;Money&#39;</code> …\n"],["name","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-name","()",""],["name","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-name","()","<p>An alias for identifier.\n"],["named_scope","ActiveRecord::NamedScope::ClassMethods","classes/ActiveRecord/NamedScope/ClassMethods.html#method-i-named_scope","(name, options = {}, &block)","<p>Adds a class method for retrieving and querying objects. A scope represents\na narrowing of a database …\n"],["names","Rails::Generator::Source","classes/Rails/Generator/Source.html#method-i-names","()","<p>Return a convenient sorted list of all generator names.\n"],["namespace","ActionController::Routing::RouteSet::Mapper","classes/ActionController/Routing/RouteSet/Mapper.html#method-i-namespace","(name, options = {}, &block)","<p>Enables the use of resources in a module by setting the name_prefix,\npath_prefix, and namespace for the …\n"],["namespace_lookup?","I18n::Backend::Chain","classes/I18n/Backend/Chain.html#method-i-namespace_lookup-3F","(result, options)",""],["native_database_types","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-native_database_types","()","<p>Returns a Hash of mappings from the abstract data types to the native\ndatabase types.  See TableDefinition#column …\n"],["new","ActionController::Assertions::SelectorAssertions","classes/ActionController/Assertions/SelectorAssertions.html#method-c-new","(*args)",""],["new","ActionController::Caching::Actions::ActionCachePath","classes/ActionController/Caching/Actions/ActionCachePath.html#method-c-new","(controller, options = {}, infer_extension = true)","<p>When true, infer_extension will look up the cache path extension from the\nrequest&#39;s path &amp; format. …\n"],["new","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-c-new","(output = $stdout, request = nil, response = nil)","<p>DEPRECATE: Remove arguments, since they are only used by CGI\n"],["new","ActionController::Failsafe","classes/ActionController/Failsafe.html#method-c-new","(app)",""],["new","ActionController::Http::Headers","classes/ActionController/Http/Headers.html#method-c-new","(*args)",""],["new","ActionController::Integration::Runner","classes/ActionController/Integration/Runner.html#method-c-new","(*args)",""],["new","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-c-new","(app = nil)","<p>Create and initialize a new Session instance.\n"],["new","ActionController::MiddlewareStack","classes/ActionController/MiddlewareStack.html#method-c-new","(*args, &block)",""],["new","ActionController::MiddlewareStack::Middleware","classes/ActionController/MiddlewareStack/Middleware.html#method-c-new","(klass, *args, &block)",""],["new","ActionController::MiddlewareStack::Middleware","classes/ActionController/MiddlewareStack/Middleware.html#method-c-new","(klass, *args, &block)",""],["new","ActionController::ParamsParser","classes/ActionController/ParamsParser.html#method-c-new","(app)",""],["new","ActionController::Reloader::BodyWrapper","classes/ActionController/Reloader/BodyWrapper.html#method-c-new","(body, lock)",""],["new","ActionController::Response","classes/ActionController/Response.html#method-c-new","()",""],["new","ActionController::Routing::Optimisation::Optimiser","classes/ActionController/Routing/Optimisation/Optimiser.html#method-c-new","(route, kind)",""],["new","ActionController::Routing::OptionalFormatSegment","classes/ActionController/Routing/OptionalFormatSegment.html#method-c-new","(key = nil, options = {})",""],["new","ActionController::Session::AbstractStore","classes/ActionController/Session/AbstractStore.html#method-c-new","(app, options = {})",""],["new","ActionController::Session::AbstractStore::OptionsHash","classes/ActionController/Session/AbstractStore/OptionsHash.html#method-c-new","(by, env, default_options)",""],["new","ActionController::Session::AbstractStore::SessionHash","classes/ActionController/Session/AbstractStore/SessionHash.html#method-c-new","(by, env)",""],["new","ActionController::Session::CookieStore","classes/ActionController/Session/CookieStore.html#method-c-new","(app, options = {})",""],["new","ActionController::Session::MemCacheStore","classes/ActionController/Session/MemCacheStore.html#method-c-new","(app, options = {})",""],["new","ActionController::StringCoercion","classes/ActionController/StringCoercion.html#method-c-new","(app)",""],["new","ActionController::StringCoercion::UglyBody","classes/ActionController/StringCoercion/UglyBody.html#method-c-new","(body)",""],["new","ActionController::TestCase","classes/ActionController/TestCase.html#method-c-new","(*args)",""],["new","ActionController::TestUploadedFile","classes/ActionController/TestUploadedFile.html#method-c-new","(path, content_type = Mime::TEXT, binary = false)",""],["new","ActionView::Base","classes/ActionView/Base.html#method-c-new","(*args)",""],["new","ActionView::Base::ProxyModule","classes/ActionView/Base/ProxyModule.html#method-c-new","(receiver)",""],["new","ActionView::Helpers::AtomFeedHelper::AtomBuilder","classes/ActionView/Helpers/AtomFeedHelper/AtomBuilder.html#method-c-new","(xml)",""],["new","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-c-new","(xml, view, feed_options = {})",""],["new","ActionView::ReloadableTemplate","classes/ActionView/ReloadableTemplate.html#method-c-new","(*args)",""],["new","ActionView::ReloadableTemplate::ReloadablePath","classes/ActionView/ReloadableTemplate/ReloadablePath.html#method-c-new","(path)",""],["new","ActionView::Template","classes/ActionView/Template.html#method-c-new","(template_path, load_path = nil)",""],["new","ActionView::Template::EagerPath","classes/ActionView/Template/EagerPath.html#method-c-new","(path)",""],["new","ActionView::Template::Path","classes/ActionView/Template/Path.html#method-c-new","(path)",""],["new","ActionView::TemplateHandler","classes/ActionView/TemplateHandler.html#method-c-new","(view = nil)",""],["new","ActionView::TestCase::TestController","classes/ActionView/TestCase/TestController.html#method-c-new","()",""],["new","ActiveRecord::AttributeAssignmentError","classes/ActiveRecord/AttributeAssignmentError.html#method-c-new","(message, exception, attribute)",""],["new","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-new","(attributes = nil)","<p>New objects can be instantiated as either empty (pass no construction\nparameter) or pre-set with attributes …\n"],["new","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-new","(name, default, sql_type = nil, null = true)","<p>Instantiates a new column in the table.\n<p><code>name</code> is the column&#39;s name, such as\n<code>supplier_id</code> in <code>supplier_id</code> …\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-c-new","(pools = {})",""],["new","ActiveRecord::ConnectionAdapters::ConnectionManagement","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html#method-c-new","(app)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-c-new","(spec)","<p>Creates a new ConnectionPool object. <code>spec</code> is a\nConnectionSpecification object which describes database …\n"],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-new","(connection, logger, connection_parameters, config)","<p>Initializes and connects a PostgreSQL adapter.\n"],["new","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-c-new","(connection, logger, config)",""],["new","ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html#method-c-new","(version_string)",""],["new","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-c-new","(table_name, base)",""],["new","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-c-new","(base)",""],["new","ActiveRecord::DynamicFinderMatch","classes/ActiveRecord/DynamicFinderMatch.html#method-c-new","(method)",""],["new","ActiveRecord::DynamicScopeMatch","classes/ActiveRecord/DynamicScopeMatch.html#method-c-new","(method)",""],["new","ActiveRecord::Error","classes/ActiveRecord/Error.html#method-c-new","(base, attribute, type = nil, options = {})",""],["new","ActiveRecord::MultiparameterAssignmentErrors","classes/ActiveRecord/MultiparameterAssignmentErrors.html#method-c-new","(errors)",""],["new","ActiveRecord::NamedScope::Scope","classes/ActiveRecord/NamedScope/Scope.html#method-c-new","(proxy_scope, options, &block)",""],["new","ActiveRecord::Observer","classes/ActiveRecord/Observer.html#method-c-new","()","<p>Start observing the declared classes and their subclasses.\n"],["new","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-c-new","(app)",""],["new","ActiveRecord::RecordInvalid","classes/ActiveRecord/RecordInvalid.html#method-c-new","(record)",""],["new","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-c-new","(macro, name, options, active_record)",""],["new","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-new","(attributes)","<p>Look for normal and marshaled data, self.find_by_session_id&#39;s way of\ntelling us to postpone unmarshaling …\n"],["new","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-new","(attributes = {})","<p>Constructor method for new resources; the optional <code>attributes</code>\nparameter takes a hash of attributes for …\n"],["new","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-c-new","(site, format = ActiveResource::Formats[:xml])","<p>The <code>site</code> parameter is required and will set the\n<code>site</code> attribute to the URI for the remote resource service. …\n"],["new","ActiveResource::Request","classes/ActiveResource/Request.html#method-c-new","(method, path, body = nil, headers = {})",""],["new","ActiveResource::Response","classes/ActiveResource/Response.html#method-c-new","(body, message = 200, headers = {})",""],["new","ActiveResource::SSLError","classes/ActiveResource/SSLError.html#method-c-new","(message)",""],["new","ActiveResource::TimeoutError","classes/ActiveResource/TimeoutError.html#method-c-new","(message)",""],["new","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-c-new","()",""],["new","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-c-new","(log, level = DEBUG)",""],["new","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-c-new","(cache_path)",""],["new","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-c-new","(*addresses)","<p>Creates a new MemCacheStore object, with the given memcached server\naddresses. Each address is either …\n"],["new","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-c-new","()",""],["new","ActiveSupport::Cache::SynchronizedMemoryStore","classes/ActiveSupport/Cache/SynchronizedMemoryStore.html#method-c-new","()",""],["new","ActiveSupport::Callbacks::Callback","classes/ActiveSupport/Callbacks/Callback.html#method-c-new","(kind, method, options = {})",""],["new","ActiveSupport::Deprecation::DeprecatedObjectProxy","classes/ActiveSupport/Deprecation/DeprecatedObjectProxy.html#method-c-new","(object, message)",""],["new","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-c-new","()",""],["new","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-c-new","(secret, cipher = 'aes-256-cbc')",""],["new","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-c-new","(secret, digest = 'SHA1')",""],["new","ActiveSupport::ModelName","classes/ActiveSupport/ModelName.html#method-c-new","(name)",""],["new","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-new","(string)","<p>Creates a new Chars instance by wrapping <em>string</em>.\n"],["new","ActiveSupport::Multibyte::UnicodeDatabase","classes/ActiveSupport/Multibyte/UnicodeDatabase.html#method-c-new","()",""],["new","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-c-new","()",""],["new","ActiveSupport::Testing::Performance::Metrics::CpuTime","classes/ActiveSupport/Testing/Performance/Metrics/CpuTime.html#method-c-new","(*args)",""],["new","ActiveSupport::Testing::Performance::Performer","classes/ActiveSupport/Testing/Performance/Performer.html#method-c-new","(harness, metric)",""],["new","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-c-new","(*args)",""],["new","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-c-new","(utc_time, time_zone, local_time = nil, period = nil)",""],["new","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-new","(name)","<p>Return a TimeZone instance with the given name, or <code>nil</code> if no\nsuch TimeZone instance exists. (This exists …\n"],["new","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-new","(name, utc_offset = nil, tzinfo = nil)","<p>Create a new TimeZone object with the given name and offset. The offset is\nthe number of seconds that …\n"],["new","Builder::CSS","classes/Builder/CSS.html#method-c-new","(indent=2)","<p>Create a CSS builder.\n<p>out &mdash; Object receiving the markup.1  <code>out</code> must respond to\n<code>&lt;&lt;</code>.\n<p>indent &mdash; Number of …\n"],["new","Builder::XmlBase","classes/Builder/XmlBase.html#method-c-new","(indent=0, initial=0)","<p>Create an XML markup builder.\n<p>out &mdash; Object receiving the markup.  <code>out</code> must respond to\n<code>&lt;&lt;</code>.\n<p>indent &mdash; Number …\n"],["new","Builder::XmlMarkup","classes/Builder/XmlMarkup.html#method-c-new","(options={})","<p>Create an XML markup builder.  Parameters are specified by an option hash.\n<p>:target=&gt;<em>target_object</em> &mdash; "],["new","CGI::Cookie","classes/CGI/Cookie.html#method-c-new","(name = '', *value)","<p>Creates a new CGI::Cookie object.\n<p>The contents of the cookie can be specified as a <code>name</code> and one\nor more …\n"],["new","Commands::Discover","classes/Commands/Discover.html#method-c-new","(base_command)",""],["new","Commands::Info","classes/Commands/Info.html#method-c-new","(base_command)",""],["new","Commands::Install","classes/Commands/Install.html#method-c-new","(base_command)",""],["new","Commands::List","classes/Commands/List.html#method-c-new","(base_command)",""],["new","Commands::Plugin","classes/Commands/Plugin.html#method-c-new","()",""],["new","Commands::Remove","classes/Commands/Remove.html#method-c-new","(base_command)",""],["new","Commands::Source","classes/Commands/Source.html#method-c-new","(base_command)",""],["new","Commands::Sources","classes/Commands/Sources.html#method-c-new","(base_command)",""],["new","Commands::Unsource","classes/Commands/Unsource.html#method-c-new","(base_command)",""],["new","Commands::Update","classes/Commands/Update.html#method-c-new","(base_command)",""],["new","Continuum::Entry","classes/Continuum/Entry.html#method-c-new","(val, srv)",""],["new","Fixtures","classes/Fixtures.html#method-c-new","(connection, table_name, class_name, fixture_path, file_filter = DEFAULT_FILTER_RE)",""],["new","HTML::Selector","classes/HTML/Selector.html#method-c-new","(selector, *values)","<p>Creates a new selector from a CSS 2 selector expression.\n<p>The first argument is the selector expression. …\n"],["new","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","I18n::Backend::Chain","classes/I18n/Backend/Chain.html#method-c-new","(*backends)",""],["new","I18n::Backend::KeyValue::Implementation","classes/I18n/Backend/KeyValue/Implementation.html#method-c-new","(store, subtrees=true)",""],["new","I18n::Backend::Transliterator::HashTransliterator","classes/I18n/Backend/Transliterator/HashTransliterator.html#method-c-new","(rule = nil)",""],["new","I18n::Backend::Transliterator::ProcTransliterator","classes/I18n/Backend/Transliterator/ProcTransliterator.html#method-c-new","(rule)",""],["new","I18n::InvalidLocale","classes/I18n/InvalidLocale.html#method-c-new","(locale)",""],["new","I18n::InvalidPluralizationData","classes/I18n/InvalidPluralizationData.html#method-c-new","(entry, count)",""],["new","I18n::Locale::Fallbacks","classes/I18n/Locale/Fallbacks.html#method-c-new","(*mappings)",""],["new","I18n::Locale::Tag::Simple","classes/I18n/Locale/Tag/Simple.html#method-c-new","(*tag)",""],["new","I18n::MissingInterpolationArgument","classes/I18n/MissingInterpolationArgument.html#method-c-new","(values, string)",""],["new","I18n::MissingTranslationData","classes/I18n/MissingTranslationData.html#method-c-new","(locale, key, opts = nil)",""],["new","I18n::ReservedInterpolationKey","classes/I18n/ReservedInterpolationKey.html#method-c-new","(key, string)",""],["new","I18n::UnknownFileType","classes/I18n/UnknownFileType.html#method-c-new","(type, filename)",""],["new","KeyError","classes/KeyError.html#method-c-new","(message = nil)",""],["new","Logger::Formatter","classes/Logger/Formatter.html#method-c-new","()",""],["new","MemCache","classes/MemCache.html#method-c-new","(*args)","<p>Accepts a list of <code>servers</code> and a list of <code>opts</code>. \n<code>servers</code> may be omitted.  See <code>servers=</code> for\nacceptable server …\n"],["new","MemCache::Server","classes/MemCache/Server.html#method-c-new","(memcache, host, port = DEFAULT_PORT, weight = DEFAULT_WEIGHT)","<p>Create a new MemCache::Server object for the memcached instance listening\non the given host and port, …\n"],["new","Mime::Type","classes/Mime/Type.html#method-c-new","(string, symbol = nil, synonyms = [])",""],["new","Plugin","classes/Plugin.html#method-c-new","(uri, name=nil)",""],["new","Rails::BacktraceCleaner","classes/Rails/BacktraceCleaner.html#method-c-new","()",""],["new","Rails::Configuration","classes/Rails/Configuration.html#method-c-new","()","<p>Create a new Configuration instance, initialized with the default values.\n"],["new","Rails::GemBuilder","classes/Rails/GemBuilder.html#method-c-new","(spec, gem_dir)",""],["new","Rails::GemDependency","classes/Rails/GemDependency.html#method-c-new","(name, options = {})",""],["new","Rails::GemPlugin","classes/Rails/GemPlugin.html#method-c-new","(spec, gem)","<p>Initialize this plugin from a Gem::Specification.\n"],["new","Rails::Generator::AbstractGemSource","classes/Rails/Generator/AbstractGemSource.html#method-c-new","()",""],["new","Rails::Generator::Base","classes/Rails/Generator/Base.html#method-c-new","(runtime_args, runtime_options = {})",""],["new","Rails::Generator::GeneratedAttribute","classes/Rails/Generator/GeneratedAttribute.html#method-c-new","(name, type)",""],["new","Rails::Generator::Manifest","classes/Rails/Generator/Manifest.html#method-c-new","(target = nil)","<p>Take a default action target.  Yield self if block given.\n"],["new","Rails::Generator::NamedBase","classes/Rails/Generator/NamedBase.html#method-c-new","(runtime_args, runtime_options = {})",""],["new","Rails::Generator::PathSource","classes/Rails/Generator/PathSource.html#method-c-new","(label, path)",""],["new","Rails::Generator::Source","classes/Rails/Generator/Source.html#method-c-new","(label)",""],["new","Rails::Generator::Spec","classes/Rails/Generator/Spec.html#method-c-new","(name, path, source)",""],["new","Rails::Initializer","classes/Rails/Initializer.html#method-c-new","(configuration)","<p>Create a new Initializer instance that references the given Configuration\ninstance.\n"],["new","Rails::Plugin","classes/Rails/Plugin.html#method-c-new","(directory)",""],["new","Rails::SecretKeyGenerator","classes/Rails/SecretKeyGenerator.html#method-c-new","(identifier)",""],["new","Rails::VendorGemSourceIndex","classes/Rails/VendorGemSourceIndex.html#method-c-new","(installed_index, vendor_dir=Rails::GemDependency.unpacked_path)",""],["new","RailsEnvironment","classes/RailsEnvironment.html#method-c-new","(dir)",""],["new","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-c-new","(log_file_path = nil, gc_request_period = nil)","<p>Initialize the FastCGI instance with the path to a crash log detailing\nunhandled exceptions (default …\n"],["new","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-c-new","(urls_to_fetch, level = 1, cwd = \".\")",""],["new","Repositories","classes/Repositories.html#method-c-new","(cache_file = File.join(find_home, \".rails-plugin-sources\"))",""],["new","Repository","classes/Repository.html#method-c-new","(uri)",""],["new","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-c-new","(tag)",""],["new","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-c-new","(identifier = nil)","<p>If identifier is nil calls super(), otherwise calls get. An identfier \nshould always be passed in when …\n"],["new","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-c-new","(start_transition, end_transition, offset = nil)","<p>Initializes a new TimezonePeriod.\n"],["new?","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-new-3F","()","<p>A method to determine if the resource a new object (i.e., it has not been\nPOSTed to the remote service …\n"],["new_and_loaded","ActionView::Template::Path","classes/ActionView/Template/Path.html#method-c-new_and_loaded","(path)",""],["new_date","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-new_date","(year, mon, mday)",""],["new_record?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-new_record-3F","()","<p>Returns true if this object hasn&#39;t been saved yet – that is, a record\nfor the object doesn&#39;t …\n"],["new_record?","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-new_record-3F","()",""],["new_record?","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-new_record-3F","()",""],["new_request!","ActionView::ReloadableTemplate::ReloadablePath","classes/ActionView/ReloadableTemplate/ReloadablePath.html#method-i-new_request-21","()",""],["new_session","Object","classes/Object.html#method-i-new_session","()","<p>create a new session. If a block is given, the new session will be yielded\nto the block before being …\n"],["new_time","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-new_time","(year, mon, mday, hour, min, sec, microsec)",""],["next_element","HTML::Selector","classes/HTML/Selector.html#method-i-next_element","(element, name = nil)","<p>Return the next element after this one. Skips sibling text nodes.\n<p>With the <code>name</code> argument, returns the …\n"],["next_migration_number","Rails::Generator::Commands::Base","classes/Rails/Generator/Commands/Base.html#method-i-next_migration_number","()",""],["next_migration_string","Rails::Generator::Commands::Base","classes/Rails/Generator/Commands/Base.html#method-i-next_migration_string","(padding = 3)",""],["next_month","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-next_month","()","<p>Short-hand for months_since(1)\n"],["next_month","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-next_month","()","<p>Short-hand for months_since(1)\n"],["next_selector","HTML::Selector","classes/HTML/Selector.html#method-i-next_selector","(statement, values)","<p>Called to create a dependent selector (sibling, descendant, etc). Passes\nthe remainder of the statement …\n"],["next_week","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-next_week","(day = :monday)","<p>Returns a new Date/DateTime representing the start of the given day in next\nweek (default is Monday). …\n"],["next_week","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-next_week","(day = :monday)","<p>Returns a new Time representing the start of the given day in next week\n(default is Monday).\n"],["next_year","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-next_year","()","<p>Short-hand for years_since(1)\n"],["next_year","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-next_year","()","<p>Short-hand for years_since(1)\n"],["ngettext","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#method-i-ngettext","(msgid, msgid_plural, n = 1)",""],["nibble","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-nibble","(c)",""],["nil?","Builder::CSS","classes/Builder/CSS.html#method-i-nil-3F","()","<p>“Cargo culted” from Jim who also “cargo culted” it.  See xmlbase.rb.\n"],["nil?","Builder::XmlBase","classes/Builder/XmlBase.html#method-i-nil-3F","()","<p>For some reason, nil? is sent to the XmlMarkup object.  If nil? is not\ndefined and method_missing is …\n"],["nil_key","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#method-i-nil_key","(key)",""],["nonce","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-nonce","(time = Time.now)","<p>Uses an MD5 digest based on time to generate a value to be used only once.\n<p>A server-specified data string …\n"],["none?","Enumerable","classes/Enumerable.html#method-i-none-3F","(&block)","<p>Returns true if none of the elements match the given block.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">success</span> = <span class=\"ruby-identifier\">responses</span>.<span class=\"ruby-identifier\">none?</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">r</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">r</span>.<span class=\"ruby-identifier\">status</span> <span class=\"ruby-operator\">/</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["noreply","MemCache","classes/MemCache.html#method-i-noreply","()",""],["normalize","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-normalize","(form=ActiveSupport::Multibyte.default_normalization_form)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["normalize","I18n::Backend::Gettext","classes/I18n/Backend/Gettext.html#method-i-normalize","(locale, data)",""],["normalize_flat_keys","I18n::Backend::Flatten","classes/I18n/Backend/Flatten.html#method-c-normalize_flat_keys","(locale, key, scope, separator)","<p>normalize_keys the flatten way. This method is significantly faster and\ncreates way less objects than …\n"],["normalize_flat_keys","I18n::Backend::Flatten","classes/I18n/Backend/Flatten.html#method-i-normalize_flat_keys","(locale, key, scope, separator)","<p>Shortcut to I18n::Backend::Flatten.normalize_flat_keys and then\nresolve_links.\n"],["normalize_keys","I18n","classes/I18n.html#method-c-normalize_keys","(locale, key, scope, separator = nil)","<p>Merges the given locale, key and scope into a single array of keys. Splits\nkeys that contain dots into …\n"],["normalize_paths","ActionController::Routing","classes/ActionController/Routing.html#method-c-normalize_paths","(paths)","<p>Returns an array of paths, cleaned of double-slashes and relative path\nreferences.\n<p>“\\” and “//” …\n"],["normalize_pluralization","I18n::Backend::Gettext","classes/I18n/Backend/Gettext.html#method-i-normalize_pluralization","(locale, key, value)",""],["normalize_translation_keys","I18n","classes/I18n.html#method-c-normalize_translation_keys","(*args)",""],["not_modified?","ActionController::Request","classes/ActionController/Request.html#method-i-not_modified-3F","(modified_at)",""],["now","ActionController::Flash::FlashHash","classes/ActionController/Flash/FlashHash.html#method-i-now","()","<p>Sets a flash that will not be available to the next action, only to the\ncurrent.\n\n<pre>flash.now[:message] = ...</pre>\n"],["now","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-now","()","<p>Returns an ActiveSupport::TimeWithZone instance representing the current\ntime in the time zone represented …\n"],["now","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-now","()","<p>Returns the current time in the timezone as a Time.\n"],["np_","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#method-i-np_","(msgctxt, msgid, msgid_plural, n = 1)",""],["npgettext","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#method-i-npgettext","(msgctxt, msgid, msgid_plural, n = 1)","<p>Method signatures:\n\n<pre>npgettext(&#39;Fruits&#39;, &#39;apple&#39;, &#39;apples&#39;, 2)\nnpgettext(&#39;Fruits&#39;, [&#39;apple&#39;, &#39;apples&#39;], ...</pre>\n"],["ns_","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#method-i-ns_","(msgid, msgid_plural, n = 1, separator = '|')",""],["nsgettext","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#method-i-nsgettext","(msgid, msgid_plural, n = 1, separator = '|')","<p>Method signatures:\n\n<pre>nsgettext(&#39;Fruits|apple&#39;, &#39;apples&#39;, 2)\nnsgettext([&#39;Fruits|apple&#39;, &#39;apples&#39;], 2)</pre>\n"],["nth_child","HTML::Selector","classes/HTML/Selector.html#method-i-nth_child","(a, b, of_type, reverse)","<p>Returns a lambda that can match an element against the nth-child pseudo\nclass, given the following arguments: …\n"],["nulltok","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-nulltok","(s)",""],["number?","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-number-3F","()","<p>Returns <code>true</code> if the column is either of type integer, float or\ndecimal.\n"],["number_to_currency","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_currency","(number, options = {})","<p>Formats a <code>number</code> into a currency string (e.g., $13.65). You\ncan customize the format in the <code>options</code> hash. …\n"],["number_to_human_size","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_human_size","(number, *args)","<p>Formats the bytes in <code>size</code> into a more understandable\nrepresentation (e.g., giving it 1500 yields 1.5 …\n"],["number_to_percentage","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_percentage","(number, options = {})","<p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can\ncustomize the format in the <code>options</code> hash. …\n"],["number_to_phone","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_phone","(number, options = {})","<p>Formats a <code>number</code> into a US phone number (e.g., (555)\n123-9876). You can customize the format in the  …\n"],["number_with_delimiter","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_with_delimiter","(number, *args)","<p>Formats a <code>number</code> with grouped thousands using\n<code>delimiter</code> (e.g., 12,324). You can customize the format …\n"],["number_with_precision","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_with_precision","(number, *args)","<p>Formats a <code>number</code> with the specified level of\n<code>:precision</code> (e.g., 112.32 has a precision of 2). You can …\n"],["numenc","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-numenc","(x)",""],["numtok","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-numtok","(s)",""],["objenc","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-objenc","(x)",""],["objparse","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-objparse","(ts)","<p>Parses an “object” in the sense of RFC 4627. Returns the parsed value and\nany trailing tokens. …\n"],["observe","ActiveRecord::Observer","classes/ActiveRecord/Observer.html#method-c-observe","(*models)","<p>Attaches the observer to the supplied model classes.\n"],["observe_field","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-observe_field","(field_id, options = {})","<p>Observes the field with the DOM ID specified by <code>field_id</code> and\ncalls a callback when its contents have …\n"],["observe_form","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-observe_form","(form_id, options = {})","<p>Observes the form with the DOM ID specified by <code>form_id</code> and\ncalls a callback when its contents have changed. …\n"],["observed_class","ActiveRecord::Observer","classes/ActiveRecord/Observer.html#method-c-observed_class","()","<p>The class observed by default is inferred from the observer&#39;s class\nname:\n\n<pre>assert_equal Person, PersonObserver.observed_class</pre>\n"],["observed_classes","ActiveRecord::Observer","classes/ActiveRecord/Observer.html#method-i-observed_classes","()",""],["observed_subclasses","ActiveRecord::Observer","classes/ActiveRecord/Observer.html#method-i-observed_subclasses","()",""],["observers","ActiveRecord::Observing::ClassMethods","classes/ActiveRecord/Observing/ClassMethods.html#method-i-observers","()","<p>Gets the current observers.\n"],["observers=","ActiveRecord::Observing::ClassMethods","classes/ActiveRecord/Observing/ClassMethods.html#method-i-observers-3D","(*observers)","<p>Activates the observers assigned. Examples:\n\n<pre># Calls PersonObserver.instance\nActiveRecord::Base.observers ...</pre>\n"],["odd?","ActiveSupport::CoreExtensions::Integer::EvenOdd","classes/ActiveSupport/CoreExtensions/Integer/EvenOdd.html#method-i-odd-3F","()",""],["old_datetime_format","Logger","classes/Logger.html#method-i-old_datetime_format","()",""],["old_datetime_format=","Logger","classes/Logger.html#method-i-old_datetime_format-3D","(datetime_format)",""],["old_formatter","Logger","classes/Logger.html#method-i-old_formatter","()",""],["on","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-on","(attribute)","<p>Returns <code>nil</code>, if no errors are associated with the specified\n<code>attribute</code>. Returns the error message, if …\n"],["on","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-on","(attribute)","<p>A method to return the errors associated with <code>attribute</code>, which\nreturns nil, if no errors are  associated …\n"],["on_base","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-on_base","()","<p>Returns errors assigned to the base object through <code>add_to_base</code>\naccording to the normal rules of <code>on(attribute)</code> …\n"],["on_base","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-on_base","()","<p>A method to return errors assigned to <code>base</code> object through\nadd_to_base, which returns nil, if no errors …\n"],["on_cdata_block","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_cdata_block","(string)",""],["on_characters","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_characters","(string)",""],["on_end_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_document","()",""],["on_end_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_element","(name)",""],["on_start_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_document","()",""],["on_start_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_element","(name, attrs = {})",""],["only_child","HTML::Selector","classes/HTML/Selector.html#method-i-only_child","(of_type)","<p>Creates a only child lambda. Pass <code>of-type</code> to only look at\nelements of its type.\n"],["opaque","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-opaque","()","<p>Opaque based on random generation - but changing each request?\n"],["open_session","ActionController::Integration::Runner","classes/ActionController/Integration/Runner.html#method-i-open_session","(application = nil)","<p>Open a new session instance. If a block is given, the new session is\nyielded to the block before being …\n"],["open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-open_transactions","()",""],["option_groups_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-option_groups_from_collection_for_select","(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)","<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_from_collection_for_select</code>, but groups them by …\n"],["options","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-options","()","<p>Returns the hash of options used for the macro.  For example, it would\nreturn <code>{ :class_name =&gt; &quot;Money&quot;</code> …\n"],["options","Commands::Discover","classes/Commands/Discover.html#method-i-options","()",""],["options","Commands::Info","classes/Commands/Info.html#method-i-options","()",""],["options","Commands::Install","classes/Commands/Install.html#method-i-options","()",""],["options","Commands::List","classes/Commands/List.html#method-i-options","()",""],["options","Commands::Plugin","classes/Commands/Plugin.html#method-i-options","()",""],["options","Commands::Remove","classes/Commands/Remove.html#method-i-options","()",""],["options","Commands::Source","classes/Commands/Source.html#method-i-options","()",""],["options","Commands::Sources","classes/Commands/Sources.html#method-i-options","()",""],["options","Commands::Unsource","classes/Commands/Unsource.html#method-i-options","()",""],["options","Commands::Update","classes/Commands/Update.html#method-i-options","()",""],["options","Rails::Generator::Options","classes/Rails/Generator/Options.html#method-i-options","()","<p>Each instance has an options hash that&#39;s populated by #parse.\n"],["options_for_ajax","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-options_for_ajax","(options)",""],["options_for_javascript","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-options_for_javascript","(options)",""],["options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_for_select","(container, selected = nil)","<p>Accepts a container (hash, array, enumerable, your type) and returns a\nstring of option tags. Given a …\n"],["options_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_from_collection_for_select","(collection, value_method, text_method, selected = nil)","<p>Returns a string of option tags that have been compiled by iterating over\nthe <code>collection</code> and assigning …\n"],["options_include_default?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-options_include_default-3F","(options)",""],["ord","ActiveSupport::CoreExtensions::String::Conversions","classes/ActiveSupport/CoreExtensions/String/Conversions.html#method-i-ord","()","<p>&#39;a&#39;.ord == &#39;a’ for Ruby 1.9 forward compatibility.\n"],["ord","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-ord","()","<p>Returns the codepoint of the first character in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;こんにちは&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">ord</span> <span class=\"ruby-comment\">#=&gt; 12371</span>\n</pre>\n"],["ordinalize","ActiveSupport::CoreExtensions::Integer::Inflections","classes/ActiveSupport/CoreExtensions/Integer/Inflections.html#method-i-ordinalize","()","<p>Ordinalize turns a number into an ordinal string used to denote the\nposition in an ordered sequence such …\n"],["ordinalize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-ordinalize","(number)","<p>Turns a number into an ordinal string used to denote the position in an\nordered sequence such as 1st, …\n"],["orig_delete","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-c-orig_delete","(custom_method_name, options = {})",""],["original_filename","ActionController::UploadedFile","classes/ActionController/UploadedFile.html#method-i-original_filename","()","<p>Take the basename of the upload&#39;s original filename. This handles the\nfull Windows paths given by …\n"],["original_xs","String","classes/String.html#method-i-original_xs","()",""],["output_filename","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-output_filename","()",""],["output_filename","ActiveSupport::Testing::Performance::Performer","classes/ActiveSupport/Testing/Performance/Performer.html#method-i-output_filename","()",""],["output_filename","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-i-output_filename","(printer_class)",""],["outside_transaction?","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-outside_transaction-3F","()","<p>Checks whether there is currently no transaction active. This is done by\nquerying the database driver, …\n"],["outside_transaction?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-outside_transaction-3F","()","<p>The ruby-pg driver supports inspecting the transaction status, while the\nruby-postgres driver does not. …\n"],["overlaps?","ActiveSupport::CoreExtensions::Range::Overlaps","classes/ActiveSupport/CoreExtensions/Range/Overlaps.html#method-i-overlaps-3F","(other)","<p>Compare two ranges and see if they overlap eachother\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">overlaps?</span>(<span class=\"ruby-value\">4</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">6</span>) <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">overlaps?</span>(<span class=\"ruby-value\">7</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">9</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["p_","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#method-i-p_","(msgctxt, msgid)",""],["pairparse","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-pairparse","(ts)","<p>Parses a “member” in the sense of RFC 4627. Returns the parsed values and\nany trailing tokens. …\n"],["parameterize","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-parameterize","(sep = '-')","<p>Replaces special characters in a string so that it may be used as part of a\n&#39;pretty&#39; URL.\n<p>Examples …\n"],["parameterize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-parameterize","(string, sep = '-')","<p>Replaces special characters in a string so that it may be used as part of a\n&#39;pretty&#39; URL.\n<p>Examples …\n"],["parameters","ActionController::Request","classes/ActionController/Request.html#method-i-parameters","()","<p>Returns both GET and POST parameters in a single hash.\n"],["params","ActionController::Request","classes/ActionController/Request.html#method-i-params","()",""],["parent","ActiveSupport::CoreExtensions::Module","classes/ActiveSupport/CoreExtensions/Module.html#method-i-parent","()","<p>Returns the module which contains this one according to its name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>\n  <span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">N</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">X</span> = <span class=\"ruby-constant\">M</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">N</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parent","I18n::Locale::Tag::Parents","classes/I18n/Locale/Tag/Parents.html#method-i-parent","()",""],["parent_name","ActiveSupport::CoreExtensions::Module","classes/ActiveSupport/CoreExtensions/Module.html#method-i-parent_name","()","<p>Returns the name of the module containing this one.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">M</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">N</span>.<span class=\"ruby-identifier\">parent_name</span> <span class=\"ruby-comment\"># =&gt; &quot;M&quot;</span>\n</pre>\n"],["parents","ActiveSupport::CoreExtensions::Module","classes/ActiveSupport/CoreExtensions/Module.html#method-i-parents","()","<p>Returns all the parents of this module according to its name, ordered from\nnested outwards. The receiver …\n"],["parents","I18n::Locale::Tag::Parents","classes/I18n/Locale/Tag/Parents.html#method-i-parents","()",""],["parse","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-parse","(str, now=now)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from parsed string. …\n"],["parse","ActiveSupport::XmlMini_LibXMLSAX","classes/ActiveSupport/XmlMini_LibXMLSAX.html#method-i-parse","(string)",""],["parse","ActiveSupport::XmlMini_NokogiriSAX","classes/ActiveSupport/XmlMini_NokogiriSAX.html#method-i-parse","(string)",""],["parse","CGI::Cookie","classes/CGI/Cookie.html#method-c-parse","(raw_cookie)","<p>Parses a raw cookie string into a hash of <code>cookie-name =&gt;\ncookie-object</code> pairs.\n\n<pre>cookies = CGI::Cookie::parse(&quot;raw_cookie_string&quot;) ...</pre>\n"],["parse","I18n::Backend::Gettext","classes/I18n/Backend/Gettext.html#method-i-parse","(filename)",""],["parse","Mime::Type","classes/Mime/Type.html#method-c-parse","(accept_header)",""],["parse!","Commands::Discover","classes/Commands/Discover.html#method-i-parse-21","(args)",""],["parse!","Commands::Info","classes/Commands/Info.html#method-i-parse-21","(args)",""],["parse!","Commands::Install","classes/Commands/Install.html#method-i-parse-21","(args)",""],["parse!","Commands::List","classes/Commands/List.html#method-i-parse-21","(args)",""],["parse!","Commands::Plugin","classes/Commands/Plugin.html#method-c-parse-21","(args=ARGV)",""],["parse!","Commands::Plugin","classes/Commands/Plugin.html#method-i-parse-21","(args=ARGV)",""],["parse!","Commands::Remove","classes/Commands/Remove.html#method-i-parse-21","(args)",""],["parse!","Commands::Source","classes/Commands/Source.html#method-i-parse-21","(args)",""],["parse!","Commands::Sources","classes/Commands/Sources.html#method-i-parse-21","(args)",""],["parse!","Commands::Unsource","classes/Commands/Unsource.html#method-i-parse-21","(args)",""],["parse!","Commands::Update","classes/Commands/Update.html#method-i-parse-21","(args)",""],["parse!","Rails::Generator::Options","classes/Rails/Generator/Options.html#method-i-parse-21","(args, runtime_options = {})","<p>Parse arguments into the options hash.  Classes may customize parsing\nbehavior by overriding these methods: …\n"],["parse_query","ActionController::Request","classes/ActionController/Request.html#method-i-parse_query","(qs)",""],["parser","I18n::Locale::Tag::Rfc4646","classes/I18n/Locale/Tag/Rfc4646.html#method-c-parser","()",""],["parser=","I18n::Locale::Tag::Rfc4646","classes/I18n/Locale/Tag/Rfc4646.html#method-c-parser-3D","(parser)",""],["partial_path","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-partial_path","(record_or_class, controller_path = nil)","<p>Returns plural/singular for a record or class. Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">partial_path</span>(<span class=\"ruby-identifier\">post</span>)                   <span class=\"ruby-comment\"># =&gt; &quot;posts/post&quot; ...</span>\n</pre>\n"],["partial_path","ActionView::Helpers::RecordIdentificationHelper","classes/ActionView/Helpers/RecordIdentificationHelper.html#method-i-partial_path","(*args, &block)","<p>See ActionController::RecordIdentifier.partial_path – this is just a\ndelegate to that for convenient …\n"],["password","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-password","()","<p>Gets the password for REST HTTP authentication.\n"],["password=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-password-3D","(password)","<p>Sets the password for REST HTTP authentication.\n"],["password=","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-password-3D","(password)","<p>Set password for remote service.\n"],["password_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-password_field","(object_name, method, options = {})","<p>Returns an input tag of the “password” type tailored for accessing a\nspecified attribute (identified …\n"],["password_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-password_field_tag","(name = \"password\", value = nil, options = {})","<p>Creates a password field, a masked text field that will hide the users\ninput behind a mask character. …\n"],["past?","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-past-3F","()","<p>Tells whether the Date object&#39;s date lies in the past\n"],["past?","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-past-3F","()","<p>Tells whether the DateTime object&#39;s datetime lies in the past\n"],["past?","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-past-3F","()","<p>Tells whether the Time object&#39;s time lies in the past\n"],["past?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-past-3F","()",""],["path","ActionController::Request","classes/ActionController/Request.html#method-i-path","()","<p>Returns the interpreted path to requested resource after all the\ninstallation directory of this application …\n"],["path","ActionView::Template","classes/ActionView/Template.html#method-i-path","()",""],["path_for","ActionController::Caching::Actions::ActionCachePath","classes/ActionController/Caching/Actions/ActionCachePath.html#method-c-path_for","(controller, options, infer_extension = true)",""],["path_parameters","ActionController::Request","classes/ActionController/Request.html#method-i-path_parameters","()","<p>Returns a hash with the parameters used to form the path of the request.\nReturned hash keys are strings: …\n"],["path_to_image","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-path_to_image","(source)",""],["path_to_javascript","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-path_to_javascript","(source)",""],["path_to_stylesheet","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-path_to_stylesheet","(source)",""],["path_without_extension","ActionView::Template","classes/ActionView/Template.html#method-i-path_without_extension","()",""],["path_without_format_and_extension","ActionView::Template","classes/ActionView/Template.html#method-i-path_without_format_and_extension","()",""],["perform_caching?","I18n","classes/I18n.html#method-c-perform_caching-3F","()",""],["period","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-period","()","<p>Returns the underlying TZInfo::TimezonePeriod.\n"],["period_for_local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-period_for_local","(time, dst=true)","<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances\n"],["period_for_local","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-period_for_local","(local, dst = nil)","<p>Returns the TimezonePeriod for the given local time. local can either be a\nDateTime, Time or integer …\n"],["period_for_utc","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-period_for_utc","(time)","<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances\n"],["period_for_utc","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-period_for_utc","(utc)","<p>Returns the TimezonePeriod for the given UTC time. utc can either be a\nDateTime, Time or integer timestamp …\n"],["periodically_call_remote","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-periodically_call_remote","(options = {})","<p>Periodically calls the specified url (<code>options[:url]</code>) every\n<code>options[:frequency]</code> seconds (default is 10). …\n"],["periods_for_local","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-periods_for_local","(local)","<p>Returns the set of TimezonePeriod instances that are valid for the given\nlocal time as an array. If you …\n"],["petabyte","ActiveSupport::CoreExtensions::Numeric::Bytes","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#method-i-petabyte","()",""],["petabytes","ActiveSupport::CoreExtensions::Numeric::Bytes","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#method-i-petabytes","()",""],["pgettext","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#method-i-pgettext","(msgctxt, msgid)",""],["plugin_loader","Rails::Initializer","classes/Rails/Initializer.html#method-i-plugin_loader","()",""],["plugins=","Rails::Configuration","classes/Rails/Configuration.html#method-i-plugins-3D","(plugins)",""],["plural","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-plural","(rule, replacement)","<p>Specifies a new pluralization rule and its replacement. The rule can either\nbe a string or a regular …\n"],["plural_class_name","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-plural_class_name","(record_or_class)","<p>Returns the plural class name of a record or class. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">plural_class_name</span>(<span class=\"ruby-identifier\">post</span>)             <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["plural_keys","I18n::Gettext","classes/I18n/Gettext.html#method-c-plural_keys","(locale)","<p>returns an array of plural keys for the given locale so that we can convert\nfrom gettext&#39;s integer-index …\n"],["pluralize","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-pluralize","(count, singular, plural = nil)","<p>Attempts to pluralize the <code>singular</code> word unless\n<code>count</code> is 1. If <code>plural</code> is supplied, it will use\nthat when …\n"],["pluralize","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-pluralize","()","<p>Returns the plural form of the word in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;post&quot;</span>.<span class=\"ruby-identifier\">pluralize</span>             <span class=\"ruby-comment\"># =&gt; &quot;posts&quot;</span>\n<span class=\"ruby-string\">&quot;octopus&quot;</span>.<span class=\"ruby-identifier\">pluralize</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pluralize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-pluralize","(word)","<p>Returns the plural form of the word in the string.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;post&quot;</span>.<span class=\"ruby-identifier\">pluralize</span>             <span class=\"ruby-comment\"># =&gt; &quot;posts&quot; ...</span>\n</pre>\n"],["pluralize","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-pluralize","(locale, entry, count)","<p>Picks a translation from an array according to English pluralization rules.\nIt will pick the first translation …\n"],["pluralize","I18n::Backend::Metadata","classes/I18n/Backend/Metadata.html#method-i-pluralize","(locale, entry, count)",""],["pluralize","I18n::Backend::Pluralization","classes/I18n/Backend/Pluralization.html#method-i-pluralize","(locale, entry, count)","<p>Overwrites the Base backend translate method so that it will check the\ntranslation meta data space (:i18n) …\n"],["pluralize_table_names","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-pluralize_table_names","","<p>Indicates whether table names should be the pluralized versions of the\ncorresponding class names. If …\n"],["pluralizer","I18n::Backend::Pluralization","classes/I18n/Backend/Pluralization.html#method-i-pluralizer","(locale)",""],["pluralizers","I18n::Backend::Pluralization","classes/I18n/Backend/Pluralization.html#method-i-pluralizers","()",""],["polymorphic_path","ActionController::PolymorphicRoutes","classes/ActionController/PolymorphicRoutes.html#method-i-polymorphic_path","(record_or_hash_or_array, options = {})","<p>Returns the path component of a URL for the given record. It uses\n<code>polymorphic_url</code> with <code>:routing_type</code> …\n"],["polymorphic_url","ActionController::PolymorphicRoutes","classes/ActionController/PolymorphicRoutes.html#method-i-polymorphic_url","(record_or_hash_or_array, options = {})","<p>Constructs a call to a named RESTful route for the given record and returns\nthe resulting URL string. …\n"],["pop_d","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-pop_d","()",""],["port","ActionController::Request","classes/ActionController/Request.html#method-i-port","()","<p>Returns the port number of this request as an integer.\n"],["port_string","ActionController::Request","classes/ActionController/Request.html#method-i-port_string","()","<p>Returns a port suffix like “:8080” if the port number of this request is\nnot the default HTTP …\n"],["possible_controllers","ActionController::Routing","classes/ActionController/Routing.html#method-c-possible_controllers","()","<p>Returns the array of controller names currently available to\nActionController::Routing.\n"],["post","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-post","(path, parameters = nil, headers = nil)","<p>Performs a POST request with the given parameters. See get() for more\ndetails.\n"],["post","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-post","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating POST HTTP method and set/volley the response\n"],["post","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-post","(path, body = '', headers = {})","<p>Execute a POST request. Used to create new resources.\n"],["post","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-c-post","(custom_method_name, options = {}, body = '')",""],["post","ActiveResource::CustomMethods::InstanceMethods","classes/ActiveResource/CustomMethods/InstanceMethods.html#method-i-post","(method_name, options = {}, body = nil)",""],["post?","ActionController::Request","classes/ActionController/Request.html#method-i-post-3F","()","<p>Is this a POST request?  Equivalent to <code>request.method ==\n:post</code>.\n"],["post_via_redirect","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-post_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a POST request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["postgresql_version","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-postgresql_version","()","<p>Returns the version of the connected PostgreSQL version.\n"],["prefetch_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-prefetch_primary_key-3F","(table_name = nil)","<p>Should primary key values be selected from their corresponding sequence\nbefore the insert statement? …\n"],["prefix","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-prefix","(options={})","<p>Gets the prefix for a resource&#39;s nested URL (e.g.,\n<code>prefix/collectionname/1.xml</code>) This method is regenerated …\n"],["prefix=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-prefix-3D","(value = '/')","<p>Sets the prefix for a resource&#39;s nested URL (e.g.,\n<code>prefix/collectionname/1.xml</code>). Default value is …\n"],["prefix_source","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-prefix_source","()","<p>An attribute reader for the source string for the resource path prefix. \nThis method is regenerated at …\n"],["preload_associations","ActiveRecord::AssociationPreload::ClassMethods","classes/ActiveRecord/AssociationPreload/ClassMethods.html#method-i-preload_associations","(records, associations, preload_options={})","<p>Eager loads the named associations for the given ActiveRecord record(s).\n<p>In this description, &#39;association …\n"],["preload_frameworks","Rails::Initializer","classes/Rails/Initializer.html#method-i-preload_frameworks","()","<p>Preload all frameworks specified by the Configuration#frameworks. Used by\nPassenger to ensure everything&#39;s …\n"],["prepare!","ActionController::Response","classes/ActionController/Response.html#method-i-prepare-21","()",""],["prepare_controller_class","ActionController::TestCase","classes/ActionController/TestCase.html#method-c-prepare_controller_class","(new_class)",""],["prepare_dispatcher","Rails::Initializer","classes/Rails/Initializer.html#method-i-prepare_dispatcher","()",""],["prepend","MemCache","classes/MemCache.html#method-i-prepend","(key, value)","<p>Prepend - &#39;add this data to an existing key before existing data&#39;\nPlease note the value is always …\n"],["prepend_after_filter","ActionController::Filters::ClassMethods","classes/ActionController/Filters/ClassMethods.html#method-i-prepend_after_filter","(*filters, &block)","<p>The passed <code>filters</code> will be prepended to the array of filters\nthat run <em>after</em> actions on this controller …\n"],["prepend_around_filter","ActionController::Filters::ClassMethods","classes/ActionController/Filters/ClassMethods.html#method-i-prepend_around_filter","(*filters, &block)","<p>If you <code>prepend_around_filter A.new, B.new</code>, the filter chain\nlooks like:\n\n<pre>A#before\n  B#before\n    # run ...</pre>\n"],["prepend_before_filter","ActionController::Filters::ClassMethods","classes/ActionController/Filters/ClassMethods.html#method-i-prepend_before_filter","(*filters, &block)","<p>The passed <code>filters</code> will be prepended to the filter_chain and\nwill execute before the action on this controller …\n"],["prepend_sources","Rails::Generator::Lookup::ClassMethods","classes/Rails/Generator/Lookup/ClassMethods.html#method-i-prepend_sources","(*args)","<p>Add a source to the beginning of the list.\n"],["prepend_view_path","ActionController::Base","classes/ActionController/Base.html#method-i-prepend_view_path","(path)","<p>Adds a view_path to the front of the view_paths array. This change affects\nthe current request only. …\n"],["prepend_view_path","ActionController::Base","classes/ActionController/Base.html#method-c-prepend_view_path","(path)","<p>Adds a view_path to the front of the view_paths array. If the current class\nhas no view paths, copy them …\n"],["presence","Object","classes/Object.html#method-i-presence","()","<p>Returns object if it&#39;s #present? otherwise returns nil. object.presence\nis equivalent to object.present …\n"],["present?","Object","classes/Object.html#method-i-present-3F","()","<p>An object is present if it&#39;s not blank.\n"],["preserve_encoding","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-preserve_encoding","(string)",""],["prev_month","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-prev_month","()","<p>Short-hand for months_ago(1)\n"],["prev_month","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-prev_month","()","<p>Short-hand for months_ago(1)\n"],["prev_year","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-prev_year","()","<p>Short-hand for years_ago(1)\n"],["prev_year","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-prev_year","()","<p>Short-hand for years_ago(1)\n"],["primary_key","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-primary_key","()","<p>Defines the primary key field – can be overridden in subclasses.\nOverwriting will negate any effect …\n"],["primary_key","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-primary_key","(table)","<p>Returns just a table&#39;s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-primary_key","(table)","<p>Returns just a table&#39;s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-primary_key","(name)","<p>Appends a primary key definition to the table definition. Can be called\nmultiple times, but this is probably …\n"],["primary_key=","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-primary_key-3D","(value = nil, &block)",""],["primary_key_prefix_type","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-primary_key_prefix_type","","<p>Accessor for the prefix type that will be prepended to every primary key\ncolumn name. The options are …\n"],["prime_cache","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-prime_cache","(*syms)",""],["process","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-process","(action, parameters = nil, session = nil, flash = nil, http_method = 'GET')",""],["process","Rails::Initializer","classes/Rails/Initializer.html#method-i-process","()","<p>Sequentially step through all of the available initialization routines, in\norder (view execution order …\n"],["process!","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-c-process-21","(*args, &block)","<p>Initialize and run the FastCGI instance, passing arguments through to new.\n"],["process!","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-process-21","(provider = FCGI)",""],["process_attributes_for","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-process_attributes_for","(node, options)",""],["process_each_request","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-process_each_request","(provider)",""],["process_node","HTML::FullSanitizer","classes/HTML/FullSanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::LinkSanitizer","classes/HTML/LinkSanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-process_node","(node, result, options)",""],["process_request","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-process_request","(request)",""],["profile","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-profile","()",""],["protect_against_forgery?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-protect_against_forgery-3F","()",""],["protect_against_forgery?","ActionView::TestCase","classes/ActionView/TestCase.html#method-i-protect_against_forgery-3F","()",""],["protect_from_forgery","ActionController::RequestForgeryProtection::ClassMethods","classes/ActionController/RequestForgeryProtection/ClassMethods.html#method-i-protect_from_forgery","(options = {})","<p>Turn on request forgery protection. Bear in mind that only non-GET,\nHTML/JavaScript requests are checked. …\n"],["protocol","ActionController::Request","classes/ActionController/Request.html#method-i-protocol","()","<p>Returns &#39;https://&#39; if this is an SSL request and &#39;http://&#39;\notherwise.\n"],["proxy","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-proxy","()","<p>Gets the proxy variable if a proxy is required\n"],["proxy=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-proxy-3D","(proxy)","<p>Sets the URI of the http proxy to the value in the <code>proxy</code>\nargument.\n"],["proxy=","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-proxy-3D","(proxy)","<p>Set the proxy for remote service.\n"],["proxy_class","ActiveSupport::Multibyte","classes/ActiveSupport/Multibyte.html#method-c-proxy_class","()","<p>Returns the currect proxy class\n"],["proxy_class=","ActiveSupport::Multibyte","classes/ActiveSupport/Multibyte.html#method-c-proxy_class-3D","(klass)","<p>The proxy class returned when calling mb_chars. You can use this accessor\nto configure your own proxy …\n"],["proxy_found","ActiveRecord::NamedScope::Scope","classes/ActiveRecord/NamedScope/Scope.html#method-i-proxy_found","()",""],["public_path","Rails","classes/Rails.html#method-c-public_path","()",""],["public_path=","Rails","classes/Rails.html#method-c-public_path-3D","(path)",""],["push_d","RecursiveHTTPFetcher","classes/RecursiveHTTPFetcher.html#method-i-push_d","(dir)",""],["put","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-put","(path, parameters = nil, headers = nil)","<p>Performs a PUT request with the given parameters. See get() for more\ndetails.\n"],["put","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-put","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating PUT HTTP method and set/volley the response\n"],["put","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-put","(path, body = '', headers = {})","<p>Execute a PUT request (see HTTP protocol documentation if unfamiliar). Used\nto update resources.\n"],["put","ActiveResource::CustomMethods","classes/ActiveResource/CustomMethods.html#method-c-put","(custom_method_name, options = {}, body = '')",""],["put","ActiveResource::CustomMethods::InstanceMethods","classes/ActiveResource/CustomMethods/InstanceMethods.html#method-i-put","(method_name, options = {}, body = '')",""],["put?","ActionController::Request","classes/ActionController/Request.html#method-i-put-3F","()","<p>Is this a PUT request?  Equivalent to <code>request.method == :put</code>.\n"],["put_via_redirect","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-put_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a PUT request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["query_parameters","ActionController::Request","classes/ActionController/Request.html#method-i-query_parameters","()",""],["query_string","ActionController::Request","classes/ActionController/Request.html#method-i-query_string","()","<p>Returns the query string, accounting for server idiosyncrasies.\n"],["quote","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-quote","(value, column = nil)","<p>QUOTING ==================================================\n"],["quote","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote","(value, column = nil)","<p>Quotes the column value to help prevent SQL injection attacks.\n"],["quote_column_name","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_column_name","(column_name)","<p>Quotes the column name. Defaults to no quoting.\n"],["quote_string","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_string","(s)","<p>Quotes a string, escaping any &#39; (single quote) and \\ (backslash)\ncharacters.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-quote_table_name","(name)","<p>Override to return the quoted table name. Defaults to column quoting.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-quote_table_name","(name)","<p>Checks the following cases:\n<p>table_name\n<p>“table.name”\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name","(table_name)","<p>Quotes the table name. Defaults to column name quoting.\n"],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-quoted_columns_for_index","(column_names, options = {})",""],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-quoted_columns_for_index","(column_names, options = {})","<p>Overridden by the mysql adapter for supporting index lengths\n"],["quoted_date","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_date","(value)",""],["quoted_false","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-quoted_false","()",""],["quoted_false","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_false","()",""],["quoted_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-quoted_locking_column","()","<p>Quote the column name used for optimistic locking.\n"],["quoted_true","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-quoted_true","()",""],["quoted_true","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_true","()",""],["radio_button","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-radio_button","(object_name, method, tag_value, options = {})","<p>Returns a radio button tag for accessing a specified attribute (identified\nby <code>method</code>) on an object assigned …\n"],["radio_button_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-radio_button_tag","(name, value, checked = false, options = {})","<p>Creates a radio button; use groups of radio buttons named the same to allow\nusers to select from a group …\n"],["raise","ActiveSupport::BasicObject","classes/ActiveSupport/BasicObject.html#method-i-raise","(*args)","<p>Let ActiveSupport::BasicObject at least raise exceptions.\n"],["raise_on_error_response!","MemCache","classes/MemCache.html#method-i-raise_on_error_response-21","(response)",""],["raise_unspecified_currency!","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-raise_unspecified_currency-21","()",""],["raise_unspecified_format_type!","I18n::Backend::Cldr","classes/I18n/Backend/Cldr.html#method-i-raise_unspecified_format_type-21","()",""],["random_bytes","ActiveSupport::SecureRandom","classes/ActiveSupport/SecureRandom.html#method-c-random_bytes","(n=nil)","<p>SecureRandom.random_bytes generates a random binary string.\n<p>The argument n specifies the length of the …\n"],["random_number","ActiveSupport::SecureRandom","classes/ActiveSupport/SecureRandom.html#method-c-random_number","(n=0)","<p>SecureRandom.random_number generates a random number.\n<p>If an positive integer is given as n, SecureRandom.random_number …\n"],["raw","ActionView::Helpers::RawOutputHelper","classes/ActionView/Helpers/RawOutputHelper.html#method-i-raw","(stringish)",""],["raw_connection","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-raw_connection","()","<p>Provides access to the underlying database driver for this adapter. For\nexample, this method returns …\n"],["raw_host_with_port","ActionController::Request","classes/ActionController/Request.html#method-i-raw_host_with_port","()","<p>Returns the host for this request, such as “example.com”.\n"],["raw_post","ActionController::Request","classes/ActionController/Request.html#method-i-raw_post","()","<p>Read the request body. This is useful for web services that need to work\nwith raw requests directly. …\n"],["read","ActionController::CGIHandler::ProperStream","classes/ActionController/CGIHandler/ProperStream.html#method-i-read","(*args)",""],["read","ActiveSupport::Cache::CompressedMemCacheStore","classes/ActiveSupport/Cache/CompressedMemCacheStore.html#method-i-read","(name, options = nil)",""],["read","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-read","(name, options = nil)",""],["read","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-read","(name, options = nil)",""],["read","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-read","(key, options = nil)","<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],["read","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-read","(key, options = nil)",""],["read","ActiveSupport::Cache::SynchronizedMemoryStore","classes/ActiveSupport/Cache/SynchronizedMemoryStore.html#method-i-read","(name, options = nil)",""],["read_fragment","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-read_fragment","(key, options = nil)","<p>Reads a cached fragment from the location signified by <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats) …\n"],["read_multi","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-read_multi","(*keys)","<p>Reads multiple keys from the cache.\n"],["read_multi","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-read_multi","(*names)",""],["readable_inspect","ActiveSupport::CoreExtensions::Date::Conversions","classes/ActiveSupport/CoreExtensions/Date/Conversions.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005”\n"],["readable_inspect","ActiveSupport::CoreExtensions::DateTime::Conversions","classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005 14:30:00 …\n"],["readme","Rails::Generator::Commands::Base","classes/Rails/Generator/Commands/Base.html#method-i-readme","(*args)","<p>Does nothing for all commands except Create.\n"],["readme","Rails::Generator::Commands::Create","classes/Rails/Generator/Commands/Create.html#method-i-readme","(*relative_sources)","<p>Display a README.\n"],["readme","Rails::Generator::Commands::List","classes/Rails/Generator/Commands/List.html#method-i-readme","(*args)",""],["readonly!","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-readonly-21","()","<p>Marks this record as read only.\n"],["readonly?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-readonly-3F","()","<p>Returns <code>true</code> if the record is read only. Records loaded\nthrough joins with piggy-back attributes will …\n"],["readonly?","MemCache","classes/MemCache.html#method-i-readonly-3F","()","<p>Returns whether or not the cache object was created read only.\n"],["readonly_attributes","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-readonly_attributes","()","<p>Returns an array of all the attributes that have been specified as\nreadonly.\n"],["realtime","Benchmark","classes/Benchmark.html#method-c-realtime","()",""],["receive","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-receive","(raw_email)","<p>Receives a raw email, parses it into an email object, decodes it,\ninstantiates a new mailer, and passes …\n"],["recognize_path","ActionController::Routing::RouteSet","classes/ActionController/Routing/RouteSet.html#method-i-recognize_path","(path, environment={})",""],["reconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reconnect-21","()","<p>Disconnects from the database if already connected, and establishes a new\nconnection with the database. …\n"],["reconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reconnect-21","()","<p>Close then reopen the connection.\n"],["record","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-record","()",""],["record","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-i-record","()",""],["record","Rails::Generator::Base","classes/Rails/Generator/Base.html#method-i-record","()","<p>Convenience method for generator subclasses to record a manifest.\n"],["record_entity_expansion!","REXML::Document","classes/REXML/Document.html#method-i-record_entity_expansion-21","()",""],["recycle!","ActionController::TestResponse","classes/ActionController/TestResponse.html#method-i-recycle-21","()",""],["redirect","ActionController::Response","classes/ActionController/Response.html#method-i-redirect","(url, status)",""],["redirect?","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-redirect-3F","()","<p>Returns <code>true</code> if the last response was a redirect.\n"],["redirect_to","ActionController::Base","classes/ActionController/Base.html#method-i-redirect_to","(options = {}, response_status = {})","<p>Redirects the browser to the target specified in <code>options</code>. This\nparameter can take one of three forms: …\n"],["redirect_to","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-redirect_to","(location)","<p>Redirects the browser to the given <code>location</code> using JavaScript,\nin the same form as <code>url_for</code>.\n<p>Examples:\n\n<pre># ...</pre>\n"],["redirect_to_full_url","ActionController::Base","classes/ActionController/Base.html#method-i-redirect_to_full_url","(url, status)",""],["redirect_to_url","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-redirect_to_url","()",""],["reference?","Rails::Generator::GeneratedAttribute","classes/Rails/Generator/GeneratedAttribute.html#method-i-reference-3F","()",""],["references","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-references","(*args)","<p>Adds a reference. Optionally adds a <code>type</code> column.\n<code>references</code> and <code>belongs_to</code> are acceptable.\n<p>Examples\n\n<pre>t.references(:goat) ...</pre>\n"],["references","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-references","(*args)",""],["reflect_on_aggregation","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_aggregation","(aggregation)","<p>Returns the AggregateReflection object for the named\n<code>aggregation</code> (use the symbol). Example:\n\n<pre>Account.reflect_on_aggregation(:balance) ...</pre>\n"],["reflect_on_all_aggregations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_aggregations","()","<p>Returns an array of AggregateReflection objects for all the aggregations in\nthe class.\n"],["reflect_on_all_associations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_associations","(macro = nil)","<p>Returns an array of AssociationReflection objects for all the associations\nin the class. If you only …\n"],["reflect_on_all_autosave_associations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_autosave_associations","()","<p>Returns an array of AssociationReflection objects for all associations\nwhich have <code>:autosave</code> enabled. …\n"],["reflect_on_association","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_association","(association)","<p>Returns the AssociationReflection object for the named\n<code>association</code> (use the symbol). Example:\n\n<pre>Account.reflect_on_association(:owner) ...</pre>\n"],["reflections","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflections","()","<p>Returns a hash containing all AssociationReflection objects for the current\nclass Example:\n\n<pre>Invoice.reflections ...</pre>\n"],["refresh","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-refresh","()",""],["refresh!","Rails::VendorGemSourceIndex","classes/Rails/VendorGemSourceIndex.html#method-i-refresh-21","()",""],["regexp_chunk","ActionController::Routing::OptionalFormatSegment","classes/ActionController/Routing/OptionalFormatSegment.html#method-i-regexp_chunk","()",""],["register","Mime::Type","classes/Mime/Type.html#method-c-register","(string, symbol, mime_type_synonyms = [], extension_synonyms = [], skip_lookup = false)",""],["register_alias","Mime::Type","classes/Mime/Type.html#method-c-register_alias","(string, symbol, extension_synonyms = [])","<p>Registers an alias that&#39;s not used on mime type lookup, but can be\nreferenced directly. Especially …\n"],["register_javascript_expansion","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-c-register_javascript_expansion","(expansions)","<p>Register one or more javascript files to be included when\n<code>symbol</code> is passed to <code>javascript_include_tag</code> …\n"],["register_javascript_include_default","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-c-register_javascript_include_default","(*sources)","<p>Register one or more additional JavaScript files to be included when\n<code>javascript_include_tag :defaults</code> …\n"],["register_stylesheet_expansion","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-c-register_stylesheet_expansion","(expansions)","<p>Register one or more stylesheet files to be included when\n<code>symbol</code> is passed to <code>stylesheet_link_tag</code>. This …\n"],["regular_update","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-regular_update","(other_hash)",""],["regular_writer","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["relative_path","ActionView::Template","classes/ActionView/Template.html#method-i-relative_path","()",""],["release_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-release_connection","()","<p>Signal that the thread is finished with the current connection.\n#release_connection releases the connection-thread …\n"],["release_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-release_savepoint","()",""],["reload","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-reload","()","<p>Reloads the browser&#39;s current <code>location</code> using JavaScript\n<p>Examples:\n\n<pre># Generates: window.location.reload(); ...</pre>\n"],["reload","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-reload","(options = nil)","<p>Reloads the attributes of this object from the database. The optional\noptions argument is passed to find …\n"],["reload","ActiveRecord::NamedScope::Scope","classes/ActiveRecord/NamedScope/Scope.html#method-i-reload","()",""],["reload","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-reload","()","<p>A method to reload the attributes of this object from the remote web\nservice.\n<p>Examples\n\n<pre>my_branch = Branch.find(:first) ...</pre>\n"],["reload!","I18n","classes/I18n.html#method-c-reload-21","()","<p>Tells the backend to reload translations. Used in situations like the Rails\ndevelopment environment. …\n"],["reload!","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-reload-21","()",""],["reload!","I18n::Backend::Chain","classes/I18n/Backend/Chain.html#method-i-reload-21","()",""],["reload!","I18n::Backend::Memoize","classes/I18n/Backend/Memoize.html#method-i-reload-21","()",""],["reload!","I18n::Backend::Simple::Implementation","classes/I18n/Backend/Simple/Implementation.html#method-i-reload-21","()","<p>Clean up translations hash and set initialized to false on reload!\n"],["reload!","Object","classes/Object.html#method-i-reload-21","()","<p>reloads the environment\n"],["reload!","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-reload-21","()",""],["reload_application","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-c-reload_application","()",""],["reload_handler","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-reload_handler","(signal)",""],["reload_plugins?","Rails::Configuration","classes/Rails/Configuration.html#method-i-reload_plugins-3F","()","<p>Returns true if plugin reloading is enabled.\n"],["reload_with_autosave_associations","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-reload_with_autosave_associations","(options = nil)","<p>Reloads the attributes of the object as usual and removes a mark for\ndestruction.\n"],["remote_form_for","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-remote_form_for","(record_or_name_or_array, *args, &proc)","<p>Creates a form that will submit using XMLHttpRequest in the background\ninstead of the regular reloading …\n"],["remote_function","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-remote_function","(options)","<p>Returns the JavaScript needed for a remote function. Takes the same\narguments as link_to_remote.\n<p>Example: …\n"],["remote_ip","ActionController::Request","classes/ActionController/Request.html#method-i-remote_ip","()","<p>Determines originating IP address.  REMOTE_ADDR is the standard but will\nfail if the user is behind a …\n"],["remove","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-remove","(*ids)","<p>Removes the DOM elements with the given <code>ids</code> from the page.\n<p>Example:\n\n<pre># Remove a few people\n# Generates: ...</pre>\n"],["remove","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove","(*column_names)","<p>Removes the column(s) from the table definition.\n<p>Examples\n\n<pre>t.remove(:qualification)\nt.remove(:qualification, ...</pre>\n"],["remove","Repositories","classes/Repositories.html#method-i-remove","(uri)",""],["remove_belongs_to","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_belongs_to","(*args)",""],["remove_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_column","(table_name, *column_names)","<p>Removes the column(s) from the table definition.\n<p>Examples\n\n<pre>remove_column(:suppliers, :qualification)\nremove_columns(:suppliers, ...</pre>\n"],["remove_columns","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_columns","(table_name, *column_names)",""],["remove_connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-remove_connection","(klass = self)",""],["remove_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-remove_connection","(klass)","<p>Remove the connection for this class. This will close the active connection\nand the defined connection …\n"],["remove_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_index","(table_name, options = {})","<p>Remove the given index from the table.\n<p>Remove the suppliers_name_index in the suppliers table.\n\n<pre>remove_index ...</pre>\n"],["remove_index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_index","(options = {})","<p>Removes the given index from the table.\n<p>Examples\n<p>Remove the suppliers_name_index in the suppliers table …\n"],["remove_possible_method","Module","classes/Module.html#method-i-remove_possible_method","(method)",""],["remove_references","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_references","(*args)","<p>Removes a reference. Optionally removes a <code>type</code> column.\n<code>remove_references</code> and <code>remove_belongs_to</code> are\nacceptable. …\n"],["remove_silencers!","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-remove_silencers-21","()","<p>Will remove all silencers, but leave in the filters. This is useful if your\ncontext of debugging suddenly …\n"],["remove_spec","Rails::VendorGemSourceIndex","classes/Rails/VendorGemSourceIndex.html#method-i-remove_spec","(spec)",""],["remove_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_timestamps","(table_name)","<p>Removes the timestamp columns (created_at and updated_at) from the table\ndefinition.\n<p>Examples\n\n<pre>remove_timestamps(:suppliers)</pre>\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_timestamps","()","<p>Removes the timestamp columns (created_at and updated_at) from the table.\n<p>Example\n\n<pre>t.remove_timestamps</pre>\n"],["rename","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-rename","(column_name, new_column_name)","<p>Renames a column.\n<p>Example\n\n<pre>t.rename(:description, :name)</pre>\n"],["rename_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column in a table.\n"],["rename_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column.\n<p>Example\n\n<pre>rename_column(:suppliers, :description, :name)</pre>\n"],["rename_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)","<p>Rename an index.\n<p>Rename the index_people_on_last_name index to index_users_on_last_name\n\n<pre>rename_index :people, ...</pre>\n"],["rename_key","ActiveSupport::CoreExtensions::Hash::Conversions","classes/ActiveSupport/CoreExtensions/Hash/Conversions.html#method-i-rename_key","(key, options = {})",""],["rename_table","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-rename_table","(table_name, new_name)",""],["rename_table","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rename_table","(name, new_name)","<p>Renames a table.\n"],["rename_table","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-rename_table","(name, new_name)",""],["rename_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example\n\n<pre>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)</pre>\n"],["render","ActionController::Base","classes/ActionController/Base.html#method-i-render","(options = nil, extra_options = {}, &block)","<p>Renders the content that will be returned to the browser as the response\nbody.\n<p>Rendering an action\n<p>Action …\n"],["render","ActionView::Renderable","classes/ActionView/Renderable.html#method-i-render","(view, local_assigns = {})",""],["render","ActionView::TemplateHandler","classes/ActionView/TemplateHandler.html#method-i-render","(template, local_assigns)",""],["render","ActionView::TestCase","classes/ActionView/TestCase.html#method-i-render","(options = {}, local_assigns = {}, &block)",""],["render_optional_error_file","ActionController::Rescue","classes/ActionController/Rescue.html#method-i-render_optional_error_file","(status_code)","<p>Attempts to render a static error page based on the\n<code>status_code</code> thrown, or just return headers if no …\n"],["render_template","ActionView::Template","classes/ActionView/Template.html#method-i-render_template","(view, local_assigns = {})",""],["render_to_string","ActionController::Base","classes/ActionController/Base.html#method-i-render_to_string","(options = nil, &block)","<p>Renders according to the same rules as <code>render</code>, but returns the\nresult in a string instead of sending …\n"],["render_without_template_tracking","ActionView::Renderable","classes/ActionView/Renderable.html#method-i-render_without_template_tracking","(view, local_assigns = {})",""],["reorder_characters","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-reorder_characters","(codepoints)","<p>Re-order codepoints so the string becomes canonical.\n"],["replace","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-replace","(id, *options_for_render)","<p>Replaces the “outer HTML” (i.e., the entire element, not just its contents)\nof the DOM element …\n"],["replace","MemCache","classes/MemCache.html#method-i-replace","(key, value, expiry = 0, raw = false)","<p>Add <code>key</code> to the cache with value <code>value</code> that\nexpires in <code>expiry</code> seconds, but only if <code>key</code>\nalready exists …\n"],["replace_html","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-replace_html","(id, *options_for_render)","<p>Replaces the inner HTML of the DOM element with the given <code>id</code>.\n<p><code>options_for_render</code> may be either a string …\n"],["replace_or_append!","ActiveSupport::Callbacks::CallbackChain","classes/ActiveSupport/Callbacks/CallbackChain.html#method-i-replace_or_append-21","(chain)","<p>TODO: Decompose into more Array like behavior\n"],["replay","Rails::Generator::Manifest","classes/Rails/Generator/Manifest.html#method-i-replay","(target = nil)","<p>Replay recorded actions.\n"],["report","ActiveSupport::Testing::Performance::Performer","classes/ActiveSupport/Testing/Performance/Performer.html#method-i-report","()",""],["report","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-i-report","()",""],["request_http_basic_authentication","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-request_http_basic_authentication","(realm = \"Application\")",""],["request_http_digest_authentication","ActionController::HttpAuthentication::Digest::ControllerMethods","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-request_http_digest_authentication","(realm = \"Application\", message = nil)","<p>Render output including the HTTP Digest authentication header\n"],["request_method","ActionController::Request","classes/ActionController/Request.html#method-i-request_method","()","<p>Returns the true HTTP request method as a lowercase symbol, such as\n<code>:get</code>. If the request method is not …\n"],["request_parameters","ActionController::Request","classes/ActionController/Request.html#method-i-request_parameters","()",""],["request_setup","MemCache","classes/MemCache.html#method-i-request_setup","(key)","<p>Performs setup for making a request with <code>key</code> from memcached. \nReturns the server to fetch the key from …\n"],["request_uri","ActionController::Request","classes/ActionController/Request.html#method-i-request_uri","()","<p>Returns the request URI, accounting for server idiosyncrasies. WEBrick\nincludes the full URL. IIS leaves …\n"],["request_via_redirect","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-request_via_redirect","(http_method, path, parameters = nil, headers = nil)","<p>Performs a request using the specified method, following any subsequent\nredirect. Note that the redirects …\n"],["requests","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-c-requests","()",""],["requests","ActiveResource::HttpMock","classes/ActiveResource/HttpMock.html#method-c-requests","()","<p>Returns an array of all request objects that have been sent to the mock. \nYou can use this to check if …\n"],["require_fixture_classes","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-require_fixture_classes","(table_names = nil)",""],["require_frameworks","Rails::Initializer","classes/Rails/Initializer.html#method-i-require_frameworks","()","<p>Requires all frameworks specified by the Configuration#frameworks list. By\ndefault, all frameworks ( …\n"],["require_library_or_gem","Kernel","classes/Kernel.html#method-i-require_library_or_gem","(library_name)","<p>Require a library with fallback to RubyGems.  Warnings during library\nloading are silenced to increase …\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-requires_reloading-3F","()","<p>Returns true if its safe to reload the connection between requests for\ndevelopment mode.\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-requires_reloading-3F","()",""],["rescue_action","ActionController::Rescue","classes/ActionController/Rescue.html#method-i-rescue_action","(exception)","<p>Exception handler called when the performance of an action raises an\nexception.\n"],["rescue_action_in_public","ActionController::Rescue","classes/ActionController/Rescue.html#method-i-rescue_action_in_public","(exception)","<p>Overwrite to implement public exception handling (for requests answering\nfalse to <code>local_request?</code>).   …\n"],["rescue_action_in_public!","ActionController::TestCase","classes/ActionController/TestCase.html#method-i-rescue_action_in_public-21","()","<p>Cause the action to be rescued according to the regular rules for\nrescue_action when the visitor is not …\n"],["rescue_action_locally","ActionController::Rescue","classes/ActionController/Rescue.html#method-i-rescue_action_locally","(exception)","<p>Render detailed diagnostics for unhandled exceptions rescued from a\ncontroller action.\n"],["rescue_action_without_handler","ActionController::Rescue","classes/ActionController/Rescue.html#method-i-rescue_action_without_handler","(exception)",""],["rescue_action_without_handler","ActionController::TestCase::RaiseActionExceptions","classes/ActionController/TestCase/RaiseActionExceptions.html#method-i-rescue_action_without_handler","(e)",""],["rescue_from","ActiveSupport::Rescuable::ClassMethods","classes/ActiveSupport/Rescuable/ClassMethods.html#method-i-rescue_from","(*klasses, &block)","<p>Rescue exceptions raised in controller actions.\n<p><code>rescue_from</code> receives a series of exception classes or …\n"],["rescue_with_handler","ActiveSupport::Rescuable","classes/ActiveSupport/Rescuable.html#method-i-rescue_with_handler","(exception)","<p>Tries to rescue the exception by looking up and calling a registered\nhandler.\n"],["reserved_key","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#method-i-reserved_key","(key)",""],["reset","MemCache","classes/MemCache.html#method-i-reset","()","<p>Reset the connection to all memcache servers.  This should be called if\nthere is a problem with a cache …\n"],["reset!","ActionController::Integration::Runner","classes/ActionController/Integration/Runner.html#method-i-reset-21","()","<p>Reset the current session. This is useful for testing multiple sessions in\na single test case.\n"],["reset!","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-reset-21","()","<p>Resets the instance. This can be used to reset the state information in an\nexisting session instance, …\n"],["reset!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reset-21","()","<p>Reset the state of this connection, directing the DBMS to clear\ntransactions and other connection-related …\n"],["reset!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reset-21","()",""],["reset!","ActiveResource::HttpMock","classes/ActiveResource/HttpMock.html#method-c-reset-21","()","<p>Deletes all logged requests and responses.\n"],["reset_cache","Fixtures","classes/Fixtures.html#method-c-reset_cache","(connection = nil)",""],["reset_cache_if_stale!","ActionView::ReloadableTemplate","classes/ActionView/ReloadableTemplate.html#method-i-reset_cache_if_stale-21","()",""],["reset_column_information","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-reset_column_information","()","<p>Resets all the cached information about columns, which will cause them to\nbe reloaded on the next request. …\n"],["reset_counters","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-reset_counters","(id, *counters)","<p>Resets one or more counter caches to their correct value using an SQL count\nquery.  This is useful when …\n"],["reset_cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-reset_cycle","(name = \"default\")","<p>Resets a cycle so that it starts from the first element the next time it is\ncalled. Pass in <code>name</code> to reset …\n"],["reset_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-reset_locking_column","()","<p>Reset the column used for optimistic locking back to the\n<code>lock_version</code> default.\n"],["reset_memoizations!","I18n::Backend::Memoize","classes/I18n/Backend/Memoize.html#method-i-reset_memoizations-21","(locale=nil)",""],["reset_sequence!","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-reset_sequence-21","(table, column, sequence = nil)","<p>Set the sequence to the max value of the table&#39;s column.\n"],["reset_session","ActionController::Base","classes/ActionController/Base.html#method-i-reset_session","()","<p>Resets the session by clearing out all the objects stored within and\ninitializing a new session object. …\n"],["reset_session","ActionController::Request","classes/ActionController/Request.html#method-i-reset_session","()",""],["reset_sources","Rails::Generator::Lookup::ClassMethods","classes/Rails/Generator/Lookup/ClassMethods.html#method-i-reset_sources","()","<p>Reset the source list.\n"],["resolve","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-resolve","(locale, object, subject, options = nil)","<p>Resolves a translation. If the given subject is a Symbol, it will be\ntranslated with the given options. …\n"],["resolve_link","I18n::Backend::Flatten","classes/I18n/Backend/Flatten.html#method-i-resolve_link","(locale, key)",""],["resource","ActionController::Resources","classes/ActionController/Resources.html#method-i-resource","(*entities, &block)","<p>Creates named routes for implementing verb-oriented controllers for a\nsingleton resource. A singleton …\n"],["resources","ActionController::Resources","classes/ActionController/Resources.html#method-i-resources","(*entities, &block)","<p>Creates named routes for implementing verb-oriented controllers for a\ncollection resource.\n<p>For example: …\n"],["respond_to","ActionController::MimeResponds::InstanceMethods","classes/ActionController/MimeResponds/InstanceMethods.html#method-i-respond_to","(*types, &block)","<p>Without web-service support, an action which collects the data for\ndisplaying a list of people might …\n"],["respond_to","ActiveResource::HttpMock","classes/ActiveResource/HttpMock.html#method-c-respond_to","(*args)","<p>Accepts a block which declares a set of requests and responses for the\nHttpMock to respond to in the …\n"],["respond_to?","ActionController::Reloader::BodyWrapper","classes/ActionController/Reloader/BodyWrapper.html#method-i-respond_to-3F","(symbol, include_private = false)",""],["respond_to?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-respond_to-3F","(method_id, include_private = false)",""],["respond_to?","ActiveRecord::NamedScope::Scope","classes/ActiveRecord/NamedScope/Scope.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_to?","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-respond_to-3F","(method, include_priv = false)","<p>A method to determine if an object responds to a message (e.g., a method\ncall). In Active Resource, a …\n"],["respond_to?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-respond_to-3F","(method, include_private=false)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method.\nPrivate methods are included in the search only if …\n"],["respond_to?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-respond_to-3F","(sym, include_priv = false)","<p>Ensure proxy class responds to all methods that underlying time instance\nresponds to.\n"],["respond_to?","CGI::Cookie","classes/CGI/Cookie.html#method-i-respond_to-3F","(method, include_private = false)","<p>FIXME: work around broken 1.8.7 DelegateClass#respond_to?\n"],["respond_to_without_attributes?","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-respond_to_without_attributes-3F","(method, include_priv = false)","<p>For checking <code>respond_to?</code> without searching the attributes\n(which is faster).\n"],["response_from_page_or_rjs","ActionController::Assertions::SelectorAssertions","classes/ActionController/Assertions/SelectorAssertions.html#method-i-response_from_page_or_rjs","()","<p><code>assert_select</code> and <code>css_select</code> call this to obtain\nthe content in the HTML page, or from all the RJS statements, …\n"],["responses","ActiveResource::HttpMock","classes/ActiveResource/HttpMock.html#method-c-responses","()","<p>Returns the list of requests and their mocked responses. Look up a response\nfor a request using responses.assoc …\n"],["restart!","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-restart-21","()",""],["restart_handler","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-restart_handler","(signal)",""],["restore!","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-restore-21","()",""],["retrieve_connection","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-retrieve_connection","()",""],["retrieve_connection_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-retrieve_connection_pool","(klass)",""],["returning","Object","classes/Object.html#method-i-returning","(value)","<p>Returns <code>value</code> after yielding <code>value</code> to the block.\nThis simplifies the process of constructing an object, …\n"],["reveal","BlankSlate","classes/BlankSlate.html#method-c-reveal","(name)","<p>Redefine a previously hidden method so that it may be called on a blank\nslate object.\n"],["reveal","BlankSlate","classes/BlankSlate.html#method-c-reveal","(name)","<p>Redefine a previously hidden method so that it may be called on a blank\nslate object.\n"],["reverse","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-reverse","()","<p>Reverses all characters in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;Café&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">reverse</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\">#=&gt; &#39;éfaC&#39;</span>\n</pre>\n"],["reverse_merge","ActiveSupport::CoreExtensions::Hash::ReverseMerge","classes/ActiveSupport/CoreExtensions/Hash/ReverseMerge.html#method-i-reverse_merge","(other_hash)","<p>Performs the opposite of <code>merge</code>, with the keys and values from\nthe first hash taking precedence over the …\n"],["reverse_merge","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Performs the opposite of merge, with the keys and values from the first\nhash taking precedence over the …\n"],["reverse_merge!","ActiveSupport::CoreExtensions::Hash::ReverseMerge","classes/ActiveSupport/CoreExtensions/Hash/ReverseMerge.html#method-i-reverse_merge-21","(other_hash)","<p>Performs the opposite of <code>merge</code>, with the keys and values from\nthe first hash taking precedence over the …\n"],["reverse_update","ActiveSupport::CoreExtensions::Hash::ReverseMerge","classes/ActiveSupport/CoreExtensions/Hash/ReverseMerge.html#method-i-reverse_update","(other_hash)",""],["rewind","Rails::Generator::Manifest","classes/Rails/Generator/Manifest.html#method-i-rewind","(target = nil)","<p>Rewind recorded actions.\n"],["rfc2822","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-rfc2822","()",""],["rfc822","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-rfc822","()",""],["rindex","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-rindex","(needle, offset=nil)","<p>Returns the position <em>needle</em> in the string, counting in codepoints,\nsearching backward from <em>offset</em> or …\n"],["rjust","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-rjust","(integer, padstr=' ')","<p>Works just like <code>String#rjust</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.rjust(8).to_s ...</pre>\n"],["rollback_active_record_state!","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-rollback_active_record_state-21","()","<p>Reset id and @new_record if the transaction rolls back.\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_db_transaction","()","<p>Rolls back the transaction (and turns on auto-committing). Must be done if\nthe transaction block raises …\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rollback_db_transaction","()","<p>Aborts a transaction.\n"],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rollback_to_savepoint","()",""],["root","ActionController::Routing::RouteSet::Mapper","classes/ActionController/Routing/RouteSet/Mapper.html#method-i-root","(options = {})","<p>Creates a named route called “root” for matching the root level request.\n"],["root","Rails","classes/Rails.html#method-c-root","()",""],["round_with_precision","ActiveSupport::CoreExtensions::Float::Rounding","classes/ActiveSupport/CoreExtensions/Float/Rounding.html#method-i-round_with_precision","(precision = nil)","<p>Rounds the float with the specified precision.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">x</span> = <span class=\"ruby-value\">1.337</span>\n<span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">round</span>    <span class=\"ruby-comment\"># =&gt; 1</span>\n<span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">round</span>(<span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># =&gt; 1.3</span>\n<span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">round</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["route_resources","Rails::Generator::Commands::Create","classes/Rails/Generator/Commands/Create.html#method-i-route_resources","(*resources)",""],["route_resources","Rails::Generator::Commands::Destroy","classes/Rails/Generator/Commands/Destroy.html#method-i-route_resources","(*resources)",""],["route_resources","Rails::Generator::Commands::List","classes/Rails/Generator/Commands/List.html#method-i-route_resources","(*resources)",""],["routed?","Rails::Plugin","classes/Rails/Plugin.html#method-i-routed-3F","()","<p>Returns true if the engine ships with a routing file\n"],["routing_file","Rails::Plugin","classes/Rails/Plugin.html#method-i-routing_file","()",""],["rstrip","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-rstrip","()","<p>Strips entire range of Unicode whitespace from the right of the string.\n"],["run","ActionController::Reloader","classes/ActionController/Reloader.html#method-c-run","(lock = @@default_lock)",""],["run","ActiveSupport::Callbacks::CallbackChain","classes/ActiveSupport/Callbacks/CallbackChain.html#method-i-run","(object, options = {}, &terminator)",""],["run","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-run","(result)",""],["run","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-run","()",""],["run","ActiveSupport::Testing::Performance::Profiler","classes/ActiveSupport/Testing/Performance/Profiler.html#method-i-run","()",""],["run","ActiveSupport::Testing::SetupAndTeardown::ForClassicTestUnit","classes/ActiveSupport/Testing/SetupAndTeardown/ForClassicTestUnit.html#method-i-run","(result)","<p>This redefinition is unfortunate but test/unit shows us no alternative.\nDoubly unfortunate: hax to support …\n"],["run","ActiveSupport::Testing::SetupAndTeardown::ForMiniTest","classes/ActiveSupport/Testing/SetupAndTeardown/ForMiniTest.html#method-i-run","(runner)",""],["run","Rails::Generator::Scripts::Base","classes/Rails/Generator/Scripts/Base.html#method-i-run","(args = [], runtime_options = {})","<p>Run the generator script.  Takes an array of unparsed arguments and a hash\nof parsed arguments, takes …\n"],["run","Rails::Initializer","classes/Rails/Initializer.html#method-c-run","(command = :process, configuration = Configuration.new)","<p>Runs the initializer. By default, this will invoke the #process method,\nwhich simply executes all of …\n"],["run_callbacks","ActiveSupport::Callbacks","classes/ActiveSupport/Callbacks.html#method-i-run_callbacks","(kind, options = {}, &block)","<p>Runs all the callbacks defined for the given options.\n<p>If a block is given it will be called after each …\n"],["run_gc!","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-run_gc-21","()",""],["run_in_transaction?","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-run_in_transaction-3F","()",""],["run_prepare_callbacks","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-c-run_prepare_callbacks","()",""],["run_profile","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-run_profile","(metric)",""],["run_test","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-run_test","(metric, mode)",""],["run_warmup","ActiveSupport::Testing::Performance","classes/ActiveSupport/Testing/Performance.html#method-i-run_warmup","()",""],["s_","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#method-i-s_","(msgid, separator = '|')",""],["sample","ActiveSupport::CoreExtensions::Array::RandomAccess","classes/ActiveSupport/CoreExtensions/Array/RandomAccess.html#method-i-sample","(n=nil)","<p>Backport of Array#sample based on Marc-Andre Lafortune&#39;s\ngithub.com/marcandre/backports/\n"],["sanitize","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize","(html, options = {})","<p>This <code>sanitize</code> helper will html encode all tags and strip all\nattributes that aren&#39;t specifically …\n"],["sanitize","HTML::FullSanitizer","classes/HTML/FullSanitizer.html#method-i-sanitize","(text, options = {})",""],["sanitize","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-sanitize","(text, options = {})",""],["sanitize_conditions","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-sanitize_conditions","(condition, table_name = quoted_table_name)",""],["sanitize_css","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of CSS code. Used by <code>sanitize</code> when it comes\nacross a style attribute.\n"],["sanitize_css","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of css code.  Used by #sanitize when it comes across a\nstyle attribute\n"],["sanitize_limit","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sanitize_limit","(limit)","<p>Sanitizes the given LIMIT parameter in order to prevent SQL injection.\n<p><code>limit</code> may be anything that can …\n"],["sanitize_sql","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-sanitize_sql","(condition, table_name = quoted_table_name)",""],["sanitize_sql_array","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-sanitize_sql_array","(ary)","<p>Accepts an array of conditions.  The array has each value sanitized and\ninterpolated into the SQL statement. …\n"],["sanitize_sql_for_assignment","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-sanitize_sql_for_assignment","(assignments)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_for_conditions","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-sanitize_sql_for_conditions","(condition, table_name = quoted_table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_hash","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-sanitize_sql_hash","(attrs, default_table_name = quoted_table_name, top_level = true)",""],["sanitize_sql_hash_for_assignment","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-sanitize_sql_hash_for_assignment","(attrs)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a SET\nclause.\n\n<pre class=\"ruby\">{ :<span class=\"ruby-identifier\">status</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">nil</span>, :<span class=\"ruby-identifier\">group_id</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sanitize_sql_hash_for_conditions","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-sanitize_sql_hash_for_conditions","(attrs, default_table_name = quoted_table_name, top_level = true)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a WHERE\nclause.\n\n<pre class=\"ruby\">{ :<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;foo&#39;bar&quot;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sanitizeable?","HTML::LinkSanitizer","classes/HTML/LinkSanitizer.html#method-i-sanitizeable-3F","(text)",""],["sanitizeable?","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-sanitizeable-3F","(text)",""],["save","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-save","()","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-i-save","()",""],["save","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-save","()","<p>A method to save (<code>POST</code>) or update (<code>PUT</code>) a\nresource.  It delegates to <code>create</code> if a new object, \n<code>update</code> …\n"],["save","Repositories","classes/Repositories.html#method-i-save","()",""],["save!","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-save-21","()","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save_with_validation","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-save_with_validation","(perform_validation = true)","<p>The validation process on save can be skipped by passing false. The regular\nBase#save method is replaced …\n"],["save_with_validation","ActiveResource::Validations","classes/ActiveResource/Validations.html#method-i-save_with_validation","()","<p>Validate a resource and save (POST) it to the remote web service.\n"],["save_with_validation!","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-save_with_validation-21","()","<p>Attempts to save the record just like Base#save but will raise a\nRecordInvalid exception instead of returning …\n"],["say","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-say","(message, subitem=false)",""],["say","Rails::GemBuilder","classes/Rails/GemBuilder.html#method-i-say","(message)","<p>silence the underlying builder\n"],["say_with_time","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-say_with_time","(message)",""],["schema_format","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-schema_format","","<p>Specifies the format to use when dumping the database schema with\nRails&#39; Rakefile.  If :sql, the …\n"],["schema_search_path","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_search_path","()","<p>Returns the active schema search path.\n"],["schema_search_path=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_search_path-3D","(schema_csv)","<p>Sets the schema search path to a string of comma-separated schema names.\nNames beginning with $ have …\n"],["scope?","ActiveRecord::DynamicScopeMatch","classes/ActiveRecord/DynamicScopeMatch.html#method-i-scope-3F","()",""],["scoped","ActiveRecord::NamedScope::ClassMethods","classes/ActiveRecord/NamedScope/ClassMethods.html#method-i-scoped","(scope, &block)",""],["scopes","ActiveRecord::NamedScope::ClassMethods","classes/ActiveRecord/NamedScope/ClassMethods.html#method-i-scopes","()",""],["scrape","Commands::Discover","classes/Commands/Discover.html#method-i-scrape","(uri)",""],["search","Rails::VendorGemSourceIndex","classes/Rails/VendorGemSourceIndex.html#method-i-search","(*args)",""],["second","ActiveSupport::CoreExtensions::Array::Access","classes/ActiveSupport/CoreExtensions/Array/Access.html#method-i-second","()","<p>Equal to <code>self[1]</code>.\n"],["second","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-second","()",""],["seconds","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-seconds","()",""],["seconds_since_midnight","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-seconds_since_midnight","()","<p>Seconds since midnight: DateTime.now.seconds_since_midnight\n"],["seconds_since_midnight","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-seconds_since_midnight","()","<p>Seconds since midnight: Time.now.seconds_since_midnight\n"],["secret_key","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-secret_key","()","<p>Set in /initializers/session_store.rb, and loaded even if sessions are not\nin use.\n"],["secure=","CGI::Cookie","classes/CGI/Cookie.html#method-i-secure-3D","(val)","<p>Sets whether the Cookie is a secure cookie or not.\n"],["segment_tree","ActionController::Routing::RouteSet","classes/ActionController/Routing/RouteSet.html#method-i-segment_tree","(routes)",""],["select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-select","(method, choices, options = {}, html_options = {})",""],["select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-select","(object, method, choices, options = {}, html_options = {})","<p>Create a select tag and a series of contained option tags for the provided\nobject and method. The option …\n"],["select","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-select","(pattern)","<p>Returns a collection reference by finding it through a CSS\n<code>pattern</code> in the DOM. This collection can then …\n"],["select","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select","(sql, name = nil)","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select","HTML::Selector","classes/HTML/Selector.html#method-i-select","(root)","<p>Selects and returns an array with all matching elements, beginning with one\nnode and traversing through …\n"],["select","HTML::Tag","classes/HTML/Tag.html#method-i-select","(selector, *values)",""],["select_all","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_all","(sql, name = nil)","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select_all_with_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-select_all_with_query_cache","(*args)",""],["select_date","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_date","(date = Date.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for year, month, and day)\npre-selected with the <code>date</code>. It&#39;s …\n"],["select_datetime","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_datetime","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for year, month, day, hour, and\nminute) pre-selected with the …\n"],["select_day","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_day","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the days 1 through 31 with\nthe current day selected. The …\n"],["select_first","HTML::Selector","classes/HTML/Selector.html#method-i-select_first","(root)","<p>Similar to #select but returns the first matching element. Returns\n<code>nil</code> if no element matches the selector. …\n"],["select_hour","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_hour","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the hours 0 through 23 with\nthe current hour selected. …\n"],["select_minute","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_minute","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the minutes 0 through 59 with\nthe current minute selected. …\n"],["select_month","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_month","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the months January through\nDecember with the current month …\n"],["select_one","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_one","(sql, name = nil)","<p>Returns a record hash with the column names as keys and column values as\nvalues.\n"],["select_rows","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_rows","(sql, name = nil)","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-select_rows","(sql, name = nil)","<p>DATABASE STATEMENTS ======================================\n"],["select_rows","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-select_rows","(sql, name = nil)","<p>Executes a SELECT query and returns an array of rows. Each row is an array\nof field values.\n"],["select_rows","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-select_rows","(sql, name = nil)",""],["select_second","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_second","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the seconds 0 through 59 with\nthe current second selected. …\n"],["select_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-select_tag","(name, option_tags = nil, options = {})","<p>Creates a dropdown selection box, or if the <code>:multiple</code> option\nis set to true, a multiple choice selection …\n"],["select_time","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_time","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for hour and minute) You can set\n<code>:time_separator</code> key to format …\n"],["select_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_value","(sql, name = nil)","<p>Returns a single value from a record\n"],["select_values","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_values","(sql, name = nil)","<p>Returns an array of the values of the first column in a select:\n\n<pre>select_values(&quot;SELECT id FROM companies ...</pre>\n"],["select_year","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_year","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the five years on each side\nof the current, which is selected. …\n"],["selector","HTML","classes/HTML.html#method-c-selector","(statement, *values)","<p>See HTML::Selector.new\n"],["self_and_parents","I18n::Locale::Tag::Parents","classes/I18n/Locale/Tag/Parents.html#method-i-self_and_parents","()",""],["send_data","ActionController::Streaming","classes/ActionController/Streaming.html#method-i-send_data","(data, options = {})","<p>Sends the given binary data to the browser. This method is similar to\n<code>render :text =&gt; data</code>, but also …\n"],["send_file","ActionController::Streaming","classes/ActionController/Streaming.html#method-i-send_file","(path, options = {})","<p>Sends the file, by default streaming it 4096 bytes at a time. This way the\nwhole file doesn&#39;t need …\n"],["send_response","ActionController::Base","classes/ActionController/Base.html#method-i-send_response","()",""],["sending_file?","ActionController::Response","classes/ActionController/Response.html#method-i-sending_file-3F","()",""],["sequence_name=","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-sequence_name-3D","(value = nil, &block)",""],["serialize","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-serialize","(attr_name, class_name = Object)","<p>If you have an attribute that needs to be saved to the database as an\nobject, and retrieved as the same …\n"],["serialized_attributes","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-serialized_attributes","()","<p>Returns a hash of all the attributes that have been specified for\nserialization as keys and their class …\n"],["server_port","ActionController::Request","classes/ActionController/Request.html#method-i-server_port","()",""],["server_software","ActionController::Request","classes/ActionController/Request.html#method-i-server_software","()","<p>Returns the lowercase name of the HTTP server software.\n"],["servers=","MemCache","classes/MemCache.html#method-i-servers-3D","(servers)","<p>Set the servers that the requests will be distributed between.  Entries can\nbe either strings of the …\n"],["session","ActionController::Request","classes/ActionController/Request.html#method-i-session","()",""],["session","ActionController::SessionManagement::ClassMethods","classes/ActionController/SessionManagement/ClassMethods.html#method-i-session","(*args)",""],["session","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-session","()",""],["session=","ActionController::SessionManagement::ClassMethods","classes/ActionController/SessionManagement/ClassMethods.html#method-i-session-3D","(options = {})",""],["session_enabled?","ActionController::Base","classes/ActionController/Base.html#method-i-session_enabled-3F","()",""],["session_id","ActionController::Session::AbstractStore::SessionHash","classes/ActionController/Session/AbstractStore/SessionHash.html#method-i-session_id","()",""],["session_id_column","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-session_id_column","","<p>The session id field defaults to &#39;session_id&#39;.\n"],["session_options","ActionController::Request","classes/ActionController/Request.html#method-i-session_options","()",""],["session_options","ActionController::SessionManagement::ClassMethods","classes/ActionController/SessionManagement/ClassMethods.html#method-i-session_options","()","<p>Returns the hash used to configure the session. Example use:\n\n<pre>ActionController::Base.session_options[:secure] ...</pre>\n"],["session_options=","ActionController::Request","classes/ActionController/Request.html#method-i-session_options-3D","(options)",""],["session_store","ActionController::SessionManagement::ClassMethods","classes/ActionController/SessionManagement/ClassMethods.html#method-i-session_store","()","<p>Returns the session store class currently used.\n"],["session_store=","ActionController::SessionManagement::ClassMethods","classes/ActionController/SessionManagement/ClassMethods.html#method-i-session_store-3D","(store)","<p>Set the session store to be used for keeping the session data between\nrequests. By default, sessions …\n"],["set","MemCache","classes/MemCache.html#method-i-set","(key, value, expiry = 0, raw = false)",""],["set_autoload_paths","Rails::Initializer","classes/Rails/Initializer.html#method-i-set_autoload_paths","()","<p>Set the paths from which Rails will automatically load source files, and\nthe load_once paths.\n"],["set_comment","I18n::Backend::Gettext::PoData","classes/I18n/Backend/Gettext/PoData.html#method-i-set_comment","(msgid_or_sym, comment)",""],["set_cookie","ActionController::Response","classes/ActionController/Response.html#method-i-set_cookie","(key, value)",""],["set_default_backend","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-set_default_backend","()",""],["set_fixture_class","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-set_fixture_class","(class_names = {})",""],["set_inheritance_column","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-set_inheritance_column","(value = nil, &block)","<p>Sets the name of the inheritance column to use to the given value, or (if\nthe value # is nil or false) …\n"],["set_load_path","Rails::Initializer","classes/Rails/Initializer.html#method-i-set_load_path","()","<p>Set the <code>$LOAD_PATH</code> based on the value of\nConfiguration#autoload_paths. Duplicates are removed.\n"],["set_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-set_locking_column","(value = nil, &block)","<p>Set the column to use for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["set_prefix","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-set_prefix","(value = '/')",""],["set_primary_key","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-set_primary_key","(value = nil, &block)","<p>Sets the name of the primary key column to use to the given value, or (if\nthe value is nil or false) …\n"],["set_root_path!","Rails::Configuration","classes/Rails/Configuration.html#method-i-set_root_path-21","()","<p>Set the root_path to RAILS_ROOT and canonicalize it.\n"],["set_sequence_name","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-set_sequence_name","(value = nil, &block)","<p>Sets the name of the sequence to use when generating ids to the given\nvalue, or (if the value is nil …\n"],["set_standard_conforming_strings","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-set_standard_conforming_strings","()","<p>Enable standard-conforming strings if available.\n"],["set_table_name","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-set_table_name","(value = nil, &block)","<p>Sets the table name to use to the given value, or (if the value is nil or\nfalse) to the value returned …\n"],["setup_controller_request_and_response","ActionController::TestCase","classes/ActionController/TestCase.html#method-i-setup_controller_request_and_response","()",""],["setup_fixture_accessors","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-setup_fixture_accessors","(table_names = nil)",""],["setup_fixtures","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-setup_fixtures","()",""],["setup_with_controller","ActionView::TestCase","classes/ActionView/TestCase.html#method-i-setup_with_controller","()",""],["sgettext","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#method-i-sgettext","(msgid, separator = '|')",""],["show","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-show","(*ids)","<p>Shows hidden DOM elements with the given <code>ids</code>.\n<p>Example:\n\n<pre># Show a few people\n# Generates: [&quot;person_6&quot;, &quot;person_13&quot;, ...</pre>\n"],["show_variable","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-show_variable","(name)","<p>SHOW VARIABLES LIKE &#39;name&#39;\n"],["silence","ActionController::Benchmarking::ClassMethods","classes/ActionController/Benchmarking/ClassMethods.html#method-i-silence","()","<p>Silences the logger for the duration of the block.\n"],["silence","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-silence","()","<p>Silences the logger for the duration of the block.\n"],["silence","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-i-silence","(temporary_level = ERROR)","<p>Silences the logger for the duration of the block.\n"],["silence","Logger","classes/Logger.html#method-i-silence","(temporary_level = Logger::ERROR)","<p>Silences the logger for the duration of the block.\n"],["silence!","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-silence-21","()",""],["silence_spec_warnings","Rails::VendorGemSourceIndex","classes/Rails/VendorGemSourceIndex.html#method-c-silence_spec_warnings","()",""],["silence_spec_warnings=","Rails::VendorGemSourceIndex","classes/Rails/VendorGemSourceIndex.html#method-c-silence_spec_warnings-3D","(v)",""],["silence_stream","Kernel","classes/Kernel.html#method-i-silence_stream","(stream)","<p>Silences any stream for the duration of the block.\n\n<pre>silence_stream(STDOUT) do\n  puts &#39;This will never be ...</pre>\n"],["silence_warnings","Kernel","classes/Kernel.html#method-i-silence_warnings","()","<p>Sets $VERBOSE to nil for the duration of the block and back to its original\nvalue afterwards.\n\n<pre>silence_warnings ...</pre>\n"],["silencer","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-c-silencer","","<p>Set to false to disable the silencer\n"],["silencer","Logger","classes/Logger.html#method-c-silencer","","<p>Set to false to disable the silencer\n"],["simple_format","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-simple_format","(text, html_options={})","<p>Returns <code>text</code> transformed into HTML using simple formatting\nrules. Two or more consecutive newlines(<code>\\n\\n</code> …\n"],["simple_selector","HTML::Selector","classes/HTML/Selector.html#method-i-simple_selector","(statement, values, can_negate = true)","<p>Creates a simple selector given the statement and array of substitution\nvalues.\n<p>Returns a hash with the …\n"],["since","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-since","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["since","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-since","(seconds)","<p>Returns a new DateTime representing the time a number of seconds since the\ninstance time Do not use this …\n"],["since","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-since","(time = ::Time.now)","<p>Reads best with argument:  10.minutes.since(time)\n"],["since","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-since","(seconds)","<p>Returns a new Time representing the time a number of seconds since the\ninstance time, this is basically …\n"],["since","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-since","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the future as this Duration\nrepresents.\n"],["since","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-since","(other)",""],["singleton_class","Kernel","classes/Kernel.html#method-i-singleton_class","()","<p>Returns the object&#39;s singleton class.\n"],["singleton_class","Object","classes/Object.html#method-i-singleton_class","()","<p>Returns the object&#39;s singleton class.\n"],["singular","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-singular","(rule, replacement)","<p>Specifies a new singularization rule and its replacement. The rule can\neither be a string or a regular …\n"],["singular_class_name","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-singular_class_name","(record_or_class)","<p>Returns the singular class name of a record or class. Examples:\n\n<pre>singular_class_name(post)             ...</pre>\n"],["singularize","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-singularize","()","<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n\n<pre>&quot;posts&quot;.singularize        ...</pre>\n"],["singularize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-singularize","(word)","<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n<p>Examples:\n\n<pre>&quot;posts&quot;.singularize ...</pre>\n"],["site","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-site","()","<p>Gets the URI of the REST resources to map for this class.  The site\nvariable is required for Active Resource&#39;s …\n"],["site=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-site-3D","(site)","<p>Sets the URI of the REST resources to map for this class to the value in\nthe <code>site</code> argument. The site …\n"],["site=","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-site-3D","(site)","<p>Set URI for remote service.\n"],["size","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-size","()","<p>Returns the total number of errors added. Two errors added to the same\nattribute will be counted as such. …\n"],["size","ActiveRecord::NamedScope::Scope","classes/ActiveRecord/NamedScope/Scope.html#method-i-size","()",""],["size","ActiveResource::Errors","classes/ActiveResource/Errors.html#method-i-size","()","<p>Returns the total number of errors added. Two errors added to the same\nattribute will be counted as such …\n"],["size","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-size","()","<p>Returns the number of codepoints in the string\n"],["size","Rails::VendorGemSourceIndex","classes/Rails/VendorGemSourceIndex.html#method-i-size","()",""],["skip_after_filter","ActionController::Filters::ClassMethods","classes/ActionController/Filters/ClassMethods.html#method-i-skip_after_filter","(*filters)","<p>Removes the specified filters from the <code>after</code> filter chain.\nNote that this only works for skipping method-reference …\n"],["skip_before_filter","ActionController::Filters::ClassMethods","classes/ActionController/Filters/ClassMethods.html#method-i-skip_before_filter","(*filters)","<p>Removes the specified filters from the <code>before</code> filter chain.\nNote that this only works for skipping method-reference …\n"],["skip_filter","ActionController::Filters::ClassMethods","classes/ActionController/Filters/ClassMethods.html#method-i-skip_filter","(*filters)","<p>Removes the specified filters from the filter chain. This only works for\nmethod reference (symbol) filters, …\n"],["slice","ActiveSupport::CoreExtensions::Hash::Slice","classes/ActiveSupport/CoreExtensions/Hash/Slice.html#method-i-slice","(*keys)","<p>Returns a new hash with only the given keys.\n"],["slice","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-slice","(*args)","<p>Implements Unicode-aware slice with codepoints. Slicing on one point\nreturns the codepoints for that …\n"],["slice","Hash","classes/Hash.html#method-i-slice","(*keep_keys)",""],["slice!","ActiveSupport::CoreExtensions::Hash::Slice","classes/ActiveSupport/CoreExtensions/Hash/Slice.html#method-i-slice-21","(*keys)","<p>Replaces the hash with only the given keys. Returns a hash contained the\nremoved key/value pairs\n\n<pre class=\"ruby\">{:<span class=\"ruby-identifier\">a</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["slice!","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-slice-21","(*args)","<p>Like <code>String#slice!</code>, except instead of byte offsets you specify\ncharacter offsets.\n<p>Example:\n\n<pre>s = &#39;こんにちは&#39; ...</pre>\n"],["socket","MemCache::Server","classes/MemCache/Server.html#method-i-socket","()","<p>Try to connect to the memcached server targeted by this object. Returns the\nconnected socket object on …\n"],["sortable","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-sortable","(id, options = {})","<p>Creates a script.aculo.us sortable element. Useful to recreate sortable\nelements after items get added …\n"],["sortable_element","ActionView::Helpers::ScriptaculousHelper","classes/ActionView/Helpers/ScriptaculousHelper.html#method-i-sortable_element","(element_id, options = {})","<p>Makes the element with the DOM ID specified by <code>element_id</code>\nsortable by drag-and-drop and make an Ajax …\n"],["source","ActionView::Template","classes/ActionView/Template.html#method-i-source","()",""],["source_code","ActionController::Routing::Optimisation::Optimiser","classes/ActionController/Routing/Optimisation/Optimiser.html#method-i-source_code","()",""],["source_index=","Gem","classes/Gem.html#method-c-source_index-3D","(index)",""],["source_path","Rails::Generator::Base","classes/Rails/Generator/Base.html#method-i-source_path","(relative_source)","<p>Return the full path from the source root for the given path. Example for\nsource_root = &#39;/source&#39;: …\n"],["sources","Rails::Generator::Lookup::ClassMethods","classes/Rails/Generator/Lookup/ClassMethods.html#method-i-sources","()","<p>The list of sources where we look, in order, for generators.\n"],["specification","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-specification","()",""],["specification=","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-specification-3D","(s)",""],["split","ActiveSupport::CoreExtensions::Array::Grouping","classes/ActiveSupport/CoreExtensions/Array/Grouping.html#method-i-split","(value = nil)","<p>Divides the array into one or more subarrays based on a delimiting\n<code>value</code> or the result of an optional …\n"],["split","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-split","(*args)","<p>Works just like <code>String#split</code>, with the exception that the\nitems in the resulting list are Chars instances …\n"],["split_args","Commands::Plugin","classes/Commands/Plugin.html#method-i-split_args","(args)",""],["sql_query_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-sql_query_length","()","<p>the maximum length of a SQL query\n"],["sqlite_version","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-sqlite_version","()",""],["squish","ActiveSupport::CoreExtensions::String::Filters","classes/ActiveSupport/CoreExtensions/String/Filters.html#method-i-squish","()","<p>Returns the string, first removing all whitespace on both ends of the\nstring, and then changing remaining …\n"],["squish!","ActiveSupport::CoreExtensions::String::Filters","classes/ActiveSupport/CoreExtensions/String/Filters.html#method-i-squish-21","()","<p>Performs a destructive squish. See String#squish.\n"],["ssl?","ActionController::Request","classes/ActionController/Request.html#method-i-ssl-3F","()","<p>Is this an SSL request?\n"],["ssl_options","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-ssl_options","()","<p>Returns the SSL options hash.\n"],["ssl_options=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-ssl_options-3D","(opts={})","<p>Options that will get applied to an SSL connection.\n<p><code>:key</code> - An OpenSSL::PKey::RSA or OpenSSL::PKey::DSA …\n"],["ssl_options=","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-ssl_options-3D","(opts={})","<p>Hash of options applied to Net::HTTP instance when <code>site</code>\nprotocol is &#39;https&#39;.\n"],["stale?","ActionController::Base","classes/ActionController/Base.html#method-i-stale-3F","(options)","<p>Sets the etag and/or last_modified on the response and checks it against\nthe client request. If the request …\n"],["stale?","ActionView::ReloadableTemplate","classes/ActionView/ReloadableTemplate.html#method-i-stale-3F","()",""],["standard_port","ActionController::Request","classes/ActionController/Request.html#method-i-standard_port","()","<p>Returns the standard port number for this request&#39;s protocol.\n"],["start_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_document","()",""],["start_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_element","(name, attrs = [])",""],["starts_with?","ActiveSupport::CoreExtensions::String::StartsEndsWith","classes/ActiveSupport/CoreExtensions/String/StartsEndsWith.html#method-i-starts_with-3F","(prefix)","<p>Does the string start with the specified <code>prefix</code>?\n"],["stats","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-stats","()",""],["stats","MemCache","classes/MemCache.html#method-i-stats","()","<p>Returns statistics for each memcached server.  An explanation of the\nstatistics can be found in the memcached …\n"],["std_offset","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-std_offset","()","<p>Offset from the local time where daylight savings is in effect (seconds).\nE.g.: utc_offset could be -5 …\n"],["step_with_blockless","ActiveSupport::CoreExtensions::Range::BlocklessStep","classes/ActiveSupport/CoreExtensions/Range/BlocklessStep.html#method-i-step_with_blockless","(value = 1, &block)",""],["sti_name","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-sti_name","()",""],["store","ActionController::Flash::FlashHash","classes/ActionController/Flash/FlashHash.html#method-i-store","(session, key = \"flash\")",""],["store!","Builder::CSS","classes/Builder/CSS.html#method-i-store-21","(sym, &block)",""],["store_default_translation","I18n::Backend::ActiveRecord::Missing","classes/I18n/Backend/ActiveRecord/Missing.html#method-i-store_default_translation","(locale, key, interpolations)",""],["store_default_translations","I18n::Backend::ActiveRecord::Missing","classes/I18n/Backend/ActiveRecord/Missing.html#method-i-store_default_translations","(locale, key, options = {})",""],["store_link","I18n::Backend::Flatten","classes/I18n/Backend/Flatten.html#method-i-store_link","(locale, key, link)",""],["store_translations","I18n::Backend::ActiveRecord::Implementation","classes/I18n/Backend/ActiveRecord/Implementation.html#method-i-store_translations","(locale, data, options = {})",""],["store_translations","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-store_translations","(locale, data, options = {})","<p>This method receives a locale, a data hash and options for storing\ntranslations. Should be implemented …\n"],["store_translations","I18n::Backend::Chain","classes/I18n/Backend/Chain.html#method-i-store_translations","(locale, data, options = {})",""],["store_translations","I18n::Backend::InterpolationCompiler","classes/I18n/Backend/InterpolationCompiler.html#method-i-store_translations","(locale, data, options = {})",""],["store_translations","I18n::Backend::KeyValue::Implementation","classes/I18n/Backend/KeyValue/Implementation.html#method-i-store_translations","(locale, data, options = {})",""],["store_translations","I18n::Backend::Memoize","classes/I18n/Backend/Memoize.html#method-i-store_translations","(locale, data, options = {})",""],["store_translations","I18n::Backend::Simple::Implementation","classes/I18n/Backend/Simple/Implementation.html#method-i-store_translations","(locale, data, options = {})","<p>Stores translations for the given locale in memory. This uses a deep merge\nfor the translations hash, …\n"],["strenc","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-strenc","(s)",""],["strftime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-strftime","(format)","<p>Replaces <code>%Z</code> and <code>%z</code> directives with\n<code>zone</code> and <code>formatted_offset</code>, respectively, before\npassing to Time#strftime …\n"],["strftime","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-strftime","(format, utc = Time.now.utc)","<p>Converts a time in UTC to local time and returns it as a string  according\nto the given format. The formatting …\n"],["string_to_binary","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-string_to_binary","(value)","<p>Used to convert from Strings to BLOBs\n"],["string_to_date","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-string_to_date","(string)",""],["string_to_dummy_time","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-string_to_dummy_time","(string)",""],["string_to_time","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-string_to_time","(string)",""],["stringify_keys","ActiveSupport::CoreExtensions::Hash::Keys","classes/ActiveSupport/CoreExtensions/Hash/Keys.html#method-i-stringify_keys","()","<p>Return a new hash with all keys converted to strings.\n"],["stringify_keys!","ActiveSupport::CoreExtensions::Hash::Keys","classes/ActiveSupport/CoreExtensions/Hash/Keys.html#method-i-stringify_keys-21","()","<p>Destructively convert all keys to strings.\n"],["stringify_keys!","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["strip","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-strip","()","<p>Strips entire range of Unicode whitespace from the right and left of the\nstring.\n"],["strip_links","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_links","(html)","<p>Strips all link tags from <code>text</code> leaving just the link text.\n<p>Examples\n\n<pre>strip_links(&#39;&lt;a href=&quot;http://www.rubyonrails.org&quot;&gt;Ruby ...</pre>\n"],["strip_tags","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_tags","(html)","<p>Strips all HTML tags from the <code>html</code>, including comments.  This\nuses the html-scanner tokenizer and so …\n"],["strip_whitespace!","ActionController::Assertions::DomAssertions","classes/ActionController/Assertions/DomAssertions.html#method-c-strip_whitespace-21","(nodes)",""],["strtok","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-strtok","(s)",""],["structure_dump","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-structure_dump","()","<p>Returns a string of <code>CREATE TABLE</code> SQL statement(s) for\nrecreating the entire structure of the database. …\n"],["stylesheet_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-stylesheet_link_tag","(*sources)","<p>Returns a stylesheet link tag for the sources specified as arguments. If\nyou don&#39;t specify an extension, …\n"],["stylesheet_path","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-stylesheet_path","(source)","<p>Computes the path to a stylesheet asset in the public stylesheets\ndirectory. If the <code>source</code> filename has …\n"],["subdomains","ActionController::Request","classes/ActionController/Request.html#method-i-subdomains","(tld_length = 1)","<p>Returns all the subdomains as an array, so <code>[&quot;dev&quot;,\n&quot;www&quot;]</code> would be returned for “ …\n"],["submit_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-submit_tag","(value = \"Save changes\", options = {})","<p>Creates a submit button with the text <code>value</code> as the caption.\n<p>Options\n<p><code>:confirm =&gt; &#39;question?&#39;</code> …\n"],["submit_to_remote","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-submit_to_remote","(name, value, options = {})","<p>Returns a button input tag with the element name of <code>name</code> and a\nvalue (i.e., display text) of <code>value</code> that …\n"],["subst","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-subst","(u1, u2)",""],["subtags","I18n::Locale::Tag::Simple","classes/I18n/Locale/Tag/Simple.html#method-i-subtags","()",""],["success?","ActiveResource::Response","classes/ActiveResource/Response.html#method-i-success-3F","()",""],["sum","ActiveRecord::Calculations::ClassMethods","classes/ActiveRecord/Calculations/ClassMethods.html#method-i-sum","(column_name, options = {})","<p>Calculates the sum of values on a given column. The value is returned with\nthe same data type of the …\n"],["sum","Enumerable","classes/Enumerable.html#method-i-sum","(identity = 0, &block)","<p>Calculates a sum from the elements. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">payments</span>.<span class=\"ruby-identifier\">sum</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">p</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">price</span> * <span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">tax_rate</span> }\n<span class=\"ruby-identifier\">payments</span>.<span class=\"ruby-identifier\">sum</span>(&amp;:<span class=\"ruby-identifier\">price</span>)\n</pre>\n"],["superclass_delegating_accessor","Class","classes/Class.html#method-i-superclass_delegating_accessor","(*names)",""],["superclass_delegating_reader","Class","classes/Class.html#method-i-superclass_delegating_reader","(*names)",""],["superclass_delegating_writer","Class","classes/Class.html#method-i-superclass_delegating_writer","(*names)",""],["supports_add_column?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_add_column-3F","()",""],["supports_count_distinct?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_count_distinct-3F","()","<p>Does this adapter support using DISTINCT within COUNT?  This is\n<code>true</code> for all adapters except sqlite. …\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_ddl_transactions-3F","()","<p>Does this adapter support DDL rollbacks in transactions?  That is, would\nCREATE TABLE or ALTER TABLE …\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_insert_with_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_insert_with_returning-3F","()",""],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_migrations-3F","()","<p>Does this adapter support migrations?  Backend specific, as the abstract\nadapter always returns <code>false</code> …\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_migrations-3F","()","<p>Does PostgreSQL support migrations?\n"],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_primary_key-3F","()","<p>Can this adapter determine the primary key for tables not attached to an\nActiveRecord class, such as …\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_savepoints-3F","()","<p>Does this adapter support savepoints? PostgreSQL and MySQL do, SQLite does\nnot.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_savepoints-3F","()",""],["suppress","Kernel","classes/Kernel.html#method-i-suppress","(*exception_classes)","<p>Blocks and ignores any exception passed as argument if raised within the\nblock.\n\n<pre>suppress(ZeroDivisionError) ...</pre>\n"],["suppress_messages","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-suppress_messages","()",""],["surrogate?","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-surrogate-3F","(u)",""],["svn_url?","Plugin","classes/Plugin.html#method-i-svn_url-3F","()",""],["swap","ActionController::MiddlewareStack","classes/ActionController/MiddlewareStack.html#method-i-swap","(target, *args, &block)",""],["symbolize_keys","ActiveSupport::CoreExtensions::Hash::Keys","classes/ActiveSupport/CoreExtensions/Hash/Keys.html#method-i-symbolize_keys","()","<p>Return a new hash with all keys converted to symbols.\n"],["symbolize_keys!","ActiveSupport::CoreExtensions::Hash::Keys","classes/ActiveSupport/CoreExtensions/Hash/Keys.html#method-i-symbolize_keys-21","()","<p>Destructively convert all keys to symbols.\n"],["symbolize_keys!","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-symbolize_keys-21","()",""],["symbolized_path_parameters","ActionController::Request","classes/ActionController/Request.html#method-i-symbolized_path_parameters","()","<p>The same as <code>path_parameters</code> with explicitly symbolized keys.\n"],["synchronize","Module","classes/Module.html#method-i-synchronize","(*methods)","<p>Synchronize access around a method, delegating synchronization to a\nparticular mutex. A mutex (either …\n"],["t","ActionController::Translation","classes/ActionController/Translation.html#method-i-t","(*args)",""],["t","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-t","(keys, options = {})",""],["t","I18n","classes/I18n.html#method-c-t","(*args)",""],["t!","I18n","classes/I18n.html#method-c-t-21","(key, options = {})",""],["table_alias_for","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_alias_for","(table_name)","<p>Truncates a table alias according to the limits of the current adapter.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_alias_length","()","<p>the maximum length of a table alias\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_alias_length","()","<p>Returns the configured supported identifier length supported by PostgreSQL,\nor report the default of …\n"],["table_exists?","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-table_exists-3F","()","<p>Indicates whether the table associated with this class exists\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_exists-3F","(table_name)","<p>def tables(name = nil) end\n"],["table_name","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-table_name","()","<p>Guesses the table name (in forced lower-case) based on the name of the\nclass in the inheritance hierarchy …\n"],["table_name","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-table_name","","<p>The table name defaults to &#39;sessions&#39;.\n"],["table_name=","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-table_name-3D","(value = nil, &block)",""],["table_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_name_length","()","<p>the maximum length of a table name\n"],["table_name_prefix","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-table_name_prefix","","<p>Accessor for the name of the prefix string to prepend to every table name.\nSo if set to “basecamp_”, …\n"],["table_name_suffix","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-table_name_suffix","","<p>Works like <code>table_name_prefix</code>, but appends instead of prepends\n(set to “_basecamp” gives “ …\n"],["table_structure","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-table_structure","(table_name)",""],["tableize","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-tableize","()","<p>Creates the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],["tableize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-tableize","(class_name)","<p>Create the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],["tables","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-tables","(name = nil)","<p>Returns the list of all tables in the schema search path or a specified\nschema.\n"],["tag","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-tag","(name, options = nil, open = false, escape = true)","<p>Returns an empty HTML tag of type <code>name</code> which by default is\nXHTML compliant. Set <code>open</code> to true to create …\n"],["tag","I18n::Locale::Tag","classes/I18n/Locale/Tag.html#method-c-tag","(tag)","<p>Factory method for locale tags. Delegates to the current locale tag\nimplementation.\n"],["tag","I18n::Locale::Tag::Rfc4646","classes/I18n/Locale/Tag/Rfc4646.html#method-c-tag","(tag)","<p>Parses the given tag and returns a Tag instance if it is valid. Returns\nfalse if the given tag is not …\n"],["tag","I18n::Locale::Tag::Simple","classes/I18n/Locale/Tag/Simple.html#method-c-tag","(tag)",""],["tag!","Builder::XmlBase","classes/Builder/XmlBase.html#method-i-tag-21","(sym, *args, &block)","<p>Create a tag named <code>sym</code>.  Other than the first argument which\nis the tag name, the arguments are the same …\n"],["tap","Object","classes/Object.html#method-i-tap","()","<p>Yields <code>x</code> to the block, and then returns <code>x</code>. The\nprimary purpose of this method is to “tap into” …\n"],["target!","Builder::CSS","classes/Builder/CSS.html#method-i-target-21","()","<p>Return the target of the builder\n"],["target!","Builder::XmlMarkup","classes/Builder/XmlMarkup.html#method-i-target-21","()","<p>Return the target of the builder.\n"],["teardown_fixtures","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-teardown_fixtures","()",""],["template","Rails::Generator::Commands::Create","classes/Rails/Generator/Commands/Create.html#method-i-template","(relative_source, relative_destination, template_options = {})","<p>Generate a file for a Rails application using an ERuby template. Looks up\nand evaluates a template by …\n"],["template","Rails::Generator::Commands::Destroy","classes/Rails/Generator/Commands/Destroy.html#method-i-template","(relative_source, relative_destination, file_options = {})","<p>Templates are deleted just like files and the actions take the same\nparameters, so simply alias the file …\n"],["template","Rails::Generator::Commands::List","classes/Rails/Generator/Commands/List.html#method-i-template","(relative_source, relative_destination, options = {})",""],["template","Rails::Generator::Commands::Update","classes/Rails/Generator/Commands/Update.html#method-i-template","(relative_source, relative_destination, options = {})",""],["template_format","ActionController::Request","classes/ActionController/Request.html#method-i-template_format","()","<p>Returns a symbolized version of the <code>:format</code> parameter of the\nrequest. If no format is given it returns …\n"],["template_root","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-template_root","()",""],["template_root=","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-template_root-3D","(root)",""],["terabyte","ActiveSupport::CoreExtensions::Numeric::Bytes","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#method-i-terabyte","()",""],["terabytes","ActiveSupport::CoreExtensions::Numeric::Bytes","classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#method-i-terabytes","()",""],["test","ActiveSupport::Testing::Declarative","classes/ActiveSupport/Testing/Declarative.html#method-i-test","(name, &block)","<p>test “verify something” do\n\n<pre>...</pre>\n<p>end\n"],["tests","ActionController::TestCase","classes/ActionController/TestCase.html#method-c-tests","(controller_class)","<p>Sets the controller class name. Useful if the name can&#39;t be inferred\nfrom test class. Expects <code>controller_class</code> …\n"],["tests","ActionView::TestCase","classes/ActionView/TestCase.html#method-c-tests","(helper_class)",""],["text!","Builder::XmlBase","classes/Builder/XmlBase.html#method-i-text-21","(text)","<p>Append text to the output target.  Escape any markup.  May be used within\nthe markup brackets as:\n\n<pre>builder.p ...</pre>\n"],["text!","Builder::XmlEvents","classes/Builder/XmlEvents.html#method-i-text-21","(text)",""],["text?","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-text-3F","()","<p>Returns <code>true</code> if the column is either of type string or text.\n"],["text_area","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-text_area","(object_name, method, options = {})","<p>Returns a textarea opening and closing tag set tailored for accessing a\nspecified attribute (identified …\n"],["text_area_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-text_area_tag","(name, content = nil, options = {})","<p>Creates a text input area; use a textarea for longer text inputs such as\nblog posts or descriptions. …\n"],["text_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-text_field","(object_name, method, options = {})","<p>Returns an input tag of the “text” type tailored for accessing a specified\nattribute (identified …\n"],["text_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-text_field_tag","(name, value = nil, options = {})","<p>Creates a standard text field; use these text fields to input smaller\nchunks of text like a username …\n"],["textilize","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-textilize","(text, *options)","<p>Returns the text with all the Textile codes turned into HTML tags.\n<p>You can learn more about Textile&#39;s …\n"],["textilize_without_paragraph","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-textilize_without_paragraph","(text)","<p>Returns the text with all the Textile codes turned into HTML tags, but\nwithout the bounding &lt;p&gt; …\n"],["textparse","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-textparse","(ts)","<p>Parses a “json text” in the sense of RFC 4627. Returns the parsed value and\nany trailing tokens. …\n"],["third","ActiveSupport::CoreExtensions::Array::Access","classes/ActiveSupport/CoreExtensions/Array/Access.html#method-i-third","()","<p>Equal to <code>self[2]</code>.\n"],["threadsafe!","Rails::Configuration","classes/Rails/Configuration.html#method-i-threadsafe-21","()","<p>Enable threaded mode. Allows concurrent requests to controller actions and\nmultiple database connections. …\n"],["tidy_bytes","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-tidy_bytes","()","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["tidy_bytes","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-tidy_bytes","(string)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-time","()","<p>Returns a Time or DateTime instance that represents the time in\n<code>time_zone</code>.\n"],["time_ago_in_words","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_ago_in_words","(from_time, include_seconds = false)","<p>Like distance_of_time_in_words, but where <code>to_time</code> is fixed to\n<code>Time.now</code>.\n<p>Examples\n\n<pre>time_ago_in_words(3.minutes.from_now) ...</pre>\n"],["time_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for hour, minute and optionally second)\npre-selected for accessing …\n"],["time_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-time_select","(method, options = {}, html_options = {})",""],["time_with_datetime_fallback","ActiveSupport::CoreExtensions::Time::Calculations::ClassMethods","classes/ActiveSupport/CoreExtensions/Time/Calculations/ClassMethods.html#method-i-time_with_datetime_fallback","(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0, usec=0)","<p>Returns a new Time if requested year can be accommodated by Ruby&#39;s Time\nclass (i.e., if year is within …\n"],["time_zone_options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_options_for_select","(selected = nil, priority_zones = nil, model = ::ActiveSupport::TimeZone)","<p>Returns a string of option tags for pretty much any time zone in the world.\nSupply a TimeZone name as …\n"],["time_zone_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-time_zone_select","(method, priority_zones = nil, options = {}, html_options = {})",""],["time_zone_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_select","(object, method, priority_zones = nil, options = {}, html_options = {})","<p>Return select and option tags for the given object and method, using\n#time_zone_options_for_select to …\n"],["timeout","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-timeout","()","<p>Gets the number of seconds after which requests to the REST API should time\nout.\n"],["timeout=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-timeout-3D","(timeout)","<p>Sets the number of seconds after which requests to the REST API should time\nout.\n"],["timeout=","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-timeout-3D","(timeout)","<p>Set the number of seconds after which HTTP requests to the remote service\nshould time out.\n"],["timestamped_migrations","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-timestamped_migrations","","<p>Specify whether or not to use timestamps for migration numbers\n"],["timestamps","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-timestamps","()","<p>Adds timestamps (created_at and updated_at) columns to the table. See\nSchemaStatements#add_timestamps …\n"],["timestamps","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-timestamps","(*args)","<p>Appends <code>:datetime</code> columns <code>:created_at</code> and\n<code>:updated_at</code> to the table.\n"],["titlecase","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-titlecase","()",""],["titleize","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-titleize","()","<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],["titleize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-titleize","(word)","<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],["to","ActiveSupport::CoreExtensions::Array::Access","classes/ActiveSupport/CoreExtensions/Array/Access.html#method-i-to","(position)","<p>Returns the beginning of the array up to <code>position</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">to</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; %w( a )</span>\n<span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">to</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to","ActiveSupport::CoreExtensions::String::Access","classes/ActiveSupport/CoreExtensions/String/Access.html#method-i-to","(position)","<p>Returns the beginning of the string up to the <code>position</code>\ntreating the string as an array (where 0 is the …\n"],["to_a","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_a","()",""],["to_a","I18n::Locale::Tag::Rfc4646","classes/I18n/Locale/Tag/Rfc4646.html#method-i-to_a","()",""],["to_a","I18n::Locale::Tag::Simple","classes/I18n/Locale/Tag/Simple.html#method-i-to_a","()",""],["to_date","ActiveSupport::CoreExtensions::Date::Conversions","classes/ActiveSupport/CoreExtensions/Date/Conversions.html#method-i-to_date","()","<p>A method to keep Time, Date and DateTime instances interchangeable on\nconversions. In this case, it simply …\n"],["to_date","ActiveSupport::CoreExtensions::DateTime::Conversions","classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#method-i-to_date","()","<p>Converts self to a Ruby Date object; time portion is discarded\n"],["to_date","ActiveSupport::CoreExtensions::String::Conversions","classes/ActiveSupport/CoreExtensions/String/Conversions.html#method-i-to_date","()",""],["to_date","ActiveSupport::CoreExtensions::Time::Conversions","classes/ActiveSupport/CoreExtensions/Time/Conversions.html#method-i-to_date","()","<p>Converts a Time object to a Date, dropping hour, minute, and second\nprecision.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">my_time</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_datetime","ActiveSupport::CoreExtensions::Date::Conversions","classes/ActiveSupport/CoreExtensions/Date/Conversions.html#method-i-to_datetime","()","<p>Converts a Date instance to a DateTime, where the time is set to the\nbeginning of the day and UTC offset …\n"],["to_datetime","ActiveSupport::CoreExtensions::DateTime::Conversions","classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#method-i-to_datetime","()","<p>To be able to keep Times, Dates and DateTimes interchangeable on\nconversions\n"],["to_datetime","ActiveSupport::CoreExtensions::String::Conversions","classes/ActiveSupport/CoreExtensions/String/Conversions.html#method-i-to_datetime","()",""],["to_datetime","ActiveSupport::CoreExtensions::Time::Conversions","classes/ActiveSupport/CoreExtensions/Time/Conversions.html#method-i-to_datetime","()","<p>Converts a Time instance to a Ruby DateTime instance, preserving UTC\noffset.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">my_time</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>    <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_datetime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_datetime","()",""],["to_f","ActiveSupport::CoreExtensions::DateTime::Conversions","classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#method-i-to_f","()","<p>Converts self to a floating-point number of seconds since the Unix epoch\n"],["to_f","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_f","()",""],["to_formatted_s","ActiveSupport::CoreExtensions::Array::Conversions","classes/ActiveSupport/CoreExtensions/Array/Conversions.html#method-i-to_formatted_s","(format = :default)","<p>Converts a collection of elements into a formatted string by calling\n<code>to_s</code> on all elements and joining …\n"],["to_formatted_s","ActiveSupport::CoreExtensions::BigDecimal::Conversions","classes/ActiveSupport/CoreExtensions/BigDecimal/Conversions.html#method-i-to_formatted_s","(format = DEFAULT_STRING_FORMAT)",""],["to_formatted_s","ActiveSupport::CoreExtensions::Date::Conversions","classes/ActiveSupport/CoreExtensions/Date/Conversions.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See DATE_FORMATS for predefined formats.\n<p>This method is aliased to <code>to_s</code> …\n"],["to_formatted_s","ActiveSupport::CoreExtensions::DateTime::Conversions","classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See Time::DATE_FORMATS for predefined\nformats.\n<p>This method is aliased to …\n"],["to_formatted_s","ActiveSupport::CoreExtensions::Range::Conversions","classes/ActiveSupport/CoreExtensions/Range/Conversions.html#method-i-to_formatted_s","(format = :default)","<p>Gives a human readable format of the range.\n<p>Example\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">100</span>].<span class=\"ruby-identifier\">to_formatted_s</span> <span class=\"ruby-comment\"># =&gt; &quot;1..100&quot;</span>\n</pre>\n"],["to_formatted_s","ActiveSupport::CoreExtensions::Time::Conversions","classes/ActiveSupport/CoreExtensions/Time/Conversions.html#method-i-to_formatted_s","(format = :default)","<p>Converts to a formatted string. See DATE_FORMATS for builtin formats.\n<p>This method is aliased to <code>to_s</code>. …\n"],["to_formatted_s","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_formatted_s","(format = :default)",""],["to_hash","ActionController::Session::AbstractStore::SessionHash","classes/ActionController/Session/AbstractStore/SessionHash.html#method-i-to_hash","()",""],["to_hash","ActiveSupport::XmlMini_Nokogiri::Conversions::Document","classes/ActiveSupport/XmlMini_Nokogiri/Conversions/Document.html#method-i-to_hash","()",""],["to_hash","ActiveSupport::XmlMini_Nokogiri::Conversions::Node","classes/ActiveSupport/XmlMini_Nokogiri/Conversions/Node.html#method-i-to_hash","(hash = {})","<p>Convert XML document to hash\n<p>hash &mdash; Hash to merge the converted element into.\n\n"],["to_hash","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a Hash with String keys.\n"],["to_hash","LibXML::Conversions::Document","classes/LibXML/Conversions/Document.html#method-i-to_hash","()",""],["to_hash","LibXML::Conversions::Node","classes/LibXML/Conversions/Node.html#method-i-to_hash","(hash={})","<p>Convert XML document to hash\n<p>hash &mdash; Hash to merge the converted element into.\n\n"],["to_i","ActiveSupport::CoreExtensions::DateTime::Conversions","classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#method-i-to_i","()","<p>Converts self to an integer number of seconds since the Unix epoch\n"],["to_i","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_i","()",""],["to_json","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-to_json","(options = {})","<p>Returns a JSON string representing the model. Some configuration is\navailable through <code>options</code>.\n<p>The option …\n"],["to_json","ActiveSupport::JSON::Variable","classes/ActiveSupport/JSON/Variable.html#method-i-to_json","(options=nil)",""],["to_json","Object","classes/Object.html#method-i-to_json","(options = nil)","<p>Dumps object in JSON (JavaScript Object Notation). See www.json.org for\nmore info.\n"],["to_local","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-to_local","(utc)","<p>Converts a UTC DateTime to local time based on the offset of this period.\n"],["to_options","ActiveSupport::CoreExtensions::Hash::Keys","classes/ActiveSupport/CoreExtensions/Hash/Keys.html#method-i-to_options","()",""],["to_options!","ActiveSupport::CoreExtensions::Hash::Keys","classes/ActiveSupport/CoreExtensions/Hash/Keys.html#method-i-to_options-21","()",""],["to_options!","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_param","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-to_param","()","<p>Returns a String, which Action Pack uses for constructing an URL to this\nobject. The default implementation …\n"],["to_param","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-to_param","()","<p>Allows Active Resource objects to be used as parameters in Action Pack URL\ngeneration.\n"],["to_param","ActiveSupport::CoreExtensions::Array::Conversions","classes/ActiveSupport/CoreExtensions/Array/Conversions.html#method-i-to_param","()","<p>Calls <code>to_param</code> on all its elements and joins the result with\nslashes. This is used by <code>url_for</code> in Action …\n"],["to_param","ActiveSupport::CoreExtensions::Hash::Conversions","classes/ActiveSupport/CoreExtensions/Hash/Conversions.html#method-i-to_param","(namespace = nil)",""],["to_param","FalseClass","classes/FalseClass.html#method-i-to_param","()",""],["to_param","NilClass","classes/NilClass.html#method-i-to_param","()",""],["to_param","Object","classes/Object.html#method-i-to_param","()",""],["to_param","TrueClass","classes/TrueClass.html#method-i-to_param","()",""],["to_plain_segments","ActionController::Routing::RouteSet","classes/ActionController/Routing/RouteSet.html#method-i-to_plain_segments","(str)","<p>this must be really fast\n"],["to_prepare","ActionController::Dispatcher","classes/ActionController/Dispatcher.html#method-c-to_prepare","(identifier = nil, &block)","<p>Add a preparation callback. Preparation callbacks are run before every\nrequest in development mode, and …\n"],["to_prepare","Rails::Configuration","classes/Rails/Configuration.html#method-i-to_prepare","(&callback)","<p>Add a preparation callback that will run before every request in\ndevelopment mode, or before the first …\n"],["to_proc","Symbol","classes/Symbol.html#method-i-to_proc","()","<p>Turns the symbol into a simple proc, which is especially useful for\nenumerations. Examples:\n\n<pre># The same ...</pre>\n"],["to_query","ActiveSupport::CoreExtensions::Array::Conversions","classes/ActiveSupport/CoreExtensions/Array/Conversions.html#method-i-to_query","(key)","<p>Converts an array into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],["to_query","ActiveSupport::CoreExtensions::Hash::Conversions","classes/ActiveSupport/CoreExtensions/Hash/Conversions.html#method-i-to_query","(namespace = nil)","<p>Converts a hash into a string suitable for use as a URL query string. An\noptional <code>namespace</code> can be passed …\n"],["to_query","Object","classes/Object.html#method-i-to_query","(key)","<p>Converts an object into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],["to_s","ActionController::Routing::OptionalFormatSegment","classes/ActionController/Routing/OptionalFormatSegment.html#method-i-to_s","()",""],["to_s","ActionView::Template::Path","classes/ActionView/Template/Path.html#method-i-to_s","()",""],["to_s","ActiveResource::Request","classes/ActiveResource/Request.html#method-i-to_s","()",""],["to_s","ActiveResource::SSLError","classes/ActiveResource/SSLError.html#method-i-to_s","()",""],["to_s","ActiveResource::TimeoutError","classes/ActiveResource/TimeoutError.html#method-i-to_s","()",""],["to_s","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-to_s","()",""],["to_s","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_s","(format = :default)","<p><code>:db</code> format outputs time in UTC; all others output time in\nlocal. Uses TimeWithZone&#39;s <code>strftime</code>, so …\n"],["to_s","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-to_s","()","<p>Returns a textual representation of this time zone.\n"],["to_s","CGI::Cookie","classes/CGI/Cookie.html#method-i-to_s","()","<p>Converts the Cookie to its string representation.\n"],["to_s","I18n::Locale::Tag::Rfc4646","classes/I18n/Locale/Tag/Rfc4646.html#method-i-to_s","()",""],["to_s","I18n::Locale::Tag::Simple","classes/I18n/Locale/Tag/Simple.html#method-i-to_s","()",""],["to_s","Mime::Type","classes/Mime/Type.html#method-i-to_s","()",""],["to_s","Plugin","classes/Plugin.html#method-i-to_s","()",""],["to_s","SourceAnnotationExtractor::Annotation","classes/SourceAnnotationExtractor/Annotation.html#method-i-to_s","(options={})","<p>Returns a representation of the annotation that looks like this:\n\n<pre>[126] [TODO] This algorithm is simple ...</pre>\n"],["to_s","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-to_s","()","<p>Returns a friendlier version of the identifier.\n"],["to_sentence","ActiveSupport::CoreExtensions::Array::Conversions","classes/ActiveSupport/CoreExtensions/Array/Conversions.html#method-i-to_sentence","(options = {})","<p>Converts the array to a comma-separated sentence where the last element is\njoined by the connector word. …\n"],["to_sql","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-to_sql","()","<p>Returns a String whose contents are the column definitions concatenated\ntogether. This string can then …\n"],["to_str","ActionView::Template::Path","classes/ActionView/Template/Path.html#method-i-to_str","()",""],["to_str","Mime::Type","classes/Mime/Type.html#method-i-to_str","()",""],["to_sym","I18n::Locale::Tag::Rfc4646","classes/I18n/Locale/Tag/Rfc4646.html#method-i-to_sym","()",""],["to_sym","I18n::Locale::Tag::Simple","classes/I18n/Locale/Tag/Simple.html#method-i-to_sym","()",""],["to_sym","Mime::Type","classes/Mime/Type.html#method-i-to_sym","()",""],["to_time","ActiveSupport::CoreExtensions::Date::Conversions","classes/ActiveSupport/CoreExtensions/Date/Conversions.html#method-i-to_time","(form = :local)","<p>Converts a Date instance to a Time, where the time is set to the beginning\nof the day. The timezone can …\n"],["to_time","ActiveSupport::CoreExtensions::DateTime::Conversions","classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#method-i-to_time","()","<p>Attempts to convert self to a Ruby Time object; returns self if out of\nrange of Ruby Time class If self …\n"],["to_time","ActiveSupport::CoreExtensions::String::Conversions","classes/ActiveSupport/CoreExtensions/String/Conversions.html#method-i-to_time","(form = :utc)","<p>Form can be either :utc (default) or :local.\n"],["to_time","ActiveSupport::CoreExtensions::Time::Conversions","classes/ActiveSupport/CoreExtensions/Time/Conversions.html#method-i-to_time","()","<p>A method to keep Time, Date and DateTime instances interchangeable on\nconversions. In this case, it simply …\n"],["to_time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_time","()","<p>A TimeWithZone acts like a Time, so just return <code>self</code>.\n"],["to_utc","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-to_utc","(local)","<p>Converts a local DateTime to UTC based on the offset of this period.\n"],["to_utc_offset_s","ActiveSupport::CoreExtensions::Numeric::Conversions","classes/ActiveSupport/CoreExtensions/Numeric/Conversions.html#method-i-to_utc_offset_s","(colon=true)","<p>Assumes self represents an offset from UTC in seconds (as returned from\nTime#utc_offset) and turns this …\n"],["to_xml","ActiveRecord::Errors","classes/ActiveRecord/Errors.html#method-i-to_xml","(options={})","<p>Returns an XML representation of this error object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Company</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">validates_presence_of</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_xml","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-to_xml","(options = {}, &block)","<p>Builds an XML document to represent the model. Some configuration is\navailable through <code>options</code>. However …\n"],["to_xml","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-to_xml","(options={})","<p>Converts the resource to an XML string representation.\n<p>Options\n<p>The <code>options</code> parameter is handed off to the …\n"],["to_xml","ActiveSupport::CoreExtensions::Array::Conversions","classes/ActiveSupport/CoreExtensions/Array/Conversions.html#method-i-to_xml","(options = {})","<p>Returns a string that represents this array in XML by sending\n<code>to_xml</code> to each element. Active Record collections …\n"],["to_xml","ActiveSupport::CoreExtensions::Hash::Conversions","classes/ActiveSupport/CoreExtensions/Hash/Conversions.html#method-i-to_xml","(options = {})",""],["to_xs","String","classes/String.html#method-i-to_xs","()","<p>XML escaped version of to_s\n"],["to_yaml","ActiveSupport::CoreExtensions::BigDecimal::Conversions","classes/ActiveSupport/CoreExtensions/BigDecimal/Conversions.html#method-i-to_yaml","(opts = {})","<p>This emits the number without any scientific notation. This is better than\nself.to_f.to_s since it doesn&#39;t …\n"],["to_yaml","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-to_yaml","(*args)",""],["to_yaml","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_yaml","(options = {})",""],["today","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-today","()","<p>Return the current date in this time zone.\n"],["today?","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-today-3F","()","<p>Tells whether the Date object&#39;s date is today\n"],["today?","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-today-3F","()","<p>Tells whether the Time object&#39;s time is today\n"],["today?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-today-3F","()",""],["toggle","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-toggle","(*ids)","<p>Toggles the visibility of the DOM elements with the given <code>ids</code>.\nExample:\n\n<pre># Show a few people\n# Generates: ...</pre>\n"],["toggle","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-toggle","(attribute)","<p>Assigns to <code>attribute</code> the boolean opposite of\n<code>attribute?</code>. So if the predicate returns <code>true</code> the\nattribute …\n"],["toggle!","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-toggle-21","(attribute)","<p>Wrapper around <code>toggle</code> that saves the record. This method\ndiffers from its non-bang version in that it …\n"],["tok","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-tok","(s)","<p>Scans the first token in s and returns a 3-element list, or nil if s does\nnot begin with a valid token. …\n"],["tokenize","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-tokenize","(text, options)",""],["tokenize","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-tokenize","(text, options)",""],["tokenize","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#method-i-tokenize","(str)","<p>tokenize(“foo %{bar} baz %%{buz}”) # =&gt; [“foo ”, “%{bar}”, “ baz …\n"],["tomorrow","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-tomorrow","()","<p>Convenience method which returns a new Date/DateTime representing the time\n1 day since the instance time …\n"],["tomorrow","ActiveSupport::CoreExtensions::Date::Calculations::ClassMethods","classes/ActiveSupport/CoreExtensions/Date/Calculations/ClassMethods.html#method-i-tomorrow","()","<p>Returns a new Date representing the date 1 day after today (i.e.\ntomorrow&#39;s date).\n"],["tomorrow","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-tomorrow","()","<p>Convenience method which returns a new Time representing the time 1 day\nsince the instance time\n"],["touch","ActiveRecord::Timestamp","classes/ActiveRecord/Timestamp.html#method-i-touch","(attribute = nil)","<p>Saves the record with the updated_at/on attributes set to the current time.\nIf the save fails because …\n"],["transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction","(options = {})","<p>Runs the given block in a database transaction, and returns the result of\nthe block.\n<p>Nested transactions …\n"],["transaction","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-transaction","(&block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction_joinable=","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-transaction_joinable-3D","(joinable)",""],["translate","ActionController::Translation","classes/ActionController/Translation.html#method-i-translate","(*args)",""],["translate","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-translate","(keys, options = {})","<p>Delegates to I18n#translate but also performs two additional functions.\nFirst, it&#39;ll catch MissingTranslationData …\n"],["translate","I18n","classes/I18n.html#method-c-translate","(*args)","<p>Translates, pluralizes and interpolates a given key using a given locale,\nscope, and default, as well …\n"],["translate","I18n::Backend::ActiveRecord::Missing","classes/I18n/Backend/ActiveRecord/Missing.html#method-i-translate","(locale, key, options = {})",""],["translate","I18n::Backend::Base","classes/I18n/Backend/Base.html#method-i-translate","(locale, key, options = {})",""],["translate","I18n::Backend::Cache","classes/I18n/Backend/Cache.html#method-i-translate","(*args)",""],["translate","I18n::Backend::Chain","classes/I18n/Backend/Chain.html#method-i-translate","(locale, key, options = {})",""],["translate","I18n::Backend::Fallbacks","classes/I18n/Backend/Fallbacks.html#method-i-translate","(locale, key, options = {})","<p>Overwrites the Base backend translate method so that it will try each\nlocale given by I18n.fallbacks …\n"],["translate","I18n::Backend::Metadata","classes/I18n/Backend/Metadata.html#method-i-translate","(locale, key, options = {})",""],["translate!","I18n","classes/I18n.html#method-c-translate-21","(key, options = {})",""],["translation_metadata","I18n::Backend::Metadata","classes/I18n/Backend/Metadata.html#method-c-translation_metadata","()",""],["translation_metadata=","I18n::Backend::Metadata","classes/I18n/Backend/Metadata.html#method-c-translation_metadata-3D","(translation_metadata)",""],["translations","I18n::Backend::Simple::Implementation","classes/I18n/Backend/Simple/Implementation.html#method-i-translations","()",""],["transliterate","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-transliterate","(string)","<p>Replaces accented characters with their ascii equivalents.\n"],["transliterate","I18n","classes/I18n.html#method-c-transliterate","(*args)","<p>Transliterates UTF-8 characters to ASCII. By default this method will\ntransliterate only Latin strings …\n"],["transliterate","I18n::Backend::Transliterator","classes/I18n/Backend/Transliterator.html#method-i-transliterate","(locale, string, replacement = nil)","<p>Given a locale and a UTF-8 string, return the locale&#39;s ASCII\napproximation for the string.\n"],["transliterate","I18n::Backend::Transliterator::HashTransliterator","classes/I18n/Backend/Transliterator/HashTransliterator.html#method-i-transliterate","(string, replacement = nil)",""],["transliterate","I18n::Backend::Transliterator::ProcTransliterator","classes/I18n/Backend/Transliterator/ProcTransliterator.html#method-i-transliterate","(string, replacement = nil)",""],["truetok","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-truetok","(s)",""],["truncate","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-truncate","(text, *args)","<p>Truncates a given <code>text</code> after a given <code>:length</code> if\n<code>text</code> is longer than <code>:length</code> (defaults to 30). The\nlast …\n"],["try","NilClass","classes/NilClass.html#method-i-try","(*args)",""],["try","Object","classes/Object.html#method-i-try","(method, *args, &block)","<p>Invokes the method identified by the symbol <code>method</code>, passing it\nany arguments  and/or the block specified, …\n"],["try_to_load_dependency","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-try_to_load_dependency","(file_name)",""],["tv_sec","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-tv_sec","()",""],["type_cast","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-type_cast","(value)","<p>Casts value (which is a String) to an appropriate instance.\n"],["type_cast_code","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-i-type_cast_code","(var_name)",""],["type_to_sql","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to MySQL-specific data types.\n"],["type_to_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to PostgreSQL-specific data types.\n"],["u_unpack","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-u_unpack","(string)","<p>Unpack the string at codepoints boundaries. Raises an EncodingError when\nthe encoding of the string isn&#39;t …\n"],["ucharcopy","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-ucharcopy","(t, s, i)","<p>Copies the valid UTF-8 bytes of a single character from string s at\nposition i to I/O object t, and returns …\n"],["ucharenc","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-ucharenc","(a, i, u)","<p>Encodes unicode character u as UTF-8 bytes in string a at position i.\nReturns the number of bytes written. …\n"],["uncached","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-uncached","()","<p>Disable the query cache within the block.\n"],["uncached","ActiveRecord::QueryCache::ClassMethods","classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-uncached","(&block)","<p>Disable the query cache within the block if Active Record is configured.\n"],["uncountable","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-uncountable","(*words)","<p>Add uncountable words that shouldn&#39;t be attempted inflected.\n<p>Examples:\n\n<pre>uncountable &quot;money&quot;\nuncountable ...</pre>\n"],["undef_my_compiled_methods!","ActionView::ReloadableTemplate","classes/ActionView/ReloadableTemplate.html#method-i-undef_my_compiled_methods-21","()","<p>remove any compiled methods that look like they might belong to me\n"],["underscore","ActiveSupport::CoreExtensions::String::Inflections","classes/ActiveSupport/CoreExtensions/String/Inflections.html#method-i-underscore","()","<p>The reverse of <code>camelize</code>. Makes an underscored, lowercase form\nfrom the expression in the string.\n<p><code>underscore</code> …\n"],["underscore","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-underscore","(camel_cased_word)","<p>The reverse of <code>camelize</code>. Makes an underscored, lowercase form\nfrom the expression in the string.\n<p>Changes …\n"],["unescape","Object","classes/Object.html#method-i-unescape","(str, escaped = @regexp[:ESCAPED])",""],["unescape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-unescape_bytea","(original_value)","<p>Unescapes bytea output from a database to the binary string it represents.\nNOTE: This is NOT an inverse …\n"],["unescape_rjs","ActionController::Assertions::SelectorAssertions","classes/ActionController/Assertions/SelectorAssertions.html#method-i-unescape_rjs","(rjs_string)","<p>Unescapes a RJS string.\n"],["uninstall","Plugin","classes/Plugin.html#method-i-uninstall","()",""],["unmarshal","ActiveRecord::SessionStore::Session","classes/ActiveRecord/SessionStore/Session.html#method-c-unmarshal","(data)",""],["unmarshal","ActiveRecord::SessionStore::SqlBypass","classes/ActiveRecord/SessionStore/SqlBypass.html#method-c-unmarshal","(data)",""],["unmemoize_all","ActiveSupport::Memoizable::InstanceMethods","classes/ActiveSupport/Memoizable/InstanceMethods.html#method-i-unmemoize_all","()",""],["unnormalized","REXML::Entity","classes/REXML/Entity.html#method-i-unnormalized","()",""],["unpack","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-unpack","(options={})",""],["unpacked_path","Rails::GemDependency","classes/Rails/GemDependency.html#method-c-unpacked_path","()",""],["unquote","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-unquote","(q)","<p>Converts a quoted json string literal q into a UTF-8-encoded string. The\nrules are different than for …\n"],["until","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-until","(time = ::Time.now)","<p>Reads best with argument:  10.minutes.until(time)\n"],["until","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-until","(time = ::Time.current)",""],["unverifiable_types","Mime::Type","classes/Mime/Type.html#method-c-unverifiable_types","()",""],["upcase","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-upcase","()","<p>Convert characters in the string to uppercase.\n<p>Example:\n\n<pre>&#39;Laurent, òu sont les tests?&#39;.mb_chars.upcase.to_s ...</pre>\n"],["update","ActionController::Session::AbstractStore::SessionHash","classes/ActionController/Session/AbstractStore/SessionHash.html#method-i-update","(hash)",""],["update","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-update","(id, attributes)","<p>Updates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["update","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update","(sql, name = nil)","<p>Executes the update statement and returns the number of rows affected.\n"],["update","ActiveResource::Base","classes/ActiveResource/Base.html#method-i-update","()","<p>Update the resource on the remote service.\n"],["update","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-update","(other_hash)","<p>Updates the instantized hash with values from the second:\n\n<pre>hash_1 = HashWithIndifferentAccess.new\nhash_1[:key] ...</pre>\n"],["update_all","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-update_all","(updates, conditions = nil, options = {})","<p>Updates all records with details given if they match a set of conditions\nsupplied, limits and order can …\n"],["update_attribute","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-update_attribute","(name, value)","<p>Updates a single attribute and saves the record without going through the\nnormal validation procedure. …\n"],["update_attributes","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-update_attributes","(attributes)","<p>Updates all the attributes from the passed-in Hash and saves the record. If\nthe object is invalid, the …\n"],["update_attributes!","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-i-update_attributes-21","(attributes)","<p>Updates an object just like Base.update_attributes but calls save! instead\nof save so an exception is …\n"],["update_counters","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-update_counters","(id, counters)","<p>A generic “counter updater” implementation, intended primarily to be used\nby increment_counter …\n"],["update_counters_with_lock","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-update_counters_with_lock","(id, counters)","<p>Make sure the lock version column gets updated when counters are updated.\n"],["update_page","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-update_page","(&block)","<p>Yields a JavaScriptGenerator and returns the generated JavaScript code. Use\nthis to update multiple elements …\n"],["update_page_tag","ActionView::Helpers::PrototypeHelper","classes/ActionView/Helpers/PrototypeHelper.html#method-i-update_page_tag","(html_options = {}, &block)","<p>Works like update_page but wraps the generated JavaScript in a\n&lt;script&gt; tag. Use this to include …\n"],["update_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update_sql","(sql, name = nil)","<p>Executes the update statement and returns the number of rows affected.\n"],["update_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-update_sql","(sql, name = nil)","<p>Executes an UPDATE query and returns the number of affected tuples.\n"],["updated","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-i-updated","(date_or_time = nil)","<p>Accepts a Date or Time object and inserts it in the proper format. If nil\nis passed, current time in …\n"],["url","ActionController::Request","classes/ActionController/Request.html#method-i-url","()","<p>Returns the complete URL used for this request.\n"],["url_for","ActionController::Base","classes/ActionController/Base.html#method-i-url_for","(options = {})","<p>Returns a URL that has been rewritten according to the options hash and the\ndefined routes. (For doing …\n"],["url_for","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-url_for","(options)","<p>Returns the URL for the given options, according to the rules specified in\nthe application&#39;s routes. …\n"],["url_for","ActionController::UrlWriter","classes/ActionController/UrlWriter.html#method-i-url_for","(options)","<p>Generate a url based on the options provided, default_url_options and the\nroutes defined in routes.rb. …\n"],["url_for","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-url_for","(options = {})","<p>Returns the URL for the set of <code>options</code> provided. This takes\nthe same options as <code>url_for</code> in Action Controller …\n"],["us_zone_identifiers","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-c-us_zone_identifiers","()","<p>Returns all US zone identifiers. A shortcut for \nTZInfo::Country.get(&#39;US&#39;).zone_identifiers. …\n"],["us_zones","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-us_zones","()","<p>A convenience method for returning a collection of TimeZone objects for\ntime zones in the USA.\n"],["us_zones","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-c-us_zones","()","<p>Returns all US Timezone instances. A shortcut for \nTZInfo::Country.get(&#39;US&#39;).zones.\n<p>Returns TimezoneProxy …\n"],["usage","Rails::Generator::Options","classes/Rails/Generator/Options.html#method-i-usage","(message = usage_message)","<p>Raise a usage error.  Override usage_message to provide a blurb after the\noption parser summary.\n"],["usage_message","Rails::Generator::Base","classes/Rails/Generator/Base.html#method-i-usage_message","()","<p>Read USAGE from file in generator base path.\n"],["usage_message","Rails::Generator::Options","classes/Rails/Generator/Options.html#method-i-usage_message","()",""],["usage_message","Rails::Generator::Scripts::Base","classes/Rails/Generator/Scripts/Base.html#method-i-usage_message","()",""],["use","ActionController::MiddlewareStack","classes/ActionController/MiddlewareStack.html#method-i-use","(*args, &block)",""],["use_application_sources!","Rails::Generator::Lookup::ClassMethods","classes/Rails/Generator/Lookup/ClassMethods.html#method-i-use_application_sources-21","()","<p>Use application generators (app, ?).\n"],["use_checkout?","RailsEnvironment","classes/RailsEnvironment.html#method-i-use_checkout-3F","()",""],["use_component_sources!","Rails::Generator::Lookup::ClassMethods","classes/Rails/Generator/Lookup/ClassMethods.html#method-i-use_component_sources-21","()","<p>Use component generators (model, controller, etc).\n<p>Rails application.  If RAILS_ROOT is defined we know …\n"],["use_controllers!","ActionController::Routing","classes/ActionController/Routing.html#method-c-use_controllers-21","(controller_names)","<p>Replaces the internal list of controllers available to\nActionController::Routing with the passed argument. …\n"],["use_externals?","RailsEnvironment","classes/RailsEnvironment.html#method-i-use_externals-3F","()",""],["use_svn?","RailsEnvironment","classes/RailsEnvironment.html#method-i-use_svn-3F","()",""],["use_zone","ActiveSupport::CoreExtensions::Time::Zones::ClassMethods","classes/ActiveSupport/CoreExtensions/Time/Zones/ClassMethods.html#method-i-use_zone","(time_zone)","<p>Allows override of <code>Time.zone</code> locally inside supplied block;\nresets <code>Time.zone</code> to existing value when done. …\n"],["usec","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-usec","()",""],["user","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-user","()","<p>Gets the user for REST HTTP authentication.\n"],["user=","ActiveResource::Base","classes/ActiveResource/Base.html#method-c-user-3D","(user)","<p>Sets the user for REST HTTP authentication.\n"],["user=","ActiveResource::Connection","classes/ActiveResource/Connection.html#method-i-user-3D","(user)","<p>Set the user for remote service.\n"],["user_home","Dir","classes/Dir.html#method-c-user_home","()","<p>User home directory lookup adapted from RubyGems.\n"],["user_name_and_password","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-user_name_and_password","(request)",""],["uses_transaction","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction","(*methods)",""],["uses_transaction?","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction-3F","(method)",""],["utc","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-utc","()","<p>Adjusts DateTime to UTC by adding its offset value; offset is set to 0\n<p>Example:\n\n<pre>DateTime.civil(2005, 2, ...</pre>\n"],["utc","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc","()","<p>Returns a Time or DateTime instance that represents the time in UTC.\n"],["utc?","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-utc-3F","()","<p>Returns true if offset == 0\n"],["utc?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc-3F","()",""],["utc_after_start?","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-utc_after_start-3F","(utc)","<p>true if the given UTC DateTime is after the start of the period \n(inclusive); otherwise false.\n"],["utc_before_end?","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-utc_before_end-3F","(utc)","<p>true if the given UTC DateTime is before the end of the period \n(exclusive); otherwise false.\n"],["utc_end","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-utc_end","()","<p>The end time of the period in UTC as a DateTime. May be nil if unbounded.\n"],["utc_offset","ActiveSupport::CoreExtensions::DateTime::Calculations","classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#method-i-utc_offset","()","<p>Returns the offset value in seconds\n"],["utc_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc_offset","()",""],["utc_offset","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-utc_offset","()",""],["utc_offset","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-utc_offset","()","<p>Base offset of the timezone from UTC (seconds).\n"],["utc_start","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-utc_start","()","<p>The start time of the period in UTC as a DateTime. May be nil if unbounded.\n"],["utc_time","ActiveSupport::CoreExtensions::Time::Calculations::ClassMethods","classes/ActiveSupport/CoreExtensions/Time/Calculations/ClassMethods.html#method-i-utc_time","(*args)","<p>Wraps class method <code>time_with_datetime_fallback</code> with\n<code>utc_or_local</code> set to <code>:utc</code>.\n"],["utc_to_local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-utc_to_local","(time)","<p>Adjust the given time to the simultaneous time in the time zone represented\nby <code>self</code>. Returns a Time.utc() …\n"],["utc_to_local","TZInfo::Timezone","classes/TZInfo/Timezone.html#method-i-utc_to_local","(utc)","<p>Converts a time in UTC to the local timezone. utc can either be a DateTime,\nTime or timestamp (Time.to_i …\n"],["utc_total_offset","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-utc_total_offset","()","<p>Total offset from UTC (seconds). Equal to utc_offset + std_offset.\n"],["utc_total_offset_rational","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-utc_total_offset_rational","()","<p>Total offset from UTC (days). Result is a Rational.\n"],["valenc","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-valenc","(x)",""],["valid?","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-valid-3F","()","<p>Runs <code>validate</code> and <code>validate_on_create</code> or\n<code>validate_on_update</code> and returns true if no errors were added\notherwise …\n"],["valid?","ActiveResource::Validations","classes/ActiveResource/Validations.html#method-i-valid-3F","()","<p>Checks for errors on an object (i.e., is resource.errors empty?).\n<p>Examples\n\n<pre>my_person = Person.create(params[:person]) ...</pre>\n"],["valid?","Rails::Plugin","classes/Rails/Plugin.html#method-i-valid-3F","()",""],["valid_alter_table_options","ActiveRecord::ConnectionAdapters::SQLiteAdapter","classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-valid_alter_table_options","( type, options)","<p>See: www.sqlite.org/lang_altertable.html SQLite has an additional\nrestriction on the ALTER TABLE statement …\n"],["valid_for_local?","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-valid_for_local-3F","(local)","<p>true if this period is valid for the given local DateTime; otherwise false.\n"],["valid_for_utc?","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-valid_for_utc-3F","(utc)","<p>true if this period is valid for the given UTC DateTime; otherwise false.\n"],["validate","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-validate","()","<p>Overwrite this method for validation checks on all saves and use\n<code>Errors.add(field, msg)</code> for invalid attributes. …\n"],["validate_digest_response","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-validate_digest_response","(request, realm, &password_procedure)","<p>Returns false unless the request credentials response value matches the\nexpected value. First try the …\n"],["validate_nonce","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-validate_nonce","(request, value, seconds_to_timeout=5*60)","<p>Might want a shorter timeout depending on whether the request is a PUT or\nPOST, and if client is browser …\n"],["validate_on_create","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-validate_on_create","()","<p>Overwrite this method for validation checks used only on creation.\n"],["validate_on_update","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-validate_on_update","()","<p>Overwrite this method for validation checks used only on updates.\n"],["validates_acceptance_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_acceptance_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate the acceptance of a terms\nof service check box (or similar …\n"],["validates_associated","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated","(*attr_names)","<p>Validates whether the associated object or objects are all valid\nthemselves. Works with any kind of association. …\n"],["validates_confirmation_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_confirmation_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate a password or email address\nfield with a confirmation. …\n"],["validates_each","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_each","(*attrs)","<p>Validates each attribute against a block.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">validates_each</span> :<span class=\"ruby-identifier\">first_name</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["validates_exclusion_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_exclusion_of","(*attr_names)","<p>Validates that the value of the specified attribute is not in a particular\nenumerable object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["validates_format_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_format_of","(*attr_names)","<p>Validates whether the value of the specified attribute is of the correct\nform by matching it against …\n"],["validates_inclusion_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_inclusion_of","(*attr_names)","<p>Validates whether the value of the specified attribute is available in a\nparticular enumerable object. …\n"],["validates_length_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_length_of","(*attrs)","<p>Validates that the specified attribute matches the length restrictions\nsupplied. Only one option can …\n"],["validates_numericality_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_numericality_of","(*attr_names)","<p>Validates whether the value of the specified attribute is numeric by trying\nto convert it to a float …\n"],["validates_presence_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?). Happens by default …\n"],["validates_size_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_size_of","(*attrs)",""],["validates_uniqueness_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of","(*attr_names)","<p>Validates whether the value of the specified attributes are unique across\nthe system. Useful for making …\n"],["valparse","ActiveSupport::OkJson","classes/ActiveSupport/OkJson.html#method-i-valparse","(ts)","<p>Parses a “value” in the sense of RFC 4627. Returns the parsed value and any\ntrailing tokens. …\n"],["value","ActiveRecord::Error","classes/ActiveRecord/Error.html#method-i-value","()",""],["value","I18n::Backend::ActiveRecord::Translation","classes/I18n/Backend/ActiveRecord/Translation.html#method-i-value","()",""],["value=","I18n::Backend::ActiveRecord::StoreProcs","classes/I18n/Backend/ActiveRecord/StoreProcs.html#method-i-value-3D","(v)",""],["value_to_boolean","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-value_to_boolean","(value)","<p>convert something to a boolean\n"],["value_to_decimal","ActiveRecord::ConnectionAdapters::Column","classes/ActiveRecord/ConnectionAdapters/Column.html#method-c-value_to_decimal","(value)","<p>convert something to a BigDecimal\n"],["values_at","HashWithIndifferentAccess","classes/HashWithIndifferentAccess.html#method-i-values_at","(*indices)","<p>Returns an array of the values at the specified indices:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:a] ...</pre>\n"],["vendor_gem?","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-vendor_gem-3F","()",""],["vendor_rails?","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-vendor_rails-3F","()",""],["verifiable_request_format?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-verifiable_request_format-3F","()",""],["verification_timeout","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-verification_timeout","()","<p>Deprecated and no longer has any effect.\n"],["verification_timeout=","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-verification_timeout-3D","(flag)","<p>Deprecated and no longer has any effect.\n"],["verified_request?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-verified_request-3F","()","<p>Returns true or false if a request is verified.  Checks:\n<p>is the format restricted?  By default, only  …\n"],["verify","ActionController::Verification::ClassMethods","classes/ActionController/Verification/ClassMethods.html#method-i-verify","(options={})","<p>Verify the given actions so that if certain prerequisites are not met, the\nuser is redirected to a different …\n"],["verify","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-i-verify","(signed_message)",""],["verify!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-verify-21","(*ignored)","<p>Checks whether the connection to the database is still active (i.e. not\nstale). This is done under the …\n"],["verify_authenticity_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-verify_authenticity_token","()","<p>The actual before_filter that is used.  Modify this to change how you\nhandle unverified requests.\n"],["verify_request?","Mime::Type","classes/Mime/Type.html#method-i-verify_request-3F","()","<p>Returns true if Action Pack should check requests using this Mime Type for\npossible request forgery. …\n"],["version","Rails","classes/Rails.html#method-c-version","()",""],["version_for_dir","Rails::VendorGemSourceIndex","classes/Rails/VendorGemSourceIndex.html#method-i-version_for_dir","(d)",""],["view_path","Rails::Plugin","classes/Rails/Plugin.html#method-i-view_path","()",""],["view_paths","ActionController::Base","classes/ActionController/Base.html#method-i-view_paths","()","<p>View load paths for controller.\n"],["view_paths","ActionController::Base","classes/ActionController/Base.html#method-c-view_paths","()","<p>View load paths determine the bases from which template references can be\nmade. So a call to render(“ …\n"],["view_paths=","ActionController::Base","classes/ActionController/Base.html#method-i-view_paths-3D","(value)",""],["view_paths=","ActionController::Base","classes/ActionController/Base.html#method-c-view_paths-3D","(value)",""],["visual_effect","ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods","classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#method-i-visual_effect","(name, id = nil, options = {})","<p>Starts a script.aculo.us visual effect. See\nActionView::Helpers::ScriptaculousHelper for more information. …\n"],["visual_effect","ActionView::Helpers::ScriptaculousHelper","classes/ActionView/Helpers/ScriptaculousHelper.html#method-i-visual_effect","(name, element_id = false, js_options = {})","<p>Returns a JavaScript snippet to be used on the Ajax callbacks for starting\nvisual effects.\n<p>Example:\n\n<pre>&lt;%= ...</pre>\n"],["wants?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-wants-3F","(string)","<p>Returns <code>true</code> if the Chars class can and should act as a proxy\nfor the string <em>string</em>. Returns <code>false</code> otherwise. …\n"],["week","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-week","()",""],["weeks","ActiveSupport::CoreExtensions::Numeric::Time","classes/ActiveSupport/CoreExtensions/Numeric/Time.html#method-i-weeks","()",""],["with_backend","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-with_backend","(name)",""],["with_backend","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-with_backend","(name)",""],["with_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-with_connection","()","<p>Reserve a connection, and yield it to a block. Ensure the connection is\nchecked back in when finished. …\n"],["with_controllers","ActionController::Routing","classes/ActionController/Routing.html#method-c-with_controllers","(names)","<p>Expects an array of controller names as the first argument. Executes the\npassed block with only the named …\n"],["with_exclusive_scope","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-with_exclusive_scope","(method_scoping = {}, &block)","<p>Works like with_scope, but discards any nested properties.\n"],["with_gc_stats","ActiveSupport::Testing::Performance::Metrics::Base","classes/ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-with_gc_stats","()",""],["with_local_cache","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-with_local_cache","()",""],["with_locale","I18n","classes/I18n.html#method-c-with_locale","(tmp_locale = nil)","<p>Executes block with given I18n.locale set.\n"],["with_metadata","I18n::Backend::Metadata","classes/I18n/Backend/Metadata.html#method-i-with_metadata","(metadata, &block)",""],["with_options","Object","classes/Object.html#method-i-with_options","(options)","<p>An elegant way to factor duplication out of options passed to a series of\nmethod calls. Each method called …\n"],["with_output_file","ActiveSupport::Testing::Performance::Benchmarker","classes/ActiveSupport/Testing/Performance/Benchmarker.html#method-i-with_output_file","()",""],["with_routing","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-with_routing","()","<p>A helper to make it easier to test different route configurations. This\nmethod temporarily replaces  …\n"],["with_scope","ActiveRecord::Base","classes/ActiveRecord/Base.html#method-c-with_scope","(method_scoping = {}, action = :merge, &block)","<p>Scope parameters to method calls within the block.  Takes a hash of\nmethod_name =&gt; parameters hash. …\n"],["with_server","MemCache","classes/MemCache.html#method-i-with_server","(key)",""],["with_signal_handler","RailsFCGIHandler","classes/RailsFCGIHandler.html#method-i-with_signal_handler","(signal)",""],["with_socket_management","MemCache","classes/MemCache.html#method-i-with_socket_management","(server, &block)","<p>Gets or creates a socket connected to the given server, and yields it to\nthe block, wrapped in a mutex …\n"],["with_transaction_returning_status","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-with_transaction_returning_status","(method, *args)","<p>Executes <code>method</code> within a transaction and captures its return\nvalue as a status flag. If the status is …\n"],["word_wrap","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-word_wrap","(text, *args)","<p>Wraps the <code>text</code> into lines no longer than\n<code>line_width</code> width. This method breaks on the first whitespace …\n"],["wrap","ActiveSupport::CoreExtensions::Array::Wrapper","classes/ActiveSupport/CoreExtensions/Array/Wrapper.html#method-i-wrap","(object)","<p>Wraps the object in an Array unless it&#39;s an Array.  Converts the object\nto an Array using #to_ary …\n"],["write","ActionController::Response","classes/ActionController/Response.html#method-i-write","(str)",""],["write","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-write","(text=\"\")",""],["write","ActiveSupport::Cache::CompressedMemCacheStore","classes/ActiveSupport/Cache/CompressedMemCacheStore.html#method-i-write","(name, value, options = nil)",""],["write","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-write","(name, value, options = nil)",""],["write","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-write","(key, value, options = nil)","<p>Writes a value to the cache.\n<p>Possible options:\n<p><code>:unless_exist</code> - set to true if you don&#39;t want to update …\n"],["write","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-write","(name, value, options = nil)",""],["write","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-write","(key, value, options = nil)","<p>Writes the given value to the cache, with the given key.\n<p>You may also specify additional options via the …\n"],["write","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-write","(key, value, options = nil)",""],["write","ActiveSupport::Cache::SynchronizedMemoryStore","classes/ActiveSupport/Cache/SynchronizedMemoryStore.html#method-i-write","(name, value, options = nil)",""],["write_fragment","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-write_fragment","(key, content, options = nil)","<p>Writes <code>content</code> to the location signified by <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats)\n"],["write_specification","Rails::GemDependency","classes/Rails/GemDependency.html#method-i-write_specification","(spec)",""],["xchr","Fixnum","classes/Fixnum.html#method-i-xchr","()","<p>XML escaped version of chr\n"],["xhr","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-xhr","(request_method, path, parameters = nil, headers = nil)",""],["xhr","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-xhr","(request_method, action, parameters = nil, session = nil, flash = nil)",""],["xhr?","ActionController::Request","classes/ActionController/Request.html#method-i-xhr-3F","()",""],["xml","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-xml","(*args)",""],["xml_column_fallback","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-xml_column_fallback","(*args)",""],["xml_http_request","ActionController::Integration::Session","classes/ActionController/Integration/Session.html#method-i-xml_http_request","(request_method, path, parameters = nil, headers = nil)","<p>Performs an XMLHttpRequest request with the given parameters, mirroring a\nrequest from the Prototype …\n"],["xml_http_request","ActionController::TestProcess","classes/ActionController/TestProcess.html#method-i-xml_http_request","(request_method, action, parameters = nil, session = nil, flash = nil)",""],["xml_http_request?","ActionController::Request","classes/ActionController/Request.html#method-i-xml_http_request-3F","()","<p>Returns true if the request&#39;s “X-Requested-With” header contains\n“XMLHttpRequest”. …\n"],["xmlschema","ActiveSupport::CoreExtensions::Date::Conversions","classes/ActiveSupport/CoreExtensions/Date/Conversions.html#method-i-xmlschema","()",""],["xmlschema","ActiveSupport::CoreExtensions::DateTime::Conversions","classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#method-i-xmlschema","()","<p>Converts datetime to an appropriate format for use in XML\n"],["xmlschema","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-xmlschema","(fraction_digits = 0)",""],["year","ActiveSupport::CoreExtensions::Float::Time","classes/ActiveSupport/CoreExtensions/Float/Time.html#method-i-year","()",""],["year","ActiveSupport::CoreExtensions::Integer::Time","classes/ActiveSupport/CoreExtensions/Integer/Time.html#method-i-year","()",""],["years","ActiveSupport::CoreExtensions::Float::Time","classes/ActiveSupport/CoreExtensions/Float/Time.html#method-i-years","()","<p>Deprication helper methods not available as core_ext is loaded first.\n"],["years","ActiveSupport::CoreExtensions::Integer::Time","classes/ActiveSupport/CoreExtensions/Integer/Time.html#method-i-years","()",""],["years_ago","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-years_ago","(years)","<p>Returns a new Date/DateTime representing the time a number of specified\nyears ago\n"],["years_ago","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-years_ago","(years)","<p>Returns a new Time representing the time a number of specified years ago\n"],["years_since","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-years_since","(years)","<p>Returns a new Date/DateTime representing the time a number of specified\nyears in the future\n"],["years_since","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-years_since","(years)","<p>Returns a new Time representing the time a number of specified years in the\nfuture\n"],["years_without_deprecation","ActiveSupport::CoreExtensions::Float::Time","classes/ActiveSupport/CoreExtensions/Float/Time.html#method-i-years_without_deprecation","()",""],["yesterday","ActiveSupport::CoreExtensions::Date::Calculations","classes/ActiveSupport/CoreExtensions/Date/Calculations.html#method-i-yesterday","()","<p>Convenience method which returns a new Date/DateTime representing the time\n1 day ago\n"],["yesterday","ActiveSupport::CoreExtensions::Date::Calculations::ClassMethods","classes/ActiveSupport/CoreExtensions/Date/Calculations/ClassMethods.html#method-i-yesterday","()","<p>Returns a new Date representing the date 1 day ago (i.e. yesterday&#39;s\ndate).\n"],["yesterday","ActiveSupport::CoreExtensions::Time::Calculations","classes/ActiveSupport/CoreExtensions/Time/Calculations.html#method-i-yesterday","()","<p>Convenience method which returns a new Time representing the time 1 day ago\n"],["zone","ActiveSupport::CoreExtensions::Time::Zones::ClassMethods","classes/ActiveSupport/CoreExtensions/Time/Zones/ClassMethods.html#method-i-zone","()","<p>Returns the TimeZone for the current request, if this has been set (via\nTime.zone=).  If <code>Time.zone</code> has …\n"],["zone","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-zone","()","<p>Time uses <code>zone</code> to display the time zone abbreviation, so\nwe&#39;re duck-typing it.\n"],["zone=","ActiveSupport::CoreExtensions::Time::Zones::ClassMethods","classes/ActiveSupport/CoreExtensions/Time/Zones/ClassMethods.html#method-i-zone-3D","(time_zone)","<p>Sets <code>Time.zone</code> to a TimeZone object for the current\nrequest/thread.\n<p>This method accepts any of the following: …\n"],["zone_identifier","TZInfo::TimezonePeriod","classes/TZInfo/TimezonePeriod.html#method-i-zone_identifier","()",""],["zones_map","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-zones_map","()",""],["|","Builder::CSS","classes/Builder/CSS.html#method-i-7C","(part)",""],["README","","files/README.html","","<p>Welcome to Rails\n<p>Rails is a web-application framework that includes everything needed to\ncreate  database-backed …\n"],["CHANGELOG","","files/actionmailer/CHANGELOG.html","","<p>*2.3.11 (February 9, 2011)* *2.3.10 (October 15, 2010)* *2.3.9 (September\n4, 2010)* *2.3.8 (May 24, 2010)* …\n"],["README","","files/actionmailer/README.html","","<p>Action Mailer – Easy email delivery and testing\n<p>Action Mailer is a framework for designing email-service …\n"],["CHANGELOG","","files/actionpack/CHANGELOG.html","","\n<pre>2.3.11 (February 9, 2011)*\n\n Two security fixes. CVE-2011-0446, CVE-2011-0447\n\n2.3.10 (October 15, 2010)* ...</pre>\n"],["README","","files/actionpack/README.html","","<p>Action Pack – On rails from request to response\n<p>Action Pack splits the response to a web request into …\n"],["CHANGELOG","","files/activerecord/CHANGELOG.html","","<p>*2.3.11 (February 9, 2011)*\n<p>*2.3.10 (October 15, 2010)*\n<p>Security Release to fix CVE-2010-3933\n"],["README","","files/activerecord/README.html","","<p>Active Record – Object-relation mapping put on rails\n<p>Active Record connects business objects and database …\n"],["CHANGELOG","","files/activeresource/CHANGELOG.html","","<p>*2.3.11 (February 9, 2011)* *2.3.10 (October 15, 2010)* *2.3.9 (September\n4, 2010)* *2.3.8 (May 24, 2010)* …\n"],["README","","files/activeresource/README.html","","<p>Active Resource\n<p>Active Resource (ARes) connects business objects and Representational State\nTransfer ( …\n"],["CHANGELOG","","files/activesupport/CHANGELOG.html","","<p>## Rails 2.3.15 (Jan 8, 2012) ##\n<p>Hash.from_xml raises when it encounters type=“symbol” or type=“yaml”. …\n\n"],["README","","files/activesupport/README.html","","<p>Active Support – Utility classes and standard library extensions from Rails\n<p>Active Support is a collection …\n"],["CHANGELOG","","files/railties/CHANGELOG.html","","\n<pre>2.3.11 (February 9, 2011)*\n\n2.3.10 (October 15, 2010)*\n\n2.3.9 (September 4, 2010)*\n\n Deprecates config.load_(once_)paths ...</pre>\n"],["MIT-LICENSE","","files/railties/MIT-LICENSE.html","","<p>Copyright © 2004-2010 David Heinemeier Hansson\n<p>Permission is hereby granted, free of charge, to any …\n"],["README","","files/railties/README.html","","<p>Welcome to Rails\n<p>Rails is a web-application framework that includes everything needed to\ncreate  database-backed …\n"]]}}